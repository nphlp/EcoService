import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Address Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$AddressPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Address native fields only
 */
export type AddressModel = Flatten<Payload["scalars"]>;

/**
 * Address relations fields only
 */
export type AddressRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Address native and relations fields
 */
export type AddressComplete = Flatten<AddressModel & AddressRelations>;

/**
 * Address count type
 */
export type AddressCount = number;

// ========== Types ========== //

/**
 * Address Create props
 */
export type AddressCreateProps<T extends Prisma.AddressCreateArgs = Prisma.AddressCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressCreateArgs
>;

/**
 * Address Create response
 */
export type AddressCreateResponse<T extends Prisma.AddressCreateArgs = Prisma.AddressCreateArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Address Upsert props
 */
export type AddressUpsertProps<T extends Prisma.AddressUpsertArgs = Prisma.AddressUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressUpsertArgs
>;

/**
 * Address Upsert response
 */
export type AddressUpsertResponse<T extends Prisma.AddressUpsertArgs = Prisma.AddressUpsertArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Address Update props
 */
export type AddressUpdateProps<T extends Prisma.AddressUpdateArgs = Prisma.AddressUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressUpdateArgs
>;

/**
 * Address Update response
 */
export type AddressUpdateResponse<T extends Prisma.AddressUpdateArgs = Prisma.AddressUpdateArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Address Delete props
 */
export type AddressDeleteProps<T extends Prisma.AddressDeleteArgs = Prisma.AddressDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressDeleteArgs
>;

/**
 * Address Delete response
 */
export type AddressDeleteResponse<T extends Prisma.AddressDeleteArgs = Prisma.AddressDeleteArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Address Create Many props
 */
export type AddressCreateManyProps<T extends Prisma.AddressCreateManyArgs = Prisma.AddressCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.AddressCreateManyArgs>;

/**
 * Address Create Many response
 */
export type AddressCreateManyResponse = Prisma.BatchPayload;

/**
 * Address Update Many props
 */
export type AddressUpdateManyProps<T extends Prisma.AddressUpdateManyArgs = Prisma.AddressUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.AddressUpdateManyArgs>;

/**
 * Address Update Many response
 */
export type AddressUpdateManyResponse = Prisma.BatchPayload;

/**
 * Address Delete Many props
 */
export type AddressDeleteManyProps<T extends Prisma.AddressDeleteManyArgs = Prisma.AddressDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.AddressDeleteManyArgs>;

/**
 * Address Delete Many response
 */
export type AddressDeleteManyResponse = Prisma.BatchPayload;

/**
 * Address Find First props
 */
export type AddressFindFirstProps<T extends Prisma.AddressFindFirstArgs = Prisma.AddressFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.AddressFindFirstArgs>;

/**
 * Address Find First response
 */
export type AddressFindFirstResponse<T extends Prisma.AddressFindFirstArgs = Prisma.AddressFindFirstArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Address Find Unique props
 */
export type AddressFindUniqueProps<T extends Prisma.AddressFindUniqueArgs = Prisma.AddressFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.AddressFindUniqueArgs>;

/**
 * Address Find Unique response
 */
export type AddressFindUniqueResponse<T extends Prisma.AddressFindUniqueArgs = Prisma.AddressFindUniqueArgs> =
    GetResult<Prisma.$AddressPayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * Address Find Many props
 */
export type AddressFindManyProps<T extends Prisma.AddressFindManyArgs = Prisma.AddressFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.AddressFindManyArgs>;

/**
 * Address Find Many response
 */
export type AddressFindManyResponse<T extends Prisma.AddressFindManyArgs = Prisma.AddressFindManyArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Address Count props
 */
export type AddressCountProps<T extends Prisma.AddressCountArgs = Prisma.AddressCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressCountArgs
>;

/**
 * Address Count response
 */
export type AddressCountResponse<T extends Prisma.AddressCountArgs = Prisma.AddressCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.AddressCountAggregateOutputType>
        : number;
