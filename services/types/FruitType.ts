import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Fruit Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$FruitPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Fruit native fields only
 */
export type FruitModel = Flatten<Payload["scalars"]>;

/**
 * Fruit relations fields only
 */
export type FruitRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Fruit native and relations fields
 */
export type FruitComplete = Flatten<FruitModel & FruitRelations>;

/**
 * Fruit count type
 */
export type FruitCount = number;

// ========== Types ========== //

/**
 * Fruit Create props
 */
export type FruitCreateProps<T extends Prisma.FruitCreateArgs = Prisma.FruitCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.FruitCreateArgs
>;

/**
 * Fruit Create response
 */
export type FruitCreateResponse<T extends Prisma.FruitCreateArgs = Prisma.FruitCreateArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Fruit Upsert props
 */
export type FruitUpsertProps<T extends Prisma.FruitUpsertArgs = Prisma.FruitUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.FruitUpsertArgs
>;

/**
 * Fruit Upsert response
 */
export type FruitUpsertResponse<T extends Prisma.FruitUpsertArgs = Prisma.FruitUpsertArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Fruit Update props
 */
export type FruitUpdateProps<T extends Prisma.FruitUpdateArgs = Prisma.FruitUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.FruitUpdateArgs
>;

/**
 * Fruit Update response
 */
export type FruitUpdateResponse<T extends Prisma.FruitUpdateArgs = Prisma.FruitUpdateArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Fruit Delete props
 */
export type FruitDeleteProps<T extends Prisma.FruitDeleteArgs = Prisma.FruitDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.FruitDeleteArgs
>;

/**
 * Fruit Delete response
 */
export type FruitDeleteResponse<T extends Prisma.FruitDeleteArgs = Prisma.FruitDeleteArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Fruit Create Many props
 */
export type FruitCreateManyProps<T extends Prisma.FruitCreateManyArgs = Prisma.FruitCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.FruitCreateManyArgs>;

/**
 * Fruit Create Many response
 */
export type FruitCreateManyResponse = Prisma.BatchPayload;

/**
 * Fruit Update Many props
 */
export type FruitUpdateManyProps<T extends Prisma.FruitUpdateManyArgs = Prisma.FruitUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.FruitUpdateManyArgs>;

/**
 * Fruit Update Many response
 */
export type FruitUpdateManyResponse = Prisma.BatchPayload;

/**
 * Fruit Delete Many props
 */
export type FruitDeleteManyProps<T extends Prisma.FruitDeleteManyArgs = Prisma.FruitDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.FruitDeleteManyArgs>;

/**
 * Fruit Delete Many response
 */
export type FruitDeleteManyResponse = Prisma.BatchPayload;

/**
 * Fruit Find First props
 */
export type FruitFindFirstProps<T extends Prisma.FruitFindFirstArgs = Prisma.FruitFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.FruitFindFirstArgs
>;

/**
 * Fruit Find First response
 */
export type FruitFindFirstResponse<T extends Prisma.FruitFindFirstArgs = Prisma.FruitFindFirstArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Fruit Find Unique props
 */
export type FruitFindUniqueProps<T extends Prisma.FruitFindUniqueArgs = Prisma.FruitFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.FruitFindUniqueArgs>;

/**
 * Fruit Find Unique response
 */
export type FruitFindUniqueResponse<T extends Prisma.FruitFindUniqueArgs = Prisma.FruitFindUniqueArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

/**
 * Fruit Find Many props
 */
export type FruitFindManyProps<T extends Prisma.FruitFindManyArgs = Prisma.FruitFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.FruitFindManyArgs
>;

/**
 * Fruit Find Many response
 */
export type FruitFindManyResponse<T extends Prisma.FruitFindManyArgs = Prisma.FruitFindManyArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Fruit Count props
 */
export type FruitCountProps<T extends Prisma.FruitCountArgs = Prisma.FruitCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.FruitCountArgs
>;

/**
 * Fruit Count response
 */
export type FruitCountResponse<T extends Prisma.FruitCountArgs = Prisma.FruitCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.FruitCountAggregateOutputType>
        : number;
