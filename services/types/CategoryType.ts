import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Category Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$CategoryPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Category native fields only
 */
export type CategoryModel = Flatten<Payload["scalars"]>;

/**
 * Category relations fields only
 */
export type CategoryRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Category native and relations fields
 */
export type CategoryComplete = Flatten<CategoryModel & CategoryRelations>;

/**
 * Category count type
 */
export type CategoryCount = number;

// ========== Types ========== //

/**
 * Category Create props
 */
export type CategoryCreateProps<T extends Prisma.CategoryCreateArgs = Prisma.CategoryCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryCreateArgs
>;

/**
 * Category Create response
 */
export type CategoryCreateResponse<T extends Prisma.CategoryCreateArgs = Prisma.CategoryCreateArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Category Upsert props
 */
export type CategoryUpsertProps<T extends Prisma.CategoryUpsertArgs = Prisma.CategoryUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryUpsertArgs
>;

/**
 * Category Upsert response
 */
export type CategoryUpsertResponse<T extends Prisma.CategoryUpsertArgs = Prisma.CategoryUpsertArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Category Update props
 */
export type CategoryUpdateProps<T extends Prisma.CategoryUpdateArgs = Prisma.CategoryUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryUpdateArgs
>;

/**
 * Category Update response
 */
export type CategoryUpdateResponse<T extends Prisma.CategoryUpdateArgs = Prisma.CategoryUpdateArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Category Delete props
 */
export type CategoryDeleteProps<T extends Prisma.CategoryDeleteArgs = Prisma.CategoryDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryDeleteArgs
>;

/**
 * Category Delete response
 */
export type CategoryDeleteResponse<T extends Prisma.CategoryDeleteArgs = Prisma.CategoryDeleteArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Category Create Many props
 */
export type CategoryCreateManyProps<T extends Prisma.CategoryCreateManyArgs = Prisma.CategoryCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.CategoryCreateManyArgs>;

/**
 * Category Create Many response
 */
export type CategoryCreateManyResponse = Prisma.PrismaPromise<Prisma.BatchPayload>;

/**
 * Category Update Many props
 */
export type CategoryUpdateManyProps<T extends Prisma.CategoryUpdateManyArgs = Prisma.CategoryUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.CategoryUpdateManyArgs>;

/**
 * Category Update Many response
 */
export type CategoryUpdateManyResponse = Prisma.PrismaPromise<Prisma.BatchPayload>;

/**
 * Category Delete Many props
 */
export type CategoryDeleteManyProps<T extends Prisma.CategoryDeleteManyArgs = Prisma.CategoryDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.CategoryDeleteManyArgs>;

/**
 * Category Delete Many response
 */
export type CategoryDeleteManyResponse = Prisma.PrismaPromise<Prisma.BatchPayload>;

/**
 * Category Find First props
 */
export type CategoryFindFirstProps<T extends Prisma.CategoryFindFirstArgs = Prisma.CategoryFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.CategoryFindFirstArgs>;

/**
 * Category Find First response
 */
export type CategoryFindFirstResponse<T extends Prisma.CategoryFindFirstArgs = Prisma.CategoryFindFirstArgs> =
    GetResult<Prisma.$CategoryPayload<InternalArgs>, T, "findFirst", PrismaClientOptions>;

/**
 * Category Find Unique props
 */
export type CategoryFindUniqueProps<T extends Prisma.CategoryFindUniqueArgs = Prisma.CategoryFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.CategoryFindUniqueArgs>;

/**
 * Category Find Unique response
 */
export type CategoryFindUniqueResponse<T extends Prisma.CategoryFindUniqueArgs = Prisma.CategoryFindUniqueArgs> =
    GetResult<Prisma.$CategoryPayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * Category Find Many props
 */
export type CategoryFindManyProps<T extends Prisma.CategoryFindManyArgs = Prisma.CategoryFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.CategoryFindManyArgs>;

/**
 * Category Find Many response
 */
export type CategoryFindManyResponse<T extends Prisma.CategoryFindManyArgs = Prisma.CategoryFindManyArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Category Count props
 */
export type CategoryCountProps<T extends Prisma.CategoryCountArgs = Prisma.CategoryCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryCountArgs
>;

/**
 * Category Count response
 */
export type CategoryCountResponse<T extends Prisma.CategoryCountArgs = Prisma.CategoryCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.CategoryCountAggregateOutputType>
        : number;
