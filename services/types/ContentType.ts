import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Content Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$ContentPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Content native fields only
 */
export type ContentModel = Flatten<Payload["scalars"]>;

/**
 * Content relations fields only
 */
export type ContentRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Content native and relations fields
 */
export type ContentComplete = Flatten<ContentModel & ContentRelations>;

/**
 * Content count type
 */
export type ContentCount = number;

// ========== Types ========== //

/**
 * Content Create props
 */
export type ContentCreateProps<T extends Prisma.ContentCreateArgs = Prisma.ContentCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContentCreateArgs
>;

/**
 * Content Create response
 */
export type ContentCreateResponse<T extends Prisma.ContentCreateArgs = Prisma.ContentCreateArgs> = GetResult<
    Prisma.$ContentPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Content Upsert props
 */
export type ContentUpsertProps<T extends Prisma.ContentUpsertArgs = Prisma.ContentUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContentUpsertArgs
>;

/**
 * Content Upsert response
 */
export type ContentUpsertResponse<T extends Prisma.ContentUpsertArgs = Prisma.ContentUpsertArgs> = GetResult<
    Prisma.$ContentPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Content Update props
 */
export type ContentUpdateProps<T extends Prisma.ContentUpdateArgs = Prisma.ContentUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContentUpdateArgs
>;

/**
 * Content Update response
 */
export type ContentUpdateResponse<T extends Prisma.ContentUpdateArgs = Prisma.ContentUpdateArgs> = GetResult<
    Prisma.$ContentPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Content Delete props
 */
export type ContentDeleteProps<T extends Prisma.ContentDeleteArgs = Prisma.ContentDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContentDeleteArgs
>;

/**
 * Content Delete response
 */
export type ContentDeleteResponse<T extends Prisma.ContentDeleteArgs = Prisma.ContentDeleteArgs> = GetResult<
    Prisma.$ContentPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Content Create Many props
 */
export type ContentCreateManyProps<T extends Prisma.ContentCreateManyArgs = Prisma.ContentCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.ContentCreateManyArgs>;

/**
 * Content Create Many response
 */
export type ContentCreateManyResponse = Prisma.BatchPayload;

/**
 * Content Update Many props
 */
export type ContentUpdateManyProps<T extends Prisma.ContentUpdateManyArgs = Prisma.ContentUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.ContentUpdateManyArgs>;

/**
 * Content Update Many response
 */
export type ContentUpdateManyResponse = Prisma.BatchPayload;

/**
 * Content Delete Many props
 */
export type ContentDeleteManyProps<T extends Prisma.ContentDeleteManyArgs = Prisma.ContentDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.ContentDeleteManyArgs>;

/**
 * Content Delete Many response
 */
export type ContentDeleteManyResponse = Prisma.BatchPayload;

/**
 * Content Find First props
 */
export type ContentFindFirstProps<T extends Prisma.ContentFindFirstArgs = Prisma.ContentFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.ContentFindFirstArgs>;

/**
 * Content Find First response
 */
export type ContentFindFirstResponse<T extends Prisma.ContentFindFirstArgs = Prisma.ContentFindFirstArgs> = GetResult<
    Prisma.$ContentPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Content Find Unique props
 */
export type ContentFindUniqueProps<T extends Prisma.ContentFindUniqueArgs = Prisma.ContentFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.ContentFindUniqueArgs>;

/**
 * Content Find Unique response
 */
export type ContentFindUniqueResponse<T extends Prisma.ContentFindUniqueArgs = Prisma.ContentFindUniqueArgs> =
    GetResult<Prisma.$ContentPayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * Content Find Many props
 */
export type ContentFindManyProps<T extends Prisma.ContentFindManyArgs = Prisma.ContentFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.ContentFindManyArgs>;

/**
 * Content Find Many response
 */
export type ContentFindManyResponse<T extends Prisma.ContentFindManyArgs = Prisma.ContentFindManyArgs> = GetResult<
    Prisma.$ContentPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Content Count props
 */
export type ContentCountProps<T extends Prisma.ContentCountArgs = Prisma.ContentCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContentCountArgs
>;

/**
 * Content Count response
 */
export type ContentCountResponse<T extends Prisma.ContentCountArgs = Prisma.ContentCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ContentCountAggregateOutputType>
        : number;
