import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Product Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$ProductPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Product native fields only
 */
export type ProductModel = Flatten<Payload["scalars"]>;

/**
 * Product relations fields only
 */
export type ProductRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Product native and relations fields
 */
export type ProductComplete = Flatten<ProductModel & ProductRelations>;

/**
 * Product count type
 */
export type ProductCount = number;

// ========== Types ========== //

/**
 * Product Create props
 */
export type ProductCreateProps<T extends Prisma.ProductCreateArgs = Prisma.ProductCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductCreateArgs
>;

/**
 * Product Create response
 */
export type ProductCreateResponse<T extends Prisma.ProductCreateArgs = Prisma.ProductCreateArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Product Upsert props
 */
export type ProductUpsertProps<T extends Prisma.ProductUpsertArgs = Prisma.ProductUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductUpsertArgs
>;

/**
 * Product Upsert response
 */
export type ProductUpsertResponse<T extends Prisma.ProductUpsertArgs = Prisma.ProductUpsertArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Product Update props
 */
export type ProductUpdateProps<T extends Prisma.ProductUpdateArgs = Prisma.ProductUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductUpdateArgs
>;

/**
 * Product Update response
 */
export type ProductUpdateResponse<T extends Prisma.ProductUpdateArgs = Prisma.ProductUpdateArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Product Delete props
 */
export type ProductDeleteProps<T extends Prisma.ProductDeleteArgs = Prisma.ProductDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductDeleteArgs
>;

/**
 * Product Delete response
 */
export type ProductDeleteResponse<T extends Prisma.ProductDeleteArgs = Prisma.ProductDeleteArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Product Create Many props
 */
export type ProductCreateManyProps<T extends Prisma.ProductCreateManyArgs = Prisma.ProductCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.ProductCreateManyArgs>;

/**
 * Product Create Many response
 */
export type ProductCreateManyResponse = Prisma.BatchPayload;

/**
 * Product Update Many props
 */
export type ProductUpdateManyProps<T extends Prisma.ProductUpdateManyArgs = Prisma.ProductUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.ProductUpdateManyArgs>;

/**
 * Product Update Many response
 */
export type ProductUpdateManyResponse = Prisma.BatchPayload;

/**
 * Product Delete Many props
 */
export type ProductDeleteManyProps<T extends Prisma.ProductDeleteManyArgs = Prisma.ProductDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.ProductDeleteManyArgs>;

/**
 * Product Delete Many response
 */
export type ProductDeleteManyResponse = Prisma.BatchPayload;

/**
 * Product Find First props
 */
export type ProductFindFirstProps<T extends Prisma.ProductFindFirstArgs = Prisma.ProductFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.ProductFindFirstArgs>;

/**
 * Product Find First response
 */
export type ProductFindFirstResponse<T extends Prisma.ProductFindFirstArgs = Prisma.ProductFindFirstArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Product Find Unique props
 */
export type ProductFindUniqueProps<T extends Prisma.ProductFindUniqueArgs = Prisma.ProductFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.ProductFindUniqueArgs>;

/**
 * Product Find Unique response
 */
export type ProductFindUniqueResponse<T extends Prisma.ProductFindUniqueArgs = Prisma.ProductFindUniqueArgs> =
    GetResult<Prisma.$ProductPayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * Product Find Many props
 */
export type ProductFindManyProps<T extends Prisma.ProductFindManyArgs = Prisma.ProductFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.ProductFindManyArgs>;

/**
 * Product Find Many response
 */
export type ProductFindManyResponse<T extends Prisma.ProductFindManyArgs = Prisma.ProductFindManyArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Product Count props
 */
export type ProductCountProps<T extends Prisma.ProductCountArgs = Prisma.ProductCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductCountArgs
>;

/**
 * Product Count response
 */
export type ProductCountResponse<T extends Prisma.ProductCountArgs = Prisma.ProductCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ProductCountAggregateOutputType>
        : number;
