import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Quantity Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$QuantityPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Quantity native fields only
 */
export type QuantityModel = Flatten<Payload["scalars"]>;

/**
 * Quantity relations fields only
 */
export type QuantityRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Quantity native and relations fields
 */
export type QuantityComplete = Flatten<QuantityModel & QuantityRelations>;

/**
 * Quantity count type
 */
export type QuantityCount = number;

// ========== Types ========== //

/**
 * Quantity Create props
 */
export type QuantityCreateProps<T extends Prisma.QuantityCreateArgs = Prisma.QuantityCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityCreateArgs
>;

/**
 * Quantity Create response
 */
export type QuantityCreateResponse<T extends Prisma.QuantityCreateArgs = Prisma.QuantityCreateArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Quantity Upsert props
 */
export type QuantityUpsertProps<T extends Prisma.QuantityUpsertArgs = Prisma.QuantityUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityUpsertArgs
>;

/**
 * Quantity Upsert response
 */
export type QuantityUpsertResponse<T extends Prisma.QuantityUpsertArgs = Prisma.QuantityUpsertArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Quantity Update props
 */
export type QuantityUpdateProps<T extends Prisma.QuantityUpdateArgs = Prisma.QuantityUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityUpdateArgs
>;

/**
 * Quantity Update response
 */
export type QuantityUpdateResponse<T extends Prisma.QuantityUpdateArgs = Prisma.QuantityUpdateArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Quantity Delete props
 */
export type QuantityDeleteProps<T extends Prisma.QuantityDeleteArgs = Prisma.QuantityDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityDeleteArgs
>;

/**
 * Quantity Delete response
 */
export type QuantityDeleteResponse<T extends Prisma.QuantityDeleteArgs = Prisma.QuantityDeleteArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Quantity Create Many props
 */
export type QuantityCreateManyProps<T extends Prisma.QuantityCreateManyArgs = Prisma.QuantityCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.QuantityCreateManyArgs>;

/**
 * Quantity Create Many response
 */
export type QuantityCreateManyResponse = Prisma.PrismaPromise<Prisma.BatchPayload>;

/**
 * Quantity Update Many props
 */
export type QuantityUpdateManyProps<T extends Prisma.QuantityUpdateManyArgs = Prisma.QuantityUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.QuantityUpdateManyArgs>;

/**
 * Quantity Update Many response
 */
export type QuantityUpdateManyResponse = Prisma.PrismaPromise<Prisma.BatchPayload>;

/**
 * Quantity Delete Many props
 */
export type QuantityDeleteManyProps<T extends Prisma.QuantityDeleteManyArgs = Prisma.QuantityDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.QuantityDeleteManyArgs>;

/**
 * Quantity Delete Many response
 */
export type QuantityDeleteManyResponse = Prisma.PrismaPromise<Prisma.BatchPayload>;

/**
 * Quantity Find First props
 */
export type QuantityFindFirstProps<T extends Prisma.QuantityFindFirstArgs = Prisma.QuantityFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.QuantityFindFirstArgs>;

/**
 * Quantity Find First response
 */
export type QuantityFindFirstResponse<T extends Prisma.QuantityFindFirstArgs = Prisma.QuantityFindFirstArgs> =
    GetResult<Prisma.$QuantityPayload<InternalArgs>, T, "findFirst", PrismaClientOptions>;

/**
 * Quantity Find Unique props
 */
export type QuantityFindUniqueProps<T extends Prisma.QuantityFindUniqueArgs = Prisma.QuantityFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.QuantityFindUniqueArgs>;

/**
 * Quantity Find Unique response
 */
export type QuantityFindUniqueResponse<T extends Prisma.QuantityFindUniqueArgs = Prisma.QuantityFindUniqueArgs> =
    GetResult<Prisma.$QuantityPayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * Quantity Find Many props
 */
export type QuantityFindManyProps<T extends Prisma.QuantityFindManyArgs = Prisma.QuantityFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.QuantityFindManyArgs>;

/**
 * Quantity Find Many response
 */
export type QuantityFindManyResponse<T extends Prisma.QuantityFindManyArgs = Prisma.QuantityFindManyArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Quantity Count props
 */
export type QuantityCountProps<T extends Prisma.QuantityCountArgs = Prisma.QuantityCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityCountArgs
>;

/**
 * Quantity Count response
 */
export type QuantityCountResponse<T extends Prisma.QuantityCountArgs = Prisma.QuantityCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.QuantityCountAggregateOutputType>
        : number;
