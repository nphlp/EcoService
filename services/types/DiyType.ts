import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Diy Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$DiyPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Diy native fields only
 */
export type DiyModel = Flatten<Payload["scalars"]>;

/**
 * Diy relations fields only
 */
export type DiyRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Diy native and relations fields
 */
export type DiyComplete = Flatten<DiyModel & DiyRelations>;

/**
 * Diy count type
 */
export type DiyCount = number;

// ========== Types ========== //

/**
 * Diy Create props
 */
export type DiyCreateProps<T extends Prisma.DiyCreateArgs = Prisma.DiyCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyCreateArgs
>;

/**
 * Diy Create response
 */
export type DiyCreateResponse<T extends Prisma.DiyCreateArgs = Prisma.DiyCreateArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Diy Upsert props
 */
export type DiyUpsertProps<T extends Prisma.DiyUpsertArgs = Prisma.DiyUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyUpsertArgs
>;

/**
 * Diy Upsert response
 */
export type DiyUpsertResponse<T extends Prisma.DiyUpsertArgs = Prisma.DiyUpsertArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Diy Update props
 */
export type DiyUpdateProps<T extends Prisma.DiyUpdateArgs = Prisma.DiyUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyUpdateArgs
>;

/**
 * Diy Update response
 */
export type DiyUpdateResponse<T extends Prisma.DiyUpdateArgs = Prisma.DiyUpdateArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Diy Delete props
 */
export type DiyDeleteProps<T extends Prisma.DiyDeleteArgs = Prisma.DiyDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyDeleteArgs
>;

/**
 * Diy Delete response
 */
export type DiyDeleteResponse<T extends Prisma.DiyDeleteArgs = Prisma.DiyDeleteArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Diy Create Many props
 */
export type DiyCreateManyProps<T extends Prisma.DiyCreateManyArgs = Prisma.DiyCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyCreateManyArgs
>;

/**
 * Diy Create Many response
 */
export type DiyCreateManyResponse = Prisma.BatchPayload;

/**
 * Diy Update Many props
 */
export type DiyUpdateManyProps<T extends Prisma.DiyUpdateManyArgs = Prisma.DiyUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyUpdateManyArgs
>;

/**
 * Diy Update Many response
 */
export type DiyUpdateManyResponse = Prisma.BatchPayload;

/**
 * Diy Delete Many props
 */
export type DiyDeleteManyProps<T extends Prisma.DiyDeleteManyArgs = Prisma.DiyDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyDeleteManyArgs
>;

/**
 * Diy Delete Many response
 */
export type DiyDeleteManyResponse = Prisma.BatchPayload;

/**
 * Diy Find First props
 */
export type DiyFindFirstProps<T extends Prisma.DiyFindFirstArgs = Prisma.DiyFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyFindFirstArgs
>;

/**
 * Diy Find First response
 */
export type DiyFindFirstResponse<T extends Prisma.DiyFindFirstArgs = Prisma.DiyFindFirstArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Diy Find Unique props
 */
export type DiyFindUniqueProps<T extends Prisma.DiyFindUniqueArgs = Prisma.DiyFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyFindUniqueArgs
>;

/**
 * Diy Find Unique response
 */
export type DiyFindUniqueResponse<T extends Prisma.DiyFindUniqueArgs = Prisma.DiyFindUniqueArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

/**
 * Diy Find Many props
 */
export type DiyFindManyProps<T extends Prisma.DiyFindManyArgs = Prisma.DiyFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyFindManyArgs
>;

/**
 * Diy Find Many response
 */
export type DiyFindManyResponse<T extends Prisma.DiyFindManyArgs = Prisma.DiyFindManyArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Diy Count props
 */
export type DiyCountProps<T extends Prisma.DiyCountArgs = Prisma.DiyCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.DiyCountArgs
>;

/**
 * Diy Count response
 */
export type DiyCountResponse<T extends Prisma.DiyCountArgs = Prisma.DiyCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.DiyCountAggregateOutputType>
        : number;
