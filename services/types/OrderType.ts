import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Order Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$OrderPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * Order native fields only
 */
export type OrderModel = Flatten<Payload["scalars"]>;

/**
 * Order relations fields only
 */
export type OrderRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * Order native and relations fields
 */
export type OrderComplete = Flatten<OrderModel & OrderRelations>;

/**
 * Order count type
 */
export type OrderCount = number;

// ========== Types ========== //

/**
 * Order Create props
 */
export type OrderCreateProps<T extends Prisma.OrderCreateArgs = Prisma.OrderCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.OrderCreateArgs
>;

/**
 * Order Create response
 */
export type OrderCreateResponse<T extends Prisma.OrderCreateArgs = Prisma.OrderCreateArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * Order Upsert props
 */
export type OrderUpsertProps<T extends Prisma.OrderUpsertArgs = Prisma.OrderUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.OrderUpsertArgs
>;

/**
 * Order Upsert response
 */
export type OrderUpsertResponse<T extends Prisma.OrderUpsertArgs = Prisma.OrderUpsertArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * Order Update props
 */
export type OrderUpdateProps<T extends Prisma.OrderUpdateArgs = Prisma.OrderUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.OrderUpdateArgs
>;

/**
 * Order Update response
 */
export type OrderUpdateResponse<T extends Prisma.OrderUpdateArgs = Prisma.OrderUpdateArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * Order Delete props
 */
export type OrderDeleteProps<T extends Prisma.OrderDeleteArgs = Prisma.OrderDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.OrderDeleteArgs
>;

/**
 * Order Delete response
 */
export type OrderDeleteResponse<T extends Prisma.OrderDeleteArgs = Prisma.OrderDeleteArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * Order Create Many props
 */
export type OrderCreateManyProps<T extends Prisma.OrderCreateManyArgs = Prisma.OrderCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.OrderCreateManyArgs>;

/**
 * Order Create Many response
 */
export type OrderCreateManyResponse = Prisma.BatchPayload;

/**
 * Order Update Many props
 */
export type OrderUpdateManyProps<T extends Prisma.OrderUpdateManyArgs = Prisma.OrderUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.OrderUpdateManyArgs>;

/**
 * Order Update Many response
 */
export type OrderUpdateManyResponse = Prisma.BatchPayload;

/**
 * Order Delete Many props
 */
export type OrderDeleteManyProps<T extends Prisma.OrderDeleteManyArgs = Prisma.OrderDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.OrderDeleteManyArgs>;

/**
 * Order Delete Many response
 */
export type OrderDeleteManyResponse = Prisma.BatchPayload;

/**
 * Order Find First props
 */
export type OrderFindFirstProps<T extends Prisma.OrderFindFirstArgs = Prisma.OrderFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.OrderFindFirstArgs
>;

/**
 * Order Find First response
 */
export type OrderFindFirstResponse<T extends Prisma.OrderFindFirstArgs = Prisma.OrderFindFirstArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

/**
 * Order Find Unique props
 */
export type OrderFindUniqueProps<T extends Prisma.OrderFindUniqueArgs = Prisma.OrderFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.OrderFindUniqueArgs>;

/**
 * Order Find Unique response
 */
export type OrderFindUniqueResponse<T extends Prisma.OrderFindUniqueArgs = Prisma.OrderFindUniqueArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

/**
 * Order Find Many props
 */
export type OrderFindManyProps<T extends Prisma.OrderFindManyArgs = Prisma.OrderFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.OrderFindManyArgs
>;

/**
 * Order Find Many response
 */
export type OrderFindManyResponse<T extends Prisma.OrderFindManyArgs = Prisma.OrderFindManyArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

/**
 * Order Count props
 */
export type OrderCountProps<T extends Prisma.OrderCountArgs = Prisma.OrderCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.OrderCountArgs
>;

/**
 * Order Count response
 */
export type OrderCountResponse<T extends Prisma.OrderCountArgs = Prisma.OrderCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.OrderCountAggregateOutputType>
        : number;
