"use server";

import ArticleService from "@class/ArticleClass";
import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Article Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type ArticleCreateProps<T extends Prisma.ArticleCreateArgs> = Prisma.SelectSubset<T, Prisma.ArticleCreateArgs>;
type ArticleCreateResponse<T extends Prisma.ArticleCreateArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type ArticleUpsertProps<T extends Prisma.ArticleUpsertArgs> = Prisma.SelectSubset<T, Prisma.ArticleUpsertArgs>;
type ArticleUpsertResponse<T extends Prisma.ArticleUpsertArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type ArticleUpdateProps<T extends Prisma.ArticleUpdateArgs> = Prisma.SelectSubset<T, Prisma.ArticleUpdateArgs>;
type ArticleUpdateResponse<T extends Prisma.ArticleUpdateArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type ArticleDeleteProps<T extends Prisma.ArticleDeleteArgs> = Prisma.SelectSubset<T, Prisma.ArticleDeleteArgs>;
type ArticleDeleteResponse<T extends Prisma.ArticleDeleteArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type ArticleCreateManyProps<T extends Prisma.ArticleCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ArticleCreateManyArgs
>;
type ArticleCreateManyResponse = Prisma.BatchPayload;

// Update Many
type ArticleUpdateManyProps<T extends Prisma.ArticleUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ArticleUpdateManyArgs
>;
type ArticleUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type ArticleDeleteManyProps<T extends Prisma.ArticleDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ArticleDeleteManyArgs
>;
type ArticleDeleteManyResponse = Prisma.BatchPayload;

// Find First
type ArticleFindFirstProps<T extends Prisma.ArticleFindFirstArgs> = Prisma.SelectSubset<T, Prisma.ArticleFindFirstArgs>;
type ArticleFindFirstResponse<T extends Prisma.ArticleFindFirstArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type ArticleFindUniqueProps<T extends Prisma.ArticleFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.ArticleFindUniqueArgs
>;
type ArticleFindUniqueResponse<T extends Prisma.ArticleFindUniqueArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type ArticleFindManyProps<T extends Prisma.ArticleFindManyArgs> = Prisma.SelectSubset<T, Prisma.ArticleFindManyArgs>;
type ArticleFindManyResponse<T extends Prisma.ArticleFindManyArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type ArticleCountProps<T extends Prisma.ArticleCountArgs> = Prisma.SelectSubset<T, Prisma.ArticleCountArgs>;
type ArticleCountResponse<T extends Prisma.ArticleCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ArticleCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Article Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ArticleCreateAction = async <T extends Prisma.ArticleCreateArgs>(
    props: ArticleCreateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleCreateResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleCreateAction", "Article", "create");
    return await ArticleService.create(props);
};

/**
 * ## Article Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ArticleUpsertAction = async <T extends Prisma.ArticleUpsertArgs>(
    props: ArticleUpsertProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleUpsertResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleUpsertAction", "Article", "upsert");
    return await ArticleService.upsert(props);
};

/**
 * ## Article Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ArticleUpdateAction = async <T extends Prisma.ArticleUpdateArgs>(
    props: ArticleUpdateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleUpdateResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleUpdateAction", "Article", "update");
    return await ArticleService.update(props);
};

/**
 * ## Article Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ArticleDeleteAction = async <T extends Prisma.ArticleDeleteArgs>(
    props: ArticleDeleteProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleDeleteResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleDeleteAction", "Article", "delete");
    return await ArticleService.delete(props);
};

/**
 * ## Article Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ArticleCreateManyAction = async <T extends Prisma.ArticleCreateManyArgs>(
    props: ArticleCreateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleCreateManyResponse> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleCreateManyAction", "Article", "createMany");
    return await ArticleService.createMany(props);
};

/**
 * ## Article Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ArticleUpdateManyAction = async <T extends Prisma.ArticleUpdateManyArgs>(
    props: ArticleUpdateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleUpdateManyResponse> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleUpdateManyAction", "Article", "updateMany");
    return await ArticleService.updateMany(props);
};

/**
 * ## Article Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ArticleDeleteManyAction = async <T extends Prisma.ArticleDeleteManyArgs>(
    props: ArticleDeleteManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleDeleteManyResponse> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleDeleteManyAction", "Article", "deleteMany");
    return await ArticleService.deleteMany(props);
};

/**
 * ## Article Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ArticleFindFirstAction = async <T extends Prisma.ArticleFindFirstArgs>(
    props: ArticleFindFirstProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleFindFirstResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleFindFirstAction", "Article", "findFirst");
    return await ArticleService.findFirst(props);
};

/**
 * ## Article Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ArticleFindUniqueAction = async <T extends Prisma.ArticleFindUniqueArgs>(
    props: ArticleFindUniqueProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleFindUniqueResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleFindUniqueAction", "Article", "findUnique");
    return await ArticleService.findUnique(props);
};

/**
 * ## Article Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ArticleFindManyAction = async <T extends Prisma.ArticleFindManyArgs>(
    props: ArticleFindManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleFindManyResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleFindManyAction", "Article", "findMany");
    return await ArticleService.findMany(props);
};

/**
 * ## Article Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ArticleCountAction = async <T extends Prisma.ArticleCountArgs>(
    props: ArticleCountProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ArticleCountResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ArticleCountAction", "Article", "count");
    return await ArticleService.count(props);
};
