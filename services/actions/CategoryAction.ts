"use server";

import CategoryService from "@class/CategoryClass";
import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Category Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type CategoryCreateProps<T extends Prisma.CategoryCreateArgs> = Prisma.SelectSubset<T, Prisma.CategoryCreateArgs>;
type CategoryCreateResponse<T extends Prisma.CategoryCreateArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type CategoryUpsertProps<T extends Prisma.CategoryUpsertArgs> = Prisma.SelectSubset<T, Prisma.CategoryUpsertArgs>;
type CategoryUpsertResponse<T extends Prisma.CategoryUpsertArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type CategoryUpdateProps<T extends Prisma.CategoryUpdateArgs> = Prisma.SelectSubset<T, Prisma.CategoryUpdateArgs>;
type CategoryUpdateResponse<T extends Prisma.CategoryUpdateArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type CategoryDeleteProps<T extends Prisma.CategoryDeleteArgs> = Prisma.SelectSubset<T, Prisma.CategoryDeleteArgs>;
type CategoryDeleteResponse<T extends Prisma.CategoryDeleteArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type CategoryCreateManyProps<T extends Prisma.CategoryCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryCreateManyArgs
>;
type CategoryCreateManyResponse = Prisma.BatchPayload;

// Update Many
type CategoryUpdateManyProps<T extends Prisma.CategoryUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryUpdateManyArgs
>;
type CategoryUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type CategoryDeleteManyProps<T extends Prisma.CategoryDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryDeleteManyArgs
>;
type CategoryDeleteManyResponse = Prisma.BatchPayload;

// Find First
type CategoryFindFirstProps<T extends Prisma.CategoryFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryFindFirstArgs
>;
type CategoryFindFirstResponse<T extends Prisma.CategoryFindFirstArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type CategoryFindUniqueProps<T extends Prisma.CategoryFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryFindUniqueArgs
>;
type CategoryFindUniqueResponse<T extends Prisma.CategoryFindUniqueArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type CategoryFindManyProps<T extends Prisma.CategoryFindManyArgs> = Prisma.SelectSubset<T, Prisma.CategoryFindManyArgs>;
type CategoryFindManyResponse<T extends Prisma.CategoryFindManyArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type CategoryCountProps<T extends Prisma.CategoryCountArgs> = Prisma.SelectSubset<T, Prisma.CategoryCountArgs>;
type CategoryCountResponse<T extends Prisma.CategoryCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.CategoryCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Category Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const CategoryCreateAction = async <T extends Prisma.CategoryCreateArgs>(
    props: CategoryCreateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryCreateResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryCreateAction", "Category", "create");
    return await CategoryService.create(props);
};

/**
 * ## Category Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const CategoryUpsertAction = async <T extends Prisma.CategoryUpsertArgs>(
    props: CategoryUpsertProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryUpsertResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryUpsertAction", "Category", "upsert");
    return await CategoryService.upsert(props);
};

/**
 * ## Category Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const CategoryUpdateAction = async <T extends Prisma.CategoryUpdateArgs>(
    props: CategoryUpdateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryUpdateResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryUpdateAction", "Category", "update");
    return await CategoryService.update(props);
};

/**
 * ## Category Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const CategoryDeleteAction = async <T extends Prisma.CategoryDeleteArgs>(
    props: CategoryDeleteProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryDeleteResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryDeleteAction", "Category", "delete");
    return await CategoryService.delete(props);
};

/**
 * ## Category Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const CategoryCreateManyAction = async <T extends Prisma.CategoryCreateManyArgs>(
    props: CategoryCreateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryCreateManyResponse> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryCreateManyAction", "Category", "createMany");
    return await CategoryService.createMany(props);
};

/**
 * ## Category Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const CategoryUpdateManyAction = async <T extends Prisma.CategoryUpdateManyArgs>(
    props: CategoryUpdateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryUpdateManyResponse> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryUpdateManyAction", "Category", "updateMany");
    return await CategoryService.updateMany(props);
};

/**
 * ## Category Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const CategoryDeleteManyAction = async <T extends Prisma.CategoryDeleteManyArgs>(
    props: CategoryDeleteManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryDeleteManyResponse> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryDeleteManyAction", "Category", "deleteMany");
    return await CategoryService.deleteMany(props);
};

/**
 * ## Category Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const CategoryFindFirstAction = async <T extends Prisma.CategoryFindFirstArgs>(
    props: CategoryFindFirstProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryFindFirstResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryFindFirstAction", "Category", "findFirst");
    return await CategoryService.findFirst(props);
};

/**
 * ## Category Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const CategoryFindUniqueAction = async <T extends Prisma.CategoryFindUniqueArgs>(
    props: CategoryFindUniqueProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryFindUniqueResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryFindUniqueAction", "Category", "findUnique");
    return await CategoryService.findUnique(props);
};

/**
 * ## Category Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const CategoryFindManyAction = async <T extends Prisma.CategoryFindManyArgs>(
    props: CategoryFindManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryFindManyResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryFindManyAction", "Category", "findMany");
    return await CategoryService.findMany(props);
};

/**
 * ## Category Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const CategoryCountAction = async <T extends Prisma.CategoryCountArgs>(
    props: CategoryCountProps<T>,
    disableSafeMessage: boolean = false,
): Promise<CategoryCountResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "CategoryCountAction", "Category", "count");
    return await CategoryService.count(props);
};
