"use server";

import PrismaInstance from "@lib/prisma";
import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Session Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type SessionCreateProps<T extends Prisma.SessionCreateArgs> = Prisma.SelectSubset<T, Prisma.SessionCreateArgs>;
type SessionCreateResponse<T extends Prisma.SessionCreateArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type SessionUpsertProps<T extends Prisma.SessionUpsertArgs> = Prisma.SelectSubset<T, Prisma.SessionUpsertArgs>;
type SessionUpsertResponse<T extends Prisma.SessionUpsertArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type SessionUpdateProps<T extends Prisma.SessionUpdateArgs> = Prisma.SelectSubset<T, Prisma.SessionUpdateArgs>;
type SessionUpdateResponse<T extends Prisma.SessionUpdateArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type SessionDeleteProps<T extends Prisma.SessionDeleteArgs> = Prisma.SelectSubset<T, Prisma.SessionDeleteArgs>;
type SessionDeleteResponse<T extends Prisma.SessionDeleteArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type SessionCreateManyProps<T extends Prisma.SessionCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionCreateManyArgs
>;
type SessionCreateManyResponse = Prisma.BatchPayload;

// Update Many
type SessionUpdateManyProps<T extends Prisma.SessionUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionUpdateManyArgs
>;
type SessionUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type SessionDeleteManyProps<T extends Prisma.SessionDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionDeleteManyArgs
>;
type SessionDeleteManyResponse = Prisma.BatchPayload;

// Find First
type SessionFindFirstProps<T extends Prisma.SessionFindFirstArgs> = Prisma.SelectSubset<T, Prisma.SessionFindFirstArgs>;
type SessionFindFirstResponse<T extends Prisma.SessionFindFirstArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type SessionFindUniqueProps<T extends Prisma.SessionFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionFindUniqueArgs
>;
type SessionFindUniqueResponse<T extends Prisma.SessionFindUniqueArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type SessionFindManyProps<T extends Prisma.SessionFindManyArgs> = Prisma.SelectSubset<T, Prisma.SessionFindManyArgs>;
type SessionFindManyResponse<T extends Prisma.SessionFindManyArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type SessionCountProps<T extends Prisma.SessionCountArgs> = Prisma.SelectSubset<T, Prisma.SessionCountArgs>;
type SessionCountResponse<T extends Prisma.SessionCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.SessionCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Session Create (Server Action)
 */
export const SessionCreateAction = async <T extends Prisma.SessionCreateArgs>(
    props: SessionCreateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionCreateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionCreateAction", "Session", "create");
        const response = await PrismaInstance.session.create(props);
        return response;
    } catch (error) {
        throw new Error("SessionCreateAction -> " + (error as Error).message);
    }
};

/**
 * ## Session Upsert (Server Action)
 */
export const SessionUpsertAction = async <T extends Prisma.SessionUpsertArgs>(
    props: SessionUpsertProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionUpsertResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionUpsertAction", "Session", "upsert");
        const response = await PrismaInstance.session.upsert(props);
        return response;
    } catch (error) {
        throw new Error("SessionUpsertAction -> " + (error as Error).message);
    }
};

/**
 * ## Session Update (Server Action)
 */
export const SessionUpdateAction = async <T extends Prisma.SessionUpdateArgs>(
    props: SessionUpdateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionUpdateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionUpdateAction", "Session", "update");
        const response = await PrismaInstance.session.update(props);
        return response;
    } catch (error) {
        throw new Error("SessionUpdateAction -> " + (error as Error).message);
    }
};

/**
 * ## Session Delete (Server Action)
 */
export const SessionDeleteAction = async <T extends Prisma.SessionDeleteArgs>(
    props: SessionDeleteProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionDeleteResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionDeleteAction", "Session", "delete");
        const response = await PrismaInstance.session.delete(props);
        return response;
    } catch (error) {
        throw new Error("SessionDeleteAction -> " + (error as Error).message);
    }
};

/**
 * ## Session Create Many (Server Action)
 */
export const SessionCreateManyAction = async <T extends Prisma.SessionCreateManyArgs>(
    props: SessionCreateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionCreateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionCreateManyAction", "Session", "createMany");
        const response = await PrismaInstance.session.createMany(props);
        return response;
    } catch (error) {
        throw new Error("SessionCreateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Session Update Many (Server Action)
 */
export const SessionUpdateManyAction = async <T extends Prisma.SessionUpdateManyArgs>(
    props: SessionUpdateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionUpdateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionUpdateManyAction", "Session", "updateMany");
        const response = await PrismaInstance.session.updateMany(props);
        return response;
    } catch (error) {
        throw new Error("SessionUpdateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Session Delete Many (Server Action)
 */
export const SessionDeleteManyAction = async <T extends Prisma.SessionDeleteManyArgs>(
    props: SessionDeleteManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionDeleteManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionDeleteManyAction", "Session", "deleteMany");
        const response = await PrismaInstance.session.deleteMany(props);
        return response;
    } catch (error) {
        throw new Error("SessionDeleteManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Session Find First (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const SessionFindFirstAction = async <T extends Prisma.SessionFindFirstArgs>(
    props: SessionFindFirstProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionFindFirstResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionFindFirstAction", "Session", "findFirst");
        const response = await PrismaInstance.session.findFirst(props);
        return response;
    } catch (error) {
        throw new Error("SessionFindFirstAction -> " + (error as Error).message);
    }
};

/**
 * ## Session Find Unique (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const SessionFindUniqueAction = async <T extends Prisma.SessionFindUniqueArgs>(
    props: SessionFindUniqueProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionFindUniqueResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionFindUniqueAction", "Session", "findUnique");
        const response = await PrismaInstance.session.findUnique(props);
        return response;
    } catch (error) {
        throw new Error("SessionFindUniqueAction -> " + (error as Error).message);
    }
};

/**
 * ## Session Find Many (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const SessionFindManyAction = async <T extends Prisma.SessionFindManyArgs>(
    props: SessionFindManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionFindManyResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionFindManyAction", "Session", "findMany");
        const response = await PrismaInstance.session.findMany(props);
        return response;
    } catch (error) {
        throw new Error("SessionFindManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Session Count (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const SessionCountAction = async <T extends Prisma.SessionCountArgs>(
    props: SessionCountProps<T>,
    disableSafeMessage: boolean = false,
): Promise<SessionCountResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "SessionCountAction", "Session", "count");
        const response = await PrismaInstance.session.count(props);
        return response;
    } catch (error) {
        throw new Error("SessionCountAction -> " + (error as Error).message);
    }
};
