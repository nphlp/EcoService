"use server";

import PrismaInstance from "@lib/prisma";
import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Account Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type AccountCreateProps<T extends Prisma.AccountCreateArgs> = Prisma.SelectSubset<T, Prisma.AccountCreateArgs>;
type AccountCreateResponse<T extends Prisma.AccountCreateArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type AccountUpsertProps<T extends Prisma.AccountUpsertArgs> = Prisma.SelectSubset<T, Prisma.AccountUpsertArgs>;
type AccountUpsertResponse<T extends Prisma.AccountUpsertArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type AccountUpdateProps<T extends Prisma.AccountUpdateArgs> = Prisma.SelectSubset<T, Prisma.AccountUpdateArgs>;
type AccountUpdateResponse<T extends Prisma.AccountUpdateArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type AccountDeleteProps<T extends Prisma.AccountDeleteArgs> = Prisma.SelectSubset<T, Prisma.AccountDeleteArgs>;
type AccountDeleteResponse<T extends Prisma.AccountDeleteArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type AccountCreateManyProps<T extends Prisma.AccountCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountCreateManyArgs
>;
type AccountCreateManyResponse = Prisma.BatchPayload;

// Update Many
type AccountUpdateManyProps<T extends Prisma.AccountUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountUpdateManyArgs
>;
type AccountUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type AccountDeleteManyProps<T extends Prisma.AccountDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountDeleteManyArgs
>;
type AccountDeleteManyResponse = Prisma.BatchPayload;

// Find First
type AccountFindFirstProps<T extends Prisma.AccountFindFirstArgs> = Prisma.SelectSubset<T, Prisma.AccountFindFirstArgs>;
type AccountFindFirstResponse<T extends Prisma.AccountFindFirstArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type AccountFindUniqueProps<T extends Prisma.AccountFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountFindUniqueArgs
>;
type AccountFindUniqueResponse<T extends Prisma.AccountFindUniqueArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type AccountFindManyProps<T extends Prisma.AccountFindManyArgs> = Prisma.SelectSubset<T, Prisma.AccountFindManyArgs>;
type AccountFindManyResponse<T extends Prisma.AccountFindManyArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type AccountCountProps<T extends Prisma.AccountCountArgs> = Prisma.SelectSubset<T, Prisma.AccountCountArgs>;
type AccountCountResponse<T extends Prisma.AccountCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.AccountCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Account Create (Server Action)
 */
export const AccountCreateAction = async <T extends Prisma.AccountCreateArgs>(
    props: AccountCreateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountCreateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountCreateAction", "Account", "create");
        const response = await PrismaInstance.account.create(props);
        return response;
    } catch (error) {
        throw new Error("AccountCreateAction -> " + (error as Error).message);
    }
};

/**
 * ## Account Upsert (Server Action)
 */
export const AccountUpsertAction = async <T extends Prisma.AccountUpsertArgs>(
    props: AccountUpsertProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountUpsertResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountUpsertAction", "Account", "upsert");
        const response = await PrismaInstance.account.upsert(props);
        return response;
    } catch (error) {
        throw new Error("AccountUpsertAction -> " + (error as Error).message);
    }
};

/**
 * ## Account Update (Server Action)
 */
export const AccountUpdateAction = async <T extends Prisma.AccountUpdateArgs>(
    props: AccountUpdateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountUpdateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountUpdateAction", "Account", "update");
        const response = await PrismaInstance.account.update(props);
        return response;
    } catch (error) {
        throw new Error("AccountUpdateAction -> " + (error as Error).message);
    }
};

/**
 * ## Account Delete (Server Action)
 */
export const AccountDeleteAction = async <T extends Prisma.AccountDeleteArgs>(
    props: AccountDeleteProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountDeleteResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountDeleteAction", "Account", "delete");
        const response = await PrismaInstance.account.delete(props);
        return response;
    } catch (error) {
        throw new Error("AccountDeleteAction -> " + (error as Error).message);
    }
};

/**
 * ## Account Create Many (Server Action)
 */
export const AccountCreateManyAction = async <T extends Prisma.AccountCreateManyArgs>(
    props: AccountCreateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountCreateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountCreateManyAction", "Account", "createMany");
        const response = await PrismaInstance.account.createMany(props);
        return response;
    } catch (error) {
        throw new Error("AccountCreateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Account Update Many (Server Action)
 */
export const AccountUpdateManyAction = async <T extends Prisma.AccountUpdateManyArgs>(
    props: AccountUpdateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountUpdateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountUpdateManyAction", "Account", "updateMany");
        const response = await PrismaInstance.account.updateMany(props);
        return response;
    } catch (error) {
        throw new Error("AccountUpdateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Account Delete Many (Server Action)
 */
export const AccountDeleteManyAction = async <T extends Prisma.AccountDeleteManyArgs>(
    props: AccountDeleteManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountDeleteManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountDeleteManyAction", "Account", "deleteMany");
        const response = await PrismaInstance.account.deleteMany(props);
        return response;
    } catch (error) {
        throw new Error("AccountDeleteManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Account Find First (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const AccountFindFirstAction = async <T extends Prisma.AccountFindFirstArgs>(
    props: AccountFindFirstProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountFindFirstResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountFindFirstAction", "Account", "findFirst");
        const response = await PrismaInstance.account.findFirst(props);
        return response;
    } catch (error) {
        throw new Error("AccountFindFirstAction -> " + (error as Error).message);
    }
};

/**
 * ## Account Find Unique (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const AccountFindUniqueAction = async <T extends Prisma.AccountFindUniqueArgs>(
    props: AccountFindUniqueProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountFindUniqueResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountFindUniqueAction", "Account", "findUnique");
        const response = await PrismaInstance.account.findUnique(props);
        return response;
    } catch (error) {
        throw new Error("AccountFindUniqueAction -> " + (error as Error).message);
    }
};

/**
 * ## Account Find Many (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const AccountFindManyAction = async <T extends Prisma.AccountFindManyArgs>(
    props: AccountFindManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountFindManyResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountFindManyAction", "Account", "findMany");
        const response = await PrismaInstance.account.findMany(props);
        return response;
    } catch (error) {
        throw new Error("AccountFindManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Account Count (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const AccountCountAction = async <T extends Prisma.AccountCountArgs>(
    props: AccountCountProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AccountCountResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AccountCountAction", "Account", "count");
        const response = await PrismaInstance.account.count(props);
        return response;
    } catch (error) {
        throw new Error("AccountCountAction -> " + (error as Error).message);
    }
};
