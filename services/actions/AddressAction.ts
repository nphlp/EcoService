"use server";

import PrismaInstance from "@lib/prisma";
import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Address Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type AddressCreateProps<T extends Prisma.AddressCreateArgs> = Prisma.SelectSubset<T, Prisma.AddressCreateArgs>;
type AddressCreateResponse<T extends Prisma.AddressCreateArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type AddressUpsertProps<T extends Prisma.AddressUpsertArgs> = Prisma.SelectSubset<T, Prisma.AddressUpsertArgs>;
type AddressUpsertResponse<T extends Prisma.AddressUpsertArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type AddressUpdateProps<T extends Prisma.AddressUpdateArgs> = Prisma.SelectSubset<T, Prisma.AddressUpdateArgs>;
type AddressUpdateResponse<T extends Prisma.AddressUpdateArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type AddressDeleteProps<T extends Prisma.AddressDeleteArgs> = Prisma.SelectSubset<T, Prisma.AddressDeleteArgs>;
type AddressDeleteResponse<T extends Prisma.AddressDeleteArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type AddressCreateManyProps<T extends Prisma.AddressCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressCreateManyArgs
>;
type AddressCreateManyResponse = Prisma.BatchPayload;

// Update Many
type AddressUpdateManyProps<T extends Prisma.AddressUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressUpdateManyArgs
>;
type AddressUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type AddressDeleteManyProps<T extends Prisma.AddressDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressDeleteManyArgs
>;
type AddressDeleteManyResponse = Prisma.BatchPayload;

// Find First
type AddressFindFirstProps<T extends Prisma.AddressFindFirstArgs> = Prisma.SelectSubset<T, Prisma.AddressFindFirstArgs>;
type AddressFindFirstResponse<T extends Prisma.AddressFindFirstArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type AddressFindUniqueProps<T extends Prisma.AddressFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressFindUniqueArgs
>;
type AddressFindUniqueResponse<T extends Prisma.AddressFindUniqueArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type AddressFindManyProps<T extends Prisma.AddressFindManyArgs> = Prisma.SelectSubset<T, Prisma.AddressFindManyArgs>;
type AddressFindManyResponse<T extends Prisma.AddressFindManyArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type AddressCountProps<T extends Prisma.AddressCountArgs> = Prisma.SelectSubset<T, Prisma.AddressCountArgs>;
type AddressCountResponse<T extends Prisma.AddressCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.AddressCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Address Create (Server Action)
 */
export const AddressCreateAction = async <T extends Prisma.AddressCreateArgs>(
    props: AddressCreateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressCreateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressCreateAction", "Address", "create");
        const response = await PrismaInstance.address.create(props);
        return response;
    } catch (error) {
        throw new Error("AddressCreateAction -> " + (error as Error).message);
    }
};

/**
 * ## Address Upsert (Server Action)
 */
export const AddressUpsertAction = async <T extends Prisma.AddressUpsertArgs>(
    props: AddressUpsertProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressUpsertResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressUpsertAction", "Address", "upsert");
        const response = await PrismaInstance.address.upsert(props);
        return response;
    } catch (error) {
        throw new Error("AddressUpsertAction -> " + (error as Error).message);
    }
};

/**
 * ## Address Update (Server Action)
 */
export const AddressUpdateAction = async <T extends Prisma.AddressUpdateArgs>(
    props: AddressUpdateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressUpdateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressUpdateAction", "Address", "update");
        const response = await PrismaInstance.address.update(props);
        return response;
    } catch (error) {
        throw new Error("AddressUpdateAction -> " + (error as Error).message);
    }
};

/**
 * ## Address Delete (Server Action)
 */
export const AddressDeleteAction = async <T extends Prisma.AddressDeleteArgs>(
    props: AddressDeleteProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressDeleteResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressDeleteAction", "Address", "delete");
        const response = await PrismaInstance.address.delete(props);
        return response;
    } catch (error) {
        throw new Error("AddressDeleteAction -> " + (error as Error).message);
    }
};

/**
 * ## Address Create Many (Server Action)
 */
export const AddressCreateManyAction = async <T extends Prisma.AddressCreateManyArgs>(
    props: AddressCreateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressCreateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressCreateManyAction", "Address", "createMany");
        const response = await PrismaInstance.address.createMany(props);
        return response;
    } catch (error) {
        throw new Error("AddressCreateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Address Update Many (Server Action)
 */
export const AddressUpdateManyAction = async <T extends Prisma.AddressUpdateManyArgs>(
    props: AddressUpdateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressUpdateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressUpdateManyAction", "Address", "updateMany");
        const response = await PrismaInstance.address.updateMany(props);
        return response;
    } catch (error) {
        throw new Error("AddressUpdateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Address Delete Many (Server Action)
 */
export const AddressDeleteManyAction = async <T extends Prisma.AddressDeleteManyArgs>(
    props: AddressDeleteManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressDeleteManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressDeleteManyAction", "Address", "deleteMany");
        const response = await PrismaInstance.address.deleteMany(props);
        return response;
    } catch (error) {
        throw new Error("AddressDeleteManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Address Find First (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const AddressFindFirstAction = async <T extends Prisma.AddressFindFirstArgs>(
    props: AddressFindFirstProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressFindFirstResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressFindFirstAction", "Address", "findFirst");
        const response = await PrismaInstance.address.findFirst(props);
        return response;
    } catch (error) {
        throw new Error("AddressFindFirstAction -> " + (error as Error).message);
    }
};

/**
 * ## Address Find Unique (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const AddressFindUniqueAction = async <T extends Prisma.AddressFindUniqueArgs>(
    props: AddressFindUniqueProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressFindUniqueResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressFindUniqueAction", "Address", "findUnique");
        const response = await PrismaInstance.address.findUnique(props);
        return response;
    } catch (error) {
        throw new Error("AddressFindUniqueAction -> " + (error as Error).message);
    }
};

/**
 * ## Address Find Many (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const AddressFindManyAction = async <T extends Prisma.AddressFindManyArgs>(
    props: AddressFindManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressFindManyResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressFindManyAction", "Address", "findMany");
        const response = await PrismaInstance.address.findMany(props);
        return response;
    } catch (error) {
        throw new Error("AddressFindManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Address Count (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const AddressCountAction = async <T extends Prisma.AddressCountArgs>(
    props: AddressCountProps<T>,
    disableSafeMessage: boolean = false,
): Promise<AddressCountResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "AddressCountAction", "Address", "count");
        const response = await PrismaInstance.address.count(props);
        return response;
    } catch (error) {
        throw new Error("AddressCountAction -> " + (error as Error).message);
    }
};
