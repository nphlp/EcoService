"use server";

import ProductService from "@class/ProductClass";
import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Product Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type ProductCreateProps<T extends Prisma.ProductCreateArgs> = Prisma.SelectSubset<T, Prisma.ProductCreateArgs>;
type ProductCreateResponse<T extends Prisma.ProductCreateArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type ProductUpsertProps<T extends Prisma.ProductUpsertArgs> = Prisma.SelectSubset<T, Prisma.ProductUpsertArgs>;
type ProductUpsertResponse<T extends Prisma.ProductUpsertArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type ProductUpdateProps<T extends Prisma.ProductUpdateArgs> = Prisma.SelectSubset<T, Prisma.ProductUpdateArgs>;
type ProductUpdateResponse<T extends Prisma.ProductUpdateArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type ProductDeleteProps<T extends Prisma.ProductDeleteArgs> = Prisma.SelectSubset<T, Prisma.ProductDeleteArgs>;
type ProductDeleteResponse<T extends Prisma.ProductDeleteArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type ProductCreateManyProps<T extends Prisma.ProductCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductCreateManyArgs
>;
type ProductCreateManyResponse = Prisma.BatchPayload;

// Update Many
type ProductUpdateManyProps<T extends Prisma.ProductUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductUpdateManyArgs
>;
type ProductUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type ProductDeleteManyProps<T extends Prisma.ProductDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductDeleteManyArgs
>;
type ProductDeleteManyResponse = Prisma.BatchPayload;

// Find First
type ProductFindFirstProps<T extends Prisma.ProductFindFirstArgs> = Prisma.SelectSubset<T, Prisma.ProductFindFirstArgs>;
type ProductFindFirstResponse<T extends Prisma.ProductFindFirstArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type ProductFindUniqueProps<T extends Prisma.ProductFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductFindUniqueArgs
>;
type ProductFindUniqueResponse<T extends Prisma.ProductFindUniqueArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type ProductFindManyProps<T extends Prisma.ProductFindManyArgs> = Prisma.SelectSubset<T, Prisma.ProductFindManyArgs>;
type ProductFindManyResponse<T extends Prisma.ProductFindManyArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type ProductCountProps<T extends Prisma.ProductCountArgs> = Prisma.SelectSubset<T, Prisma.ProductCountArgs>;
type ProductCountResponse<T extends Prisma.ProductCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ProductCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Product Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ProductCreateAction = async <T extends Prisma.ProductCreateArgs>(
    props: ProductCreateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductCreateResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ProductCreateAction", "Product", "create");
    return await ProductService.create(props);
};

/**
 * ## Product Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ProductUpsertAction = async <T extends Prisma.ProductUpsertArgs>(
    props: ProductUpsertProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductUpsertResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ProductUpsertAction", "Product", "upsert");
    return await ProductService.upsert(props);
};

/**
 * ## Product Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ProductUpdateAction = async <T extends Prisma.ProductUpdateArgs>(
    props: ProductUpdateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductUpdateResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ProductUpdateAction", "Product", "update");
    return await ProductService.update(props);
};

/**
 * ## Product Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ProductDeleteAction = async <T extends Prisma.ProductDeleteArgs>(
    props: ProductDeleteProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductDeleteResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ProductDeleteAction", "Product", "delete");
    return await ProductService.delete(props);
};

/**
 * ## Product Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ProductCreateManyAction = async <T extends Prisma.ProductCreateManyArgs>(
    props: ProductCreateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductCreateManyResponse> => {
    await requiresSafeMessage(disableSafeMessage, "ProductCreateManyAction", "Product", "createMany");
    return await ProductService.createMany(props);
};

/**
 * ## Product Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ProductUpdateManyAction = async <T extends Prisma.ProductUpdateManyArgs>(
    props: ProductUpdateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductUpdateManyResponse> => {
    await requiresSafeMessage(disableSafeMessage, "ProductUpdateManyAction", "Product", "updateMany");
    return await ProductService.updateMany(props);
};

/**
 * ## Product Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const ProductDeleteManyAction = async <T extends Prisma.ProductDeleteManyArgs>(
    props: ProductDeleteManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductDeleteManyResponse> => {
    await requiresSafeMessage(disableSafeMessage, "ProductDeleteManyAction", "Product", "deleteMany");
    return await ProductService.deleteMany(props);
};

/**
 * ## Product Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ProductFindFirstAction = async <T extends Prisma.ProductFindFirstArgs>(
    props: ProductFindFirstProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductFindFirstResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ProductFindFirstAction", "Product", "findFirst");
    return await ProductService.findFirst(props);
};

/**
 * ## Product Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ProductFindUniqueAction = async <T extends Prisma.ProductFindUniqueArgs>(
    props: ProductFindUniqueProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductFindUniqueResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ProductFindUniqueAction", "Product", "findUnique");
    return await ProductService.findUnique(props);
};

/**
 * ## Product Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ProductFindManyAction = async <T extends Prisma.ProductFindManyArgs>(
    props: ProductFindManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductFindManyResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ProductFindManyAction", "Product", "findMany");
    return await ProductService.findMany(props);
};

/**
 * ## Product Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const ProductCountAction = async <T extends Prisma.ProductCountArgs>(
    props: ProductCountProps<T>,
    disableSafeMessage: boolean = false,
): Promise<ProductCountResponse<T>> => {
    await requiresSafeMessage(disableSafeMessage, "ProductCountAction", "Product", "count");
    return await ProductService.count(props);
};
