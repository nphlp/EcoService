"use server";

import PrismaInstance from "@lib/prisma";
import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Verification Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type VerificationCreateProps<T extends Prisma.VerificationCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationCreateArgs
>;
type VerificationCreateResponse<T extends Prisma.VerificationCreateArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type VerificationUpsertProps<T extends Prisma.VerificationUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationUpsertArgs
>;
type VerificationUpsertResponse<T extends Prisma.VerificationUpsertArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type VerificationUpdateProps<T extends Prisma.VerificationUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationUpdateArgs
>;
type VerificationUpdateResponse<T extends Prisma.VerificationUpdateArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type VerificationDeleteProps<T extends Prisma.VerificationDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationDeleteArgs
>;
type VerificationDeleteResponse<T extends Prisma.VerificationDeleteArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type VerificationCreateManyProps<T extends Prisma.VerificationCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationCreateManyArgs
>;
type VerificationCreateManyResponse = Prisma.BatchPayload;

// Update Many
type VerificationUpdateManyProps<T extends Prisma.VerificationUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationUpdateManyArgs
>;
type VerificationUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type VerificationDeleteManyProps<T extends Prisma.VerificationDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationDeleteManyArgs
>;
type VerificationDeleteManyResponse = Prisma.BatchPayload;

// Find First
type VerificationFindFirstProps<T extends Prisma.VerificationFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationFindFirstArgs
>;
type VerificationFindFirstResponse<T extends Prisma.VerificationFindFirstArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type VerificationFindUniqueProps<T extends Prisma.VerificationFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationFindUniqueArgs
>;
type VerificationFindUniqueResponse<T extends Prisma.VerificationFindUniqueArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type VerificationFindManyProps<T extends Prisma.VerificationFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationFindManyArgs
>;
type VerificationFindManyResponse<T extends Prisma.VerificationFindManyArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type VerificationCountProps<T extends Prisma.VerificationCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationCountArgs
>;
type VerificationCountResponse<T extends Prisma.VerificationCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.VerificationCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Verification Create (Server Action)
 */
export const VerificationCreateAction = async <T extends Prisma.VerificationCreateArgs>(
    props: VerificationCreateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationCreateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationCreateAction", "Verification", "create");
        const response = await PrismaInstance.verification.create(props);
        return response;
    } catch (error) {
        throw new Error("VerificationCreateAction -> " + (error as Error).message);
    }
};

/**
 * ## Verification Upsert (Server Action)
 */
export const VerificationUpsertAction = async <T extends Prisma.VerificationUpsertArgs>(
    props: VerificationUpsertProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationUpsertResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationUpsertAction", "Verification", "upsert");
        const response = await PrismaInstance.verification.upsert(props);
        return response;
    } catch (error) {
        throw new Error("VerificationUpsertAction -> " + (error as Error).message);
    }
};

/**
 * ## Verification Update (Server Action)
 */
export const VerificationUpdateAction = async <T extends Prisma.VerificationUpdateArgs>(
    props: VerificationUpdateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationUpdateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationUpdateAction", "Verification", "update");
        const response = await PrismaInstance.verification.update(props);
        return response;
    } catch (error) {
        throw new Error("VerificationUpdateAction -> " + (error as Error).message);
    }
};

/**
 * ## Verification Delete (Server Action)
 */
export const VerificationDeleteAction = async <T extends Prisma.VerificationDeleteArgs>(
    props: VerificationDeleteProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationDeleteResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationDeleteAction", "Verification", "delete");
        const response = await PrismaInstance.verification.delete(props);
        return response;
    } catch (error) {
        throw new Error("VerificationDeleteAction -> " + (error as Error).message);
    }
};

/**
 * ## Verification Create Many (Server Action)
 */
export const VerificationCreateManyAction = async <T extends Prisma.VerificationCreateManyArgs>(
    props: VerificationCreateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationCreateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationCreateManyAction", "Verification", "createMany");
        const response = await PrismaInstance.verification.createMany(props);
        return response;
    } catch (error) {
        throw new Error("VerificationCreateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Verification Update Many (Server Action)
 */
export const VerificationUpdateManyAction = async <T extends Prisma.VerificationUpdateManyArgs>(
    props: VerificationUpdateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationUpdateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationUpdateManyAction", "Verification", "updateMany");
        const response = await PrismaInstance.verification.updateMany(props);
        return response;
    } catch (error) {
        throw new Error("VerificationUpdateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Verification Delete Many (Server Action)
 */
export const VerificationDeleteManyAction = async <T extends Prisma.VerificationDeleteManyArgs>(
    props: VerificationDeleteManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationDeleteManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationDeleteManyAction", "Verification", "deleteMany");
        const response = await PrismaInstance.verification.deleteMany(props);
        return response;
    } catch (error) {
        throw new Error("VerificationDeleteManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Verification Find First (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const VerificationFindFirstAction = async <T extends Prisma.VerificationFindFirstArgs>(
    props: VerificationFindFirstProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationFindFirstResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationFindFirstAction", "Verification", "findFirst");
        const response = await PrismaInstance.verification.findFirst(props);
        return response;
    } catch (error) {
        throw new Error("VerificationFindFirstAction -> " + (error as Error).message);
    }
};

/**
 * ## Verification Find Unique (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const VerificationFindUniqueAction = async <T extends Prisma.VerificationFindUniqueArgs>(
    props: VerificationFindUniqueProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationFindUniqueResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationFindUniqueAction", "Verification", "findUnique");
        const response = await PrismaInstance.verification.findUnique(props);
        return response;
    } catch (error) {
        throw new Error("VerificationFindUniqueAction -> " + (error as Error).message);
    }
};

/**
 * ## Verification Find Many (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const VerificationFindManyAction = async <T extends Prisma.VerificationFindManyArgs>(
    props: VerificationFindManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationFindManyResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationFindManyAction", "Verification", "findMany");
        const response = await PrismaInstance.verification.findMany(props);
        return response;
    } catch (error) {
        throw new Error("VerificationFindManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Verification Count (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const VerificationCountAction = async <T extends Prisma.VerificationCountArgs>(
    props: VerificationCountProps<T>,
    disableSafeMessage: boolean = false,
): Promise<VerificationCountResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "VerificationCountAction", "Verification", "count");
        const response = await PrismaInstance.verification.count(props);
        return response;
    } catch (error) {
        throw new Error("VerificationCountAction -> " + (error as Error).message);
    }
};
