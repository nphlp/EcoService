"use server";

import PrismaInstance from "@lib/prisma";
import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Fruit Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type FruitCreateProps<T extends Prisma.FruitCreateArgs> = Prisma.SelectSubset<T, Prisma.FruitCreateArgs>;
type FruitCreateResponse<T extends Prisma.FruitCreateArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type FruitUpsertProps<T extends Prisma.FruitUpsertArgs> = Prisma.SelectSubset<T, Prisma.FruitUpsertArgs>;
type FruitUpsertResponse<T extends Prisma.FruitUpsertArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type FruitUpdateProps<T extends Prisma.FruitUpdateArgs> = Prisma.SelectSubset<T, Prisma.FruitUpdateArgs>;
type FruitUpdateResponse<T extends Prisma.FruitUpdateArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type FruitDeleteProps<T extends Prisma.FruitDeleteArgs> = Prisma.SelectSubset<T, Prisma.FruitDeleteArgs>;
type FruitDeleteResponse<T extends Prisma.FruitDeleteArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type FruitCreateManyProps<T extends Prisma.FruitCreateManyArgs> = Prisma.SelectSubset<T, Prisma.FruitCreateManyArgs>;
type FruitCreateManyResponse = Prisma.BatchPayload;

// Update Many
type FruitUpdateManyProps<T extends Prisma.FruitUpdateManyArgs> = Prisma.SelectSubset<T, Prisma.FruitUpdateManyArgs>;
type FruitUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type FruitDeleteManyProps<T extends Prisma.FruitDeleteManyArgs> = Prisma.SelectSubset<T, Prisma.FruitDeleteManyArgs>;
type FruitDeleteManyResponse = Prisma.BatchPayload;

// Find First
type FruitFindFirstProps<T extends Prisma.FruitFindFirstArgs> = Prisma.SelectSubset<T, Prisma.FruitFindFirstArgs>;
type FruitFindFirstResponse<T extends Prisma.FruitFindFirstArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type FruitFindUniqueProps<T extends Prisma.FruitFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.FruitFindUniqueArgs>;
type FruitFindUniqueResponse<T extends Prisma.FruitFindUniqueArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type FruitFindManyProps<T extends Prisma.FruitFindManyArgs> = Prisma.SelectSubset<T, Prisma.FruitFindManyArgs>;
type FruitFindManyResponse<T extends Prisma.FruitFindManyArgs> = GetResult<
    Prisma.$FruitPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type FruitCountProps<T extends Prisma.FruitCountArgs> = Prisma.SelectSubset<T, Prisma.FruitCountArgs>;
type FruitCountResponse<T extends Prisma.FruitCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.FruitCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Fruit Create (Server Action)
 */
export const FruitCreateAction = async <T extends Prisma.FruitCreateArgs>(
    props: FruitCreateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitCreateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitCreateAction", "Fruit", "create");
        const response = await PrismaInstance.fruit.create(props);
        return response;
    } catch (error) {
        throw new Error("FruitCreateAction -> " + (error as Error).message);
    }
};

/**
 * ## Fruit Upsert (Server Action)
 */
export const FruitUpsertAction = async <T extends Prisma.FruitUpsertArgs>(
    props: FruitUpsertProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitUpsertResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitUpsertAction", "Fruit", "upsert");
        const response = await PrismaInstance.fruit.upsert(props);
        return response;
    } catch (error) {
        throw new Error("FruitUpsertAction -> " + (error as Error).message);
    }
};

/**
 * ## Fruit Update (Server Action)
 */
export const FruitUpdateAction = async <T extends Prisma.FruitUpdateArgs>(
    props: FruitUpdateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitUpdateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitUpdateAction", "Fruit", "update");
        const response = await PrismaInstance.fruit.update(props);
        return response;
    } catch (error) {
        throw new Error("FruitUpdateAction -> " + (error as Error).message);
    }
};

/**
 * ## Fruit Delete (Server Action)
 */
export const FruitDeleteAction = async <T extends Prisma.FruitDeleteArgs>(
    props: FruitDeleteProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitDeleteResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitDeleteAction", "Fruit", "delete");
        const response = await PrismaInstance.fruit.delete(props);
        return response;
    } catch (error) {
        throw new Error("FruitDeleteAction -> " + (error as Error).message);
    }
};

/**
 * ## Fruit Create Many (Server Action)
 */
export const FruitCreateManyAction = async <T extends Prisma.FruitCreateManyArgs>(
    props: FruitCreateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitCreateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitCreateManyAction", "Fruit", "createMany");
        const response = await PrismaInstance.fruit.createMany(props);
        return response;
    } catch (error) {
        throw new Error("FruitCreateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Fruit Update Many (Server Action)
 */
export const FruitUpdateManyAction = async <T extends Prisma.FruitUpdateManyArgs>(
    props: FruitUpdateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitUpdateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitUpdateManyAction", "Fruit", "updateMany");
        const response = await PrismaInstance.fruit.updateMany(props);
        return response;
    } catch (error) {
        throw new Error("FruitUpdateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Fruit Delete Many (Server Action)
 */
export const FruitDeleteManyAction = async <T extends Prisma.FruitDeleteManyArgs>(
    props: FruitDeleteManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitDeleteManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitDeleteManyAction", "Fruit", "deleteMany");
        const response = await PrismaInstance.fruit.deleteMany(props);
        return response;
    } catch (error) {
        throw new Error("FruitDeleteManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Fruit Find First (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const FruitFindFirstAction = async <T extends Prisma.FruitFindFirstArgs>(
    props: FruitFindFirstProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitFindFirstResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitFindFirstAction", "Fruit", "findFirst");
        const response = await PrismaInstance.fruit.findFirst(props);
        return response;
    } catch (error) {
        throw new Error("FruitFindFirstAction -> " + (error as Error).message);
    }
};

/**
 * ## Fruit Find Unique (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const FruitFindUniqueAction = async <T extends Prisma.FruitFindUniqueArgs>(
    props: FruitFindUniqueProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitFindUniqueResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitFindUniqueAction", "Fruit", "findUnique");
        const response = await PrismaInstance.fruit.findUnique(props);
        return response;
    } catch (error) {
        throw new Error("FruitFindUniqueAction -> " + (error as Error).message);
    }
};

/**
 * ## Fruit Find Many (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const FruitFindManyAction = async <T extends Prisma.FruitFindManyArgs>(
    props: FruitFindManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitFindManyResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitFindManyAction", "Fruit", "findMany");
        const response = await PrismaInstance.fruit.findMany(props);
        return response;
    } catch (error) {
        throw new Error("FruitFindManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Fruit Count (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const FruitCountAction = async <T extends Prisma.FruitCountArgs>(
    props: FruitCountProps<T>,
    disableSafeMessage: boolean = false,
): Promise<FruitCountResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "FruitCountAction", "Fruit", "count");
        const response = await PrismaInstance.fruit.count(props);
        return response;
    } catch (error) {
        throw new Error("FruitCountAction -> " + (error as Error).message);
    }
};
