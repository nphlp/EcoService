"use server";

import PrismaInstance from "@lib/prisma";
import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # Diy Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type DiyCreateProps<T extends Prisma.DiyCreateArgs> = Prisma.SelectSubset<T, Prisma.DiyCreateArgs>;
type DiyCreateResponse<T extends Prisma.DiyCreateArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type DiyUpsertProps<T extends Prisma.DiyUpsertArgs> = Prisma.SelectSubset<T, Prisma.DiyUpsertArgs>;
type DiyUpsertResponse<T extends Prisma.DiyUpsertArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type DiyUpdateProps<T extends Prisma.DiyUpdateArgs> = Prisma.SelectSubset<T, Prisma.DiyUpdateArgs>;
type DiyUpdateResponse<T extends Prisma.DiyUpdateArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type DiyDeleteProps<T extends Prisma.DiyDeleteArgs> = Prisma.SelectSubset<T, Prisma.DiyDeleteArgs>;
type DiyDeleteResponse<T extends Prisma.DiyDeleteArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type DiyCreateManyProps<T extends Prisma.DiyCreateManyArgs> = Prisma.SelectSubset<T, Prisma.DiyCreateManyArgs>;
type DiyCreateManyResponse = Prisma.BatchPayload;

// Update Many
type DiyUpdateManyProps<T extends Prisma.DiyUpdateManyArgs> = Prisma.SelectSubset<T, Prisma.DiyUpdateManyArgs>;
type DiyUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type DiyDeleteManyProps<T extends Prisma.DiyDeleteManyArgs> = Prisma.SelectSubset<T, Prisma.DiyDeleteManyArgs>;
type DiyDeleteManyResponse = Prisma.BatchPayload;

// Find First
type DiyFindFirstProps<T extends Prisma.DiyFindFirstArgs> = Prisma.SelectSubset<T, Prisma.DiyFindFirstArgs>;
type DiyFindFirstResponse<T extends Prisma.DiyFindFirstArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type DiyFindUniqueProps<T extends Prisma.DiyFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.DiyFindUniqueArgs>;
type DiyFindUniqueResponse<T extends Prisma.DiyFindUniqueArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type DiyFindManyProps<T extends Prisma.DiyFindManyArgs> = Prisma.SelectSubset<T, Prisma.DiyFindManyArgs>;
type DiyFindManyResponse<T extends Prisma.DiyFindManyArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type DiyCountProps<T extends Prisma.DiyCountArgs> = Prisma.SelectSubset<T, Prisma.DiyCountArgs>;
type DiyCountResponse<T extends Prisma.DiyCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.DiyCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Diy Create (Server Action)
 */
export const DiyCreateAction = async <T extends Prisma.DiyCreateArgs>(
    props: DiyCreateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyCreateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyCreateAction", "Diy", "create");
        const response = await PrismaInstance.diy.create(props);
        return response;
    } catch (error) {
        throw new Error("DiyCreateAction -> " + (error as Error).message);
    }
};

/**
 * ## Diy Upsert (Server Action)
 */
export const DiyUpsertAction = async <T extends Prisma.DiyUpsertArgs>(
    props: DiyUpsertProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyUpsertResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyUpsertAction", "Diy", "upsert");
        const response = await PrismaInstance.diy.upsert(props);
        return response;
    } catch (error) {
        throw new Error("DiyUpsertAction -> " + (error as Error).message);
    }
};

/**
 * ## Diy Update (Server Action)
 */
export const DiyUpdateAction = async <T extends Prisma.DiyUpdateArgs>(
    props: DiyUpdateProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyUpdateResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyUpdateAction", "Diy", "update");
        const response = await PrismaInstance.diy.update(props);
        return response;
    } catch (error) {
        throw new Error("DiyUpdateAction -> " + (error as Error).message);
    }
};

/**
 * ## Diy Delete (Server Action)
 */
export const DiyDeleteAction = async <T extends Prisma.DiyDeleteArgs>(
    props: DiyDeleteProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyDeleteResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyDeleteAction", "Diy", "delete");
        const response = await PrismaInstance.diy.delete(props);
        return response;
    } catch (error) {
        throw new Error("DiyDeleteAction -> " + (error as Error).message);
    }
};

/**
 * ## Diy Create Many (Server Action)
 */
export const DiyCreateManyAction = async <T extends Prisma.DiyCreateManyArgs>(
    props: DiyCreateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyCreateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyCreateManyAction", "Diy", "createMany");
        const response = await PrismaInstance.diy.createMany(props);
        return response;
    } catch (error) {
        throw new Error("DiyCreateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Diy Update Many (Server Action)
 */
export const DiyUpdateManyAction = async <T extends Prisma.DiyUpdateManyArgs>(
    props: DiyUpdateManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyUpdateManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyUpdateManyAction", "Diy", "updateMany");
        const response = await PrismaInstance.diy.updateMany(props);
        return response;
    } catch (error) {
        throw new Error("DiyUpdateManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Diy Delete Many (Server Action)
 */
export const DiyDeleteManyAction = async <T extends Prisma.DiyDeleteManyArgs>(
    props: DiyDeleteManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyDeleteManyResponse> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyDeleteManyAction", "Diy", "deleteMany");
        const response = await PrismaInstance.diy.deleteMany(props);
        return response;
    } catch (error) {
        throw new Error("DiyDeleteManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Diy Find First (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const DiyFindFirstAction = async <T extends Prisma.DiyFindFirstArgs>(
    props: DiyFindFirstProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyFindFirstResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyFindFirstAction", "Diy", "findFirst");
        const response = await PrismaInstance.diy.findFirst(props);
        return response;
    } catch (error) {
        throw new Error("DiyFindFirstAction -> " + (error as Error).message);
    }
};

/**
 * ## Diy Find Unique (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const DiyFindUniqueAction = async <T extends Prisma.DiyFindUniqueArgs>(
    props: DiyFindUniqueProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyFindUniqueResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyFindUniqueAction", "Diy", "findUnique");
        const response = await PrismaInstance.diy.findUnique(props);
        return response;
    } catch (error) {
        throw new Error("DiyFindUniqueAction -> " + (error as Error).message);
    }
};

/**
 * ## Diy Find Many (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const DiyFindManyAction = async <T extends Prisma.DiyFindManyArgs>(
    props: DiyFindManyProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyFindManyResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyFindManyAction", "Diy", "findMany");
        const response = await PrismaInstance.diy.findMany(props);
        return response;
    } catch (error) {
        throw new Error("DiyFindManyAction -> " + (error as Error).message);
    }
};

/**
 * ## Diy Count (Server Action)
 * **WARNING**: Server actions can't be cached and parallelized
 * - Do not use this for fetching data, use API routes with caching instead
 * - But you can use it to get fresh data, without any cache
 */
export const DiyCountAction = async <T extends Prisma.DiyCountArgs>(
    props: DiyCountProps<T>,
    disableSafeMessage: boolean = false,
): Promise<DiyCountResponse<T>> => {
    try {
        await requiresSafeMessage(disableSafeMessage, "DiyCountAction", "Diy", "count");
        const response = await PrismaInstance.diy.count(props);
        return response;
    } catch (error) {
        throw new Error("DiyCountAction -> " + (error as Error).message);
    }
};
