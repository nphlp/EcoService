import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # Product Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type ProductCreateProps<T extends Prisma.ProductCreateArgs> = Prisma.SelectSubset<T, Prisma.ProductCreateArgs>;
type ProductCreateResponse<T extends Prisma.ProductCreateArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type ProductUpsertProps<T extends Prisma.ProductUpsertArgs> = Prisma.SelectSubset<T, Prisma.ProductUpsertArgs>;
type ProductUpsertResponse<T extends Prisma.ProductUpsertArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type ProductUpdateProps<T extends Prisma.ProductUpdateArgs> = Prisma.SelectSubset<T, Prisma.ProductUpdateArgs>;
type ProductUpdateResponse<T extends Prisma.ProductUpdateArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type ProductDeleteProps<T extends Prisma.ProductDeleteArgs> = Prisma.SelectSubset<T, Prisma.ProductDeleteArgs>;
type ProductDeleteResponse<T extends Prisma.ProductDeleteArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type ProductCreateManyProps<T extends Prisma.ProductCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductCreateManyArgs
>;
type ProductCreateManyResponse = Prisma.BatchPayload;

// Update Many
type ProductUpdateManyProps<T extends Prisma.ProductUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductUpdateManyArgs
>;
type ProductUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type ProductDeleteManyProps<T extends Prisma.ProductDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductDeleteManyArgs
>;
type ProductDeleteManyResponse = Prisma.BatchPayload;

// Find First
type ProductFindFirstProps<T extends Prisma.ProductFindFirstArgs> = Prisma.SelectSubset<T, Prisma.ProductFindFirstArgs>;
type ProductFindFirstResponse<T extends Prisma.ProductFindFirstArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type ProductFindUniqueProps<T extends Prisma.ProductFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductFindUniqueArgs
>;
type ProductFindUniqueResponse<T extends Prisma.ProductFindUniqueArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type ProductFindManyProps<T extends Prisma.ProductFindManyArgs> = Prisma.SelectSubset<T, Prisma.ProductFindManyArgs>;
type ProductFindManyResponse<T extends Prisma.ProductFindManyArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type ProductCountProps<T extends Prisma.ProductCountArgs> = Prisma.SelectSubset<T, Prisma.ProductCountArgs>;
type ProductCountResponse<T extends Prisma.ProductCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ProductCountAggregateOutputType>
        : number;

/**
 * ## Product Class
 */
export default class ProductService {
    /**
     * ## Product Create (Class)
     */
    static async create<T extends Prisma.ProductCreateArgs>(
        props: ProductCreateProps<T>,
    ): Promise<ResponseFormat<ProductCreateResponse<T>>> {
        try {
            const product = await PrismaInstance.product.create(props);
            return { data: product };
        } catch (error) {
            return ProductService.error("create", error);
        }
    }

    /**
     * ## Product Upsert (Class)
     */
    static async upsert<T extends Prisma.ProductUpsertArgs>(
        props: ProductUpsertProps<T>,
    ): Promise<ResponseFormat<ProductUpsertResponse<T>>> {
        try {
            const product = await PrismaInstance.product.upsert(props);
            return { data: product };
        } catch (error) {
            return ProductService.error("upsert", error);
        }
    }

    /**
     * ## Product Update (Class)
     */
    static async update<T extends Prisma.ProductUpdateArgs>(
        props: ProductUpdateProps<T>,
    ): Promise<ResponseFormat<ProductUpdateResponse<T>>> {
        try {
            const product = await PrismaInstance.product.update(props);
            return { data: product };
        } catch (error) {
            return ProductService.error("update", error);
        }
    }

    /**
     * ## Product Delete (Class)
     */
    static async delete<T extends Prisma.ProductDeleteArgs>(
        props: ProductDeleteProps<T>,
    ): Promise<ResponseFormat<ProductDeleteResponse<T>>> {
        try {
            const product = await PrismaInstance.product.delete(props);
            return { data: product };
        } catch (error) {
            return ProductService.error("delete", error);
        }
    }

    /**
     * ## Product Create Many (Class)
     */
    static async createMany<T extends Prisma.ProductCreateManyArgs>(
        props: ProductCreateManyProps<T>,
    ): Promise<ResponseFormat<ProductCreateManyResponse>> {
        try {
            const result = await PrismaInstance.product.createMany(props);
            return { data: result };
        } catch (error) {
            return ProductService.error("createMany", error);
        }
    }

    /**
     * ## Product Update Many (Class)
     */
    static async updateMany<T extends Prisma.ProductUpdateManyArgs>(
        props: ProductUpdateManyProps<T>,
    ): Promise<ResponseFormat<ProductUpdateManyResponse>> {
        try {
            const result = await PrismaInstance.product.updateMany(props);
            return { data: result };
        } catch (error) {
            return ProductService.error("updateMany", error);
        }
    }

    /**
     * ## Product Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.ProductDeleteManyArgs>(
        props: ProductDeleteManyProps<T>,
    ): Promise<ResponseFormat<ProductDeleteManyResponse>> {
        try {
            const result = await PrismaInstance.product.deleteMany(props);
            return { data: result };
        } catch (error) {
            return ProductService.error("deleteMany", error);
        }
    }

    /**
     * ## Product Find First (Class)
     */
    static async findFirst<T extends Prisma.ProductFindFirstArgs>(
        props: ProductFindFirstProps<T>,
    ): Promise<ResponseFormat<ProductFindFirstResponse<T>>> {
        try {
            const product = await PrismaInstance.product.findFirst(props);
            return { data: product };
        } catch (error) {
            return ProductService.error("findFirst", error);
        }
    }

    /**
     * ## Product Find Unique (Class)
     */
    static async findUnique<T extends Prisma.ProductFindUniqueArgs>(
        props: ProductFindUniqueProps<T>,
    ): Promise<ResponseFormat<ProductFindUniqueResponse<T>>> {
        try {
            const product = await PrismaInstance.product.findUnique(props);
            return { data: product };
        } catch (error) {
            return ProductService.error("findUnique", error);
        }
    }

    /**
     * ## Product Find Many (Class)
     */
    static async findMany<T extends Prisma.ProductFindManyArgs>(
        props: ProductFindManyProps<T>,
    ): Promise<ResponseFormat<ProductFindManyResponse<T>>> {
        try {
            const productList = await PrismaInstance.product.findMany(props);
            return { data: productList };
        } catch (error) {
            return ProductService.error("findMany", error);
        }
    }

    /**
     * ## Product Count (Class)
     */
    static async count<T extends Prisma.ProductCountArgs>(
        props: ProductCountProps<T>,
    ): Promise<ResponseFormat<ProductCountResponse<T>>> {
        try {
            const productAmount = await PrismaInstance.product.count(props);
            return { data: productAmount };
        } catch (error) {
            return ProductService.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
