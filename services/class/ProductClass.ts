import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    ProductCountProps,
    ProductCountResponse,
    ProductCreateManyProps,
    ProductCreateManyResponse,
    ProductCreateProps,
    ProductCreateResponse,
    ProductDeleteManyProps,
    ProductDeleteManyResponse,
    ProductDeleteProps,
    ProductDeleteResponse,
    ProductFindFirstProps,
    ProductFindFirstResponse,
    ProductFindManyProps,
    ProductFindManyResponse,
    ProductFindUniqueProps,
    ProductFindUniqueResponse,
    ProductUpdateManyProps,
    ProductUpdateManyResponse,
    ProductUpdateProps,
    ProductUpdateResponse,
    ProductUpsertProps,
    ProductUpsertResponse,
} from "@services/types";

/**
 * # Product Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Product Class
 */
export default class ProductService {
    /**
     * ## Product Create (Class)
     */
    static async create<T extends Prisma.ProductCreateArgs>(
        props: ProductCreateProps<T>,
    ): Promise<ProductCreateResponse<T>> {
        try {
            return await PrismaInstance.product.create(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Product Upsert (Class)
     */
    static async upsert<T extends Prisma.ProductUpsertArgs>(
        props: ProductUpsertProps<T>,
    ): Promise<ProductUpsertResponse<T>> {
        try {
            return await PrismaInstance.product.upsert(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Product Update (Class)
     */
    static async update<T extends Prisma.ProductUpdateArgs>(
        props: ProductUpdateProps<T>,
    ): Promise<ProductUpdateResponse<T>> {
        try {
            return await PrismaInstance.product.update(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Product Delete (Class)
     */
    static async delete<T extends Prisma.ProductDeleteArgs>(
        props: ProductDeleteProps<T>,
    ): Promise<ProductDeleteResponse<T>> {
        try {
            return await PrismaInstance.product.delete(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Product Create Many (Class)
     */
    static async createMany<T extends Prisma.ProductCreateManyArgs>(
        props: ProductCreateManyProps<T>,
    ): Promise<ProductCreateManyResponse> {
        try {
            return await PrismaInstance.product.createMany(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Product Update Many (Class)
     */
    static async updateMany<T extends Prisma.ProductUpdateManyArgs>(
        props: ProductUpdateManyProps<T>,
    ): Promise<ProductUpdateManyResponse> {
        try {
            return await PrismaInstance.product.updateMany(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Product Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.ProductDeleteManyArgs>(
        props: ProductDeleteManyProps<T>,
    ): Promise<ProductDeleteManyResponse> {
        try {
            return await PrismaInstance.product.deleteMany(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Product Find First (Class)
     */
    static async findFirst<T extends Prisma.ProductFindFirstArgs>(
        props: ProductFindFirstProps<T>,
    ): Promise<ProductFindFirstResponse<T>> {
        try {
            return await PrismaInstance.product.findFirst(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Product Find Unique (Class)
     */
    static async findUnique<T extends Prisma.ProductFindUniqueArgs>(
        props: ProductFindUniqueProps<T>,
    ): Promise<ProductFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.product.findUnique(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Product Find Many (Class)
     */
    static async findMany<T extends Prisma.ProductFindManyArgs>(
        props: ProductFindManyProps<T>,
    ): Promise<ProductFindManyResponse<T>> {
        try {
            return await PrismaInstance.product.findMany(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Product Count (Class)
     */
    static async count<T extends Prisma.ProductCountArgs>(
        props: ProductCountProps<T>,
    ): Promise<ProductCountResponse<T>> {
        try {
            return await PrismaInstance.product.count(props);
        } catch (error) {
            throw ProductService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
