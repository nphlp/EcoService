import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # Verification Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type VerificationCreateProps<T extends Prisma.VerificationCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationCreateArgs
>;
type VerificationCreateResponse<T extends Prisma.VerificationCreateArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type VerificationUpsertProps<T extends Prisma.VerificationUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationUpsertArgs
>;
type VerificationUpsertResponse<T extends Prisma.VerificationUpsertArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type VerificationUpdateProps<T extends Prisma.VerificationUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationUpdateArgs
>;
type VerificationUpdateResponse<T extends Prisma.VerificationUpdateArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type VerificationDeleteProps<T extends Prisma.VerificationDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationDeleteArgs
>;
type VerificationDeleteResponse<T extends Prisma.VerificationDeleteArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type VerificationCreateManyProps<T extends Prisma.VerificationCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationCreateManyArgs
>;
type VerificationCreateManyResponse = Prisma.BatchPayload;

// Update Many
type VerificationUpdateManyProps<T extends Prisma.VerificationUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationUpdateManyArgs
>;
type VerificationUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type VerificationDeleteManyProps<T extends Prisma.VerificationDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationDeleteManyArgs
>;
type VerificationDeleteManyResponse = Prisma.BatchPayload;

// Find First
type VerificationFindFirstProps<T extends Prisma.VerificationFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationFindFirstArgs
>;
type VerificationFindFirstResponse<T extends Prisma.VerificationFindFirstArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type VerificationFindUniqueProps<T extends Prisma.VerificationFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationFindUniqueArgs
>;
type VerificationFindUniqueResponse<T extends Prisma.VerificationFindUniqueArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type VerificationFindManyProps<T extends Prisma.VerificationFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationFindManyArgs
>;
type VerificationFindManyResponse<T extends Prisma.VerificationFindManyArgs> = GetResult<
    Prisma.$VerificationPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type VerificationCountProps<T extends Prisma.VerificationCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.VerificationCountArgs
>;
type VerificationCountResponse<T extends Prisma.VerificationCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.VerificationCountAggregateOutputType>
        : number;

/**
 * ## Verification Class
 */
export default class VerificationService {
    /**
     * ## Verification Create (Class)
     */
    static async create<T extends Prisma.VerificationCreateArgs>(
        props: VerificationCreateProps<T>,
    ): Promise<ResponseFormat<VerificationCreateResponse<T>>> {
        try {
            const verification = await PrismaInstance.verification.create(props);
            return { data: verification };
        } catch (error) {
            return VerificationService.error("create", error);
        }
    }

    /**
     * ## Verification Upsert (Class)
     */
    static async upsert<T extends Prisma.VerificationUpsertArgs>(
        props: VerificationUpsertProps<T>,
    ): Promise<ResponseFormat<VerificationUpsertResponse<T>>> {
        try {
            const verification = await PrismaInstance.verification.upsert(props);
            return { data: verification };
        } catch (error) {
            return VerificationService.error("upsert", error);
        }
    }

    /**
     * ## Verification Update (Class)
     */
    static async update<T extends Prisma.VerificationUpdateArgs>(
        props: VerificationUpdateProps<T>,
    ): Promise<ResponseFormat<VerificationUpdateResponse<T>>> {
        try {
            const verification = await PrismaInstance.verification.update(props);
            return { data: verification };
        } catch (error) {
            return VerificationService.error("update", error);
        }
    }

    /**
     * ## Verification Delete (Class)
     */
    static async delete<T extends Prisma.VerificationDeleteArgs>(
        props: VerificationDeleteProps<T>,
    ): Promise<ResponseFormat<VerificationDeleteResponse<T>>> {
        try {
            const verification = await PrismaInstance.verification.delete(props);
            return { data: verification };
        } catch (error) {
            return VerificationService.error("delete", error);
        }
    }

    /**
     * ## Verification Create Many (Class)
     */
    static async createMany<T extends Prisma.VerificationCreateManyArgs>(
        props: VerificationCreateManyProps<T>,
    ): Promise<ResponseFormat<VerificationCreateManyResponse>> {
        try {
            const result = await PrismaInstance.verification.createMany(props);
            return { data: result };
        } catch (error) {
            return VerificationService.error("createMany", error);
        }
    }

    /**
     * ## Verification Update Many (Class)
     */
    static async updateMany<T extends Prisma.VerificationUpdateManyArgs>(
        props: VerificationUpdateManyProps<T>,
    ): Promise<ResponseFormat<VerificationUpdateManyResponse>> {
        try {
            const result = await PrismaInstance.verification.updateMany(props);
            return { data: result };
        } catch (error) {
            return VerificationService.error("updateMany", error);
        }
    }

    /**
     * ## Verification Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.VerificationDeleteManyArgs>(
        props: VerificationDeleteManyProps<T>,
    ): Promise<ResponseFormat<VerificationDeleteManyResponse>> {
        try {
            const result = await PrismaInstance.verification.deleteMany(props);
            return { data: result };
        } catch (error) {
            return VerificationService.error("deleteMany", error);
        }
    }

    /**
     * ## Verification Find First (Class)
     */
    static async findFirst<T extends Prisma.VerificationFindFirstArgs>(
        props: VerificationFindFirstProps<T>,
    ): Promise<ResponseFormat<VerificationFindFirstResponse<T>>> {
        try {
            const verification = await PrismaInstance.verification.findFirst(props);
            return { data: verification };
        } catch (error) {
            return VerificationService.error("findFirst", error);
        }
    }

    /**
     * ## Verification Find Unique (Class)
     */
    static async findUnique<T extends Prisma.VerificationFindUniqueArgs>(
        props: VerificationFindUniqueProps<T>,
    ): Promise<ResponseFormat<VerificationFindUniqueResponse<T>>> {
        try {
            const verification = await PrismaInstance.verification.findUnique(props);
            return { data: verification };
        } catch (error) {
            return VerificationService.error("findUnique", error);
        }
    }

    /**
     * ## Verification Find Many (Class)
     */
    static async findMany<T extends Prisma.VerificationFindManyArgs>(
        props: VerificationFindManyProps<T>,
    ): Promise<ResponseFormat<VerificationFindManyResponse<T>>> {
        try {
            const verificationList = await PrismaInstance.verification.findMany(props);
            return { data: verificationList };
        } catch (error) {
            return VerificationService.error("findMany", error);
        }
    }

    /**
     * ## Verification Count (Class)
     */
    static async count<T extends Prisma.VerificationCountArgs>(
        props: VerificationCountProps<T>,
    ): Promise<ResponseFormat<VerificationCountResponse<T>>> {
        try {
            const verificationAmount = await PrismaInstance.verification.count(props);
            return { data: verificationAmount };
        } catch (error) {
            return VerificationService.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
