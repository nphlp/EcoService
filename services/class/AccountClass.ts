import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # Account Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type AccountCreateProps<T extends Prisma.AccountCreateArgs> = Prisma.SelectSubset<T, Prisma.AccountCreateArgs>;
type AccountCreateResponse<T extends Prisma.AccountCreateArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type AccountUpsertProps<T extends Prisma.AccountUpsertArgs> = Prisma.SelectSubset<T, Prisma.AccountUpsertArgs>;
type AccountUpsertResponse<T extends Prisma.AccountUpsertArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type AccountUpdateProps<T extends Prisma.AccountUpdateArgs> = Prisma.SelectSubset<T, Prisma.AccountUpdateArgs>;
type AccountUpdateResponse<T extends Prisma.AccountUpdateArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type AccountDeleteProps<T extends Prisma.AccountDeleteArgs> = Prisma.SelectSubset<T, Prisma.AccountDeleteArgs>;
type AccountDeleteResponse<T extends Prisma.AccountDeleteArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type AccountCreateManyProps<T extends Prisma.AccountCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountCreateManyArgs
>;
type AccountCreateManyResponse = Prisma.BatchPayload;

// Update Many
type AccountUpdateManyProps<T extends Prisma.AccountUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountUpdateManyArgs
>;
type AccountUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type AccountDeleteManyProps<T extends Prisma.AccountDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountDeleteManyArgs
>;
type AccountDeleteManyResponse = Prisma.BatchPayload;

// Find First
type AccountFindFirstProps<T extends Prisma.AccountFindFirstArgs> = Prisma.SelectSubset<T, Prisma.AccountFindFirstArgs>;
type AccountFindFirstResponse<T extends Prisma.AccountFindFirstArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type AccountFindUniqueProps<T extends Prisma.AccountFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.AccountFindUniqueArgs
>;
type AccountFindUniqueResponse<T extends Prisma.AccountFindUniqueArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type AccountFindManyProps<T extends Prisma.AccountFindManyArgs> = Prisma.SelectSubset<T, Prisma.AccountFindManyArgs>;
type AccountFindManyResponse<T extends Prisma.AccountFindManyArgs> = GetResult<
    Prisma.$AccountPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type AccountCountProps<T extends Prisma.AccountCountArgs> = Prisma.SelectSubset<T, Prisma.AccountCountArgs>;
type AccountCountResponse<T extends Prisma.AccountCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.AccountCountAggregateOutputType>
        : number;

/**
 * ## Account Class
 */
export default class AccountService {
    /**
     * ## Account Create (Class)
     */
    static async create<T extends Prisma.AccountCreateArgs>(
        props: AccountCreateProps<T>,
    ): Promise<ResponseFormat<AccountCreateResponse<T>>> {
        try {
            const account = await PrismaInstance.account.create(props);
            return { data: account };
        } catch (error) {
            return AccountService.error("create", error);
        }
    }

    /**
     * ## Account Upsert (Class)
     */
    static async upsert<T extends Prisma.AccountUpsertArgs>(
        props: AccountUpsertProps<T>,
    ): Promise<ResponseFormat<AccountUpsertResponse<T>>> {
        try {
            const account = await PrismaInstance.account.upsert(props);
            return { data: account };
        } catch (error) {
            return AccountService.error("upsert", error);
        }
    }

    /**
     * ## Account Update (Class)
     */
    static async update<T extends Prisma.AccountUpdateArgs>(
        props: AccountUpdateProps<T>,
    ): Promise<ResponseFormat<AccountUpdateResponse<T>>> {
        try {
            const account = await PrismaInstance.account.update(props);
            return { data: account };
        } catch (error) {
            return AccountService.error("update", error);
        }
    }

    /**
     * ## Account Delete (Class)
     */
    static async delete<T extends Prisma.AccountDeleteArgs>(
        props: AccountDeleteProps<T>,
    ): Promise<ResponseFormat<AccountDeleteResponse<T>>> {
        try {
            const account = await PrismaInstance.account.delete(props);
            return { data: account };
        } catch (error) {
            return AccountService.error("delete", error);
        }
    }

    /**
     * ## Account Create Many (Class)
     */
    static async createMany<T extends Prisma.AccountCreateManyArgs>(
        props: AccountCreateManyProps<T>,
    ): Promise<ResponseFormat<AccountCreateManyResponse>> {
        try {
            const result = await PrismaInstance.account.createMany(props);
            return { data: result };
        } catch (error) {
            return AccountService.error("createMany", error);
        }
    }

    /**
     * ## Account Update Many (Class)
     */
    static async updateMany<T extends Prisma.AccountUpdateManyArgs>(
        props: AccountUpdateManyProps<T>,
    ): Promise<ResponseFormat<AccountUpdateManyResponse>> {
        try {
            const result = await PrismaInstance.account.updateMany(props);
            return { data: result };
        } catch (error) {
            return AccountService.error("updateMany", error);
        }
    }

    /**
     * ## Account Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.AccountDeleteManyArgs>(
        props: AccountDeleteManyProps<T>,
    ): Promise<ResponseFormat<AccountDeleteManyResponse>> {
        try {
            const result = await PrismaInstance.account.deleteMany(props);
            return { data: result };
        } catch (error) {
            return AccountService.error("deleteMany", error);
        }
    }

    /**
     * ## Account Find First (Class)
     */
    static async findFirst<T extends Prisma.AccountFindFirstArgs>(
        props: AccountFindFirstProps<T>,
    ): Promise<ResponseFormat<AccountFindFirstResponse<T>>> {
        try {
            const account = await PrismaInstance.account.findFirst(props);
            return { data: account };
        } catch (error) {
            return AccountService.error("findFirst", error);
        }
    }

    /**
     * ## Account Find Unique (Class)
     */
    static async findUnique<T extends Prisma.AccountFindUniqueArgs>(
        props: AccountFindUniqueProps<T>,
    ): Promise<ResponseFormat<AccountFindUniqueResponse<T>>> {
        try {
            const account = await PrismaInstance.account.findUnique(props);
            return { data: account };
        } catch (error) {
            return AccountService.error("findUnique", error);
        }
    }

    /**
     * ## Account Find Many (Class)
     */
    static async findMany<T extends Prisma.AccountFindManyArgs>(
        props: AccountFindManyProps<T>,
    ): Promise<ResponseFormat<AccountFindManyResponse<T>>> {
        try {
            const accountList = await PrismaInstance.account.findMany(props);
            return { data: accountList };
        } catch (error) {
            return AccountService.error("findMany", error);
        }
    }

    /**
     * ## Account Count (Class)
     */
    static async count<T extends Prisma.AccountCountArgs>(
        props: AccountCountProps<T>,
    ): Promise<ResponseFormat<AccountCountResponse<T>>> {
        try {
            const accountAmount = await PrismaInstance.account.count(props);
            return { data: accountAmount };
        } catch (error) {
            return AccountService.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
