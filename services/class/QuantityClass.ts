import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # Quantity Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type QuantityCreateProps<T extends Prisma.QuantityCreateArgs> = Prisma.SelectSubset<T, Prisma.QuantityCreateArgs>;
type QuantityCreateResponse<T extends Prisma.QuantityCreateArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type QuantityUpsertProps<T extends Prisma.QuantityUpsertArgs> = Prisma.SelectSubset<T, Prisma.QuantityUpsertArgs>;
type QuantityUpsertResponse<T extends Prisma.QuantityUpsertArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type QuantityUpdateProps<T extends Prisma.QuantityUpdateArgs> = Prisma.SelectSubset<T, Prisma.QuantityUpdateArgs>;
type QuantityUpdateResponse<T extends Prisma.QuantityUpdateArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type QuantityDeleteProps<T extends Prisma.QuantityDeleteArgs> = Prisma.SelectSubset<T, Prisma.QuantityDeleteArgs>;
type QuantityDeleteResponse<T extends Prisma.QuantityDeleteArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type QuantityCreateManyProps<T extends Prisma.QuantityCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityCreateManyArgs
>;
type QuantityCreateManyResponse = Prisma.BatchPayload;

// Update Many
type QuantityUpdateManyProps<T extends Prisma.QuantityUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityUpdateManyArgs
>;
type QuantityUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type QuantityDeleteManyProps<T extends Prisma.QuantityDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityDeleteManyArgs
>;
type QuantityDeleteManyResponse = Prisma.BatchPayload;

// Find First
type QuantityFindFirstProps<T extends Prisma.QuantityFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityFindFirstArgs
>;
type QuantityFindFirstResponse<T extends Prisma.QuantityFindFirstArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type QuantityFindUniqueProps<T extends Prisma.QuantityFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityFindUniqueArgs
>;
type QuantityFindUniqueResponse<T extends Prisma.QuantityFindUniqueArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type QuantityFindManyProps<T extends Prisma.QuantityFindManyArgs> = Prisma.SelectSubset<T, Prisma.QuantityFindManyArgs>;
type QuantityFindManyResponse<T extends Prisma.QuantityFindManyArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type QuantityCountProps<T extends Prisma.QuantityCountArgs> = Prisma.SelectSubset<T, Prisma.QuantityCountArgs>;
type QuantityCountResponse<T extends Prisma.QuantityCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.QuantityCountAggregateOutputType>
        : number;

/**
 * ## Quantity Class
 */
export default class QuantityService {
    /**
     * ## Quantity Create (Class)
     */
    static async create<T extends Prisma.QuantityCreateArgs>(
        props: QuantityCreateProps<T>,
    ): Promise<ResponseFormat<QuantityCreateResponse<T>>> {
        try {
            const quantity = await PrismaInstance.quantity.create(props);
            return { data: quantity };
        } catch (error) {
            return QuantityService.error("create", error);
        }
    }

    /**
     * ## Quantity Upsert (Class)
     */
    static async upsert<T extends Prisma.QuantityUpsertArgs>(
        props: QuantityUpsertProps<T>,
    ): Promise<ResponseFormat<QuantityUpsertResponse<T>>> {
        try {
            const quantity = await PrismaInstance.quantity.upsert(props);
            return { data: quantity };
        } catch (error) {
            return QuantityService.error("upsert", error);
        }
    }

    /**
     * ## Quantity Update (Class)
     */
    static async update<T extends Prisma.QuantityUpdateArgs>(
        props: QuantityUpdateProps<T>,
    ): Promise<ResponseFormat<QuantityUpdateResponse<T>>> {
        try {
            const quantity = await PrismaInstance.quantity.update(props);
            return { data: quantity };
        } catch (error) {
            return QuantityService.error("update", error);
        }
    }

    /**
     * ## Quantity Delete (Class)
     */
    static async delete<T extends Prisma.QuantityDeleteArgs>(
        props: QuantityDeleteProps<T>,
    ): Promise<ResponseFormat<QuantityDeleteResponse<T>>> {
        try {
            const quantity = await PrismaInstance.quantity.delete(props);
            return { data: quantity };
        } catch (error) {
            return QuantityService.error("delete", error);
        }
    }

    /**
     * ## Quantity Create Many (Class)
     */
    static async createMany<T extends Prisma.QuantityCreateManyArgs>(
        props: QuantityCreateManyProps<T>,
    ): Promise<ResponseFormat<QuantityCreateManyResponse>> {
        try {
            const result = await PrismaInstance.quantity.createMany(props);
            return { data: result };
        } catch (error) {
            return QuantityService.error("createMany", error);
        }
    }

    /**
     * ## Quantity Update Many (Class)
     */
    static async updateMany<T extends Prisma.QuantityUpdateManyArgs>(
        props: QuantityUpdateManyProps<T>,
    ): Promise<ResponseFormat<QuantityUpdateManyResponse>> {
        try {
            const result = await PrismaInstance.quantity.updateMany(props);
            return { data: result };
        } catch (error) {
            return QuantityService.error("updateMany", error);
        }
    }

    /**
     * ## Quantity Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.QuantityDeleteManyArgs>(
        props: QuantityDeleteManyProps<T>,
    ): Promise<ResponseFormat<QuantityDeleteManyResponse>> {
        try {
            const result = await PrismaInstance.quantity.deleteMany(props);
            return { data: result };
        } catch (error) {
            return QuantityService.error("deleteMany", error);
        }
    }

    /**
     * ## Quantity Find First (Class)
     */
    static async findFirst<T extends Prisma.QuantityFindFirstArgs>(
        props: QuantityFindFirstProps<T>,
    ): Promise<ResponseFormat<QuantityFindFirstResponse<T>>> {
        try {
            const quantity = await PrismaInstance.quantity.findFirst(props);
            return { data: quantity };
        } catch (error) {
            return QuantityService.error("findFirst", error);
        }
    }

    /**
     * ## Quantity Find Unique (Class)
     */
    static async findUnique<T extends Prisma.QuantityFindUniqueArgs>(
        props: QuantityFindUniqueProps<T>,
    ): Promise<ResponseFormat<QuantityFindUniqueResponse<T>>> {
        try {
            const quantity = await PrismaInstance.quantity.findUnique(props);
            return { data: quantity };
        } catch (error) {
            return QuantityService.error("findUnique", error);
        }
    }

    /**
     * ## Quantity Find Many (Class)
     */
    static async findMany<T extends Prisma.QuantityFindManyArgs>(
        props: QuantityFindManyProps<T>,
    ): Promise<ResponseFormat<QuantityFindManyResponse<T>>> {
        try {
            const quantityList = await PrismaInstance.quantity.findMany(props);
            return { data: quantityList };
        } catch (error) {
            return QuantityService.error("findMany", error);
        }
    }

    /**
     * ## Quantity Count (Class)
     */
    static async count<T extends Prisma.QuantityCountArgs>(
        props: QuantityCountProps<T>,
    ): Promise<ResponseFormat<QuantityCountResponse<T>>> {
        try {
            const quantityAmount = await PrismaInstance.quantity.count(props);
            return { data: quantityAmount };
        } catch (error) {
            return QuantityService.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
