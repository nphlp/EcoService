import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # Category Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type CategoryCreateProps<T extends Prisma.CategoryCreateArgs> = Prisma.SelectSubset<T, Prisma.CategoryCreateArgs>;
type CategoryCreateResponse<T extends Prisma.CategoryCreateArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type CategoryUpsertProps<T extends Prisma.CategoryUpsertArgs> = Prisma.SelectSubset<T, Prisma.CategoryUpsertArgs>;
type CategoryUpsertResponse<T extends Prisma.CategoryUpsertArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type CategoryUpdateProps<T extends Prisma.CategoryUpdateArgs> = Prisma.SelectSubset<T, Prisma.CategoryUpdateArgs>;
type CategoryUpdateResponse<T extends Prisma.CategoryUpdateArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type CategoryDeleteProps<T extends Prisma.CategoryDeleteArgs> = Prisma.SelectSubset<T, Prisma.CategoryDeleteArgs>;
type CategoryDeleteResponse<T extends Prisma.CategoryDeleteArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type CategoryCreateManyProps<T extends Prisma.CategoryCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryCreateManyArgs
>;
type CategoryCreateManyResponse = Prisma.BatchPayload;

// Update Many
type CategoryUpdateManyProps<T extends Prisma.CategoryUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryUpdateManyArgs
>;
type CategoryUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type CategoryDeleteManyProps<T extends Prisma.CategoryDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryDeleteManyArgs
>;
type CategoryDeleteManyResponse = Prisma.BatchPayload;

// Find First
type CategoryFindFirstProps<T extends Prisma.CategoryFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryFindFirstArgs
>;
type CategoryFindFirstResponse<T extends Prisma.CategoryFindFirstArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type CategoryFindUniqueProps<T extends Prisma.CategoryFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryFindUniqueArgs
>;
type CategoryFindUniqueResponse<T extends Prisma.CategoryFindUniqueArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type CategoryFindManyProps<T extends Prisma.CategoryFindManyArgs> = Prisma.SelectSubset<T, Prisma.CategoryFindManyArgs>;
type CategoryFindManyResponse<T extends Prisma.CategoryFindManyArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type CategoryCountProps<T extends Prisma.CategoryCountArgs> = Prisma.SelectSubset<T, Prisma.CategoryCountArgs>;
type CategoryCountResponse<T extends Prisma.CategoryCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.CategoryCountAggregateOutputType>
        : number;

/**
 * ## Category Class
 */
export default class CategoryService {
    /**
     * ## Category Create (Class)
     */
    static async create<T extends Prisma.CategoryCreateArgs>(
        props: CategoryCreateProps<T>,
    ): Promise<ResponseFormat<CategoryCreateResponse<T>>> {
        try {
            const category = await PrismaInstance.category.create(props);
            return { data: category };
        } catch (error) {
            return CategoryService.error("create", error);
        }
    }

    /**
     * ## Category Upsert (Class)
     */
    static async upsert<T extends Prisma.CategoryUpsertArgs>(
        props: CategoryUpsertProps<T>,
    ): Promise<ResponseFormat<CategoryUpsertResponse<T>>> {
        try {
            const category = await PrismaInstance.category.upsert(props);
            return { data: category };
        } catch (error) {
            return CategoryService.error("upsert", error);
        }
    }

    /**
     * ## Category Update (Class)
     */
    static async update<T extends Prisma.CategoryUpdateArgs>(
        props: CategoryUpdateProps<T>,
    ): Promise<ResponseFormat<CategoryUpdateResponse<T>>> {
        try {
            const category = await PrismaInstance.category.update(props);
            return { data: category };
        } catch (error) {
            return CategoryService.error("update", error);
        }
    }

    /**
     * ## Category Delete (Class)
     */
    static async delete<T extends Prisma.CategoryDeleteArgs>(
        props: CategoryDeleteProps<T>,
    ): Promise<ResponseFormat<CategoryDeleteResponse<T>>> {
        try {
            const category = await PrismaInstance.category.delete(props);
            return { data: category };
        } catch (error) {
            return CategoryService.error("delete", error);
        }
    }

    /**
     * ## Category Create Many (Class)
     */
    static async createMany<T extends Prisma.CategoryCreateManyArgs>(
        props: CategoryCreateManyProps<T>,
    ): Promise<ResponseFormat<CategoryCreateManyResponse>> {
        try {
            const result = await PrismaInstance.category.createMany(props);
            return { data: result };
        } catch (error) {
            return CategoryService.error("createMany", error);
        }
    }

    /**
     * ## Category Update Many (Class)
     */
    static async updateMany<T extends Prisma.CategoryUpdateManyArgs>(
        props: CategoryUpdateManyProps<T>,
    ): Promise<ResponseFormat<CategoryUpdateManyResponse>> {
        try {
            const result = await PrismaInstance.category.updateMany(props);
            return { data: result };
        } catch (error) {
            return CategoryService.error("updateMany", error);
        }
    }

    /**
     * ## Category Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.CategoryDeleteManyArgs>(
        props: CategoryDeleteManyProps<T>,
    ): Promise<ResponseFormat<CategoryDeleteManyResponse>> {
        try {
            const result = await PrismaInstance.category.deleteMany(props);
            return { data: result };
        } catch (error) {
            return CategoryService.error("deleteMany", error);
        }
    }

    /**
     * ## Category Find First (Class)
     */
    static async findFirst<T extends Prisma.CategoryFindFirstArgs>(
        props: CategoryFindFirstProps<T>,
    ): Promise<ResponseFormat<CategoryFindFirstResponse<T>>> {
        try {
            const category = await PrismaInstance.category.findFirst(props);
            return { data: category };
        } catch (error) {
            return CategoryService.error("findFirst", error);
        }
    }

    /**
     * ## Category Find Unique (Class)
     */
    static async findUnique<T extends Prisma.CategoryFindUniqueArgs>(
        props: CategoryFindUniqueProps<T>,
    ): Promise<ResponseFormat<CategoryFindUniqueResponse<T>>> {
        try {
            const category = await PrismaInstance.category.findUnique(props);
            return { data: category };
        } catch (error) {
            return CategoryService.error("findUnique", error);
        }
    }

    /**
     * ## Category Find Many (Class)
     */
    static async findMany<T extends Prisma.CategoryFindManyArgs>(
        props: CategoryFindManyProps<T>,
    ): Promise<ResponseFormat<CategoryFindManyResponse<T>>> {
        try {
            const categoryList = await PrismaInstance.category.findMany(props);
            return { data: categoryList };
        } catch (error) {
            return CategoryService.error("findMany", error);
        }
    }

    /**
     * ## Category Count (Class)
     */
    static async count<T extends Prisma.CategoryCountArgs>(
        props: CategoryCountProps<T>,
    ): Promise<ResponseFormat<CategoryCountResponse<T>>> {
        try {
            const categoryAmount = await PrismaInstance.category.count(props);
            return { data: categoryAmount };
        } catch (error) {
            return CategoryService.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
