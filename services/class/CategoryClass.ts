import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    CategoryCountProps,
    CategoryCountResponse,
    CategoryCreateManyProps,
    CategoryCreateManyResponse,
    CategoryCreateProps,
    CategoryCreateResponse,
    CategoryDeleteManyProps,
    CategoryDeleteManyResponse,
    CategoryDeleteProps,
    CategoryDeleteResponse,
    CategoryFindFirstProps,
    CategoryFindFirstResponse,
    CategoryFindManyProps,
    CategoryFindManyResponse,
    CategoryFindUniqueProps,
    CategoryFindUniqueResponse,
    CategoryUpdateManyProps,
    CategoryUpdateManyResponse,
    CategoryUpdateProps,
    CategoryUpdateResponse,
    CategoryUpsertProps,
    CategoryUpsertResponse,
} from "@services/types";

/**
 * # Category Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Category Class
 */
export default class CategoryService {
    /**
     * ## Category Create (Class)
     */
    static async create<T extends Prisma.CategoryCreateArgs>(
        props: CategoryCreateProps<T>,
    ): Promise<CategoryCreateResponse<T>> {
        try {
            return await PrismaInstance.category.create(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Category Upsert (Class)
     */
    static async upsert<T extends Prisma.CategoryUpsertArgs>(
        props: CategoryUpsertProps<T>,
    ): Promise<CategoryUpsertResponse<T>> {
        try {
            return await PrismaInstance.category.upsert(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Category Update (Class)
     */
    static async update<T extends Prisma.CategoryUpdateArgs>(
        props: CategoryUpdateProps<T>,
    ): Promise<CategoryUpdateResponse<T>> {
        try {
            return await PrismaInstance.category.update(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Category Delete (Class)
     */
    static async delete<T extends Prisma.CategoryDeleteArgs>(
        props: CategoryDeleteProps<T>,
    ): Promise<CategoryDeleteResponse<T>> {
        try {
            return await PrismaInstance.category.delete(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Category Create Many (Class)
     */
    static async createMany<T extends Prisma.CategoryCreateManyArgs>(
        props: CategoryCreateManyProps<T>,
    ): Promise<CategoryCreateManyResponse> {
        try {
            return await PrismaInstance.category.createMany(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Category Update Many (Class)
     */
    static async updateMany<T extends Prisma.CategoryUpdateManyArgs>(
        props: CategoryUpdateManyProps<T>,
    ): Promise<CategoryUpdateManyResponse> {
        try {
            return await PrismaInstance.category.updateMany(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Category Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.CategoryDeleteManyArgs>(
        props: CategoryDeleteManyProps<T>,
    ): Promise<CategoryDeleteManyResponse> {
        try {
            return await PrismaInstance.category.deleteMany(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Category Find First (Class)
     */
    static async findFirst<T extends Prisma.CategoryFindFirstArgs>(
        props: CategoryFindFirstProps<T>,
    ): Promise<CategoryFindFirstResponse<T>> {
        try {
            return await PrismaInstance.category.findFirst(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Category Find Unique (Class)
     */
    static async findUnique<T extends Prisma.CategoryFindUniqueArgs>(
        props: CategoryFindUniqueProps<T>,
    ): Promise<CategoryFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.category.findUnique(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Category Find Many (Class)
     */
    static async findMany<T extends Prisma.CategoryFindManyArgs>(
        props: CategoryFindManyProps<T>,
    ): Promise<CategoryFindManyResponse<T>> {
        try {
            return await PrismaInstance.category.findMany(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Category Count (Class)
     */
    static async count<T extends Prisma.CategoryCountArgs>(
        props: CategoryCountProps<T>,
    ): Promise<CategoryCountResponse<T>> {
        try {
            return await PrismaInstance.category.count(props);
        } catch (error) {
            throw CategoryService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
