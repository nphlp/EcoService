import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # Session Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type SessionCreateProps<T extends Prisma.SessionCreateArgs> = Prisma.SelectSubset<T, Prisma.SessionCreateArgs>;
type SessionCreateResponse<T extends Prisma.SessionCreateArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type SessionUpsertProps<T extends Prisma.SessionUpsertArgs> = Prisma.SelectSubset<T, Prisma.SessionUpsertArgs>;
type SessionUpsertResponse<T extends Prisma.SessionUpsertArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type SessionUpdateProps<T extends Prisma.SessionUpdateArgs> = Prisma.SelectSubset<T, Prisma.SessionUpdateArgs>;
type SessionUpdateResponse<T extends Prisma.SessionUpdateArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type SessionDeleteProps<T extends Prisma.SessionDeleteArgs> = Prisma.SelectSubset<T, Prisma.SessionDeleteArgs>;
type SessionDeleteResponse<T extends Prisma.SessionDeleteArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type SessionCreateManyProps<T extends Prisma.SessionCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionCreateManyArgs
>;
type SessionCreateManyResponse = Prisma.BatchPayload;

// Update Many
type SessionUpdateManyProps<T extends Prisma.SessionUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionUpdateManyArgs
>;
type SessionUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type SessionDeleteManyProps<T extends Prisma.SessionDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionDeleteManyArgs
>;
type SessionDeleteManyResponse = Prisma.BatchPayload;

// Find First
type SessionFindFirstProps<T extends Prisma.SessionFindFirstArgs> = Prisma.SelectSubset<T, Prisma.SessionFindFirstArgs>;
type SessionFindFirstResponse<T extends Prisma.SessionFindFirstArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type SessionFindUniqueProps<T extends Prisma.SessionFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.SessionFindUniqueArgs
>;
type SessionFindUniqueResponse<T extends Prisma.SessionFindUniqueArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type SessionFindManyProps<T extends Prisma.SessionFindManyArgs> = Prisma.SelectSubset<T, Prisma.SessionFindManyArgs>;
type SessionFindManyResponse<T extends Prisma.SessionFindManyArgs> = GetResult<
    Prisma.$SessionPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type SessionCountProps<T extends Prisma.SessionCountArgs> = Prisma.SelectSubset<T, Prisma.SessionCountArgs>;
type SessionCountResponse<T extends Prisma.SessionCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.SessionCountAggregateOutputType>
        : number;

/**
 * ## Session Class
 */
export default class SessionService {
    /**
     * ## Session Create (Class)
     */
    static async create<T extends Prisma.SessionCreateArgs>(
        props: SessionCreateProps<T>,
    ): Promise<ResponseFormat<SessionCreateResponse<T>>> {
        try {
            const session = await PrismaInstance.session.create(props);
            return { data: session };
        } catch (error) {
            return SessionService.error("create", error);
        }
    }

    /**
     * ## Session Upsert (Class)
     */
    static async upsert<T extends Prisma.SessionUpsertArgs>(
        props: SessionUpsertProps<T>,
    ): Promise<ResponseFormat<SessionUpsertResponse<T>>> {
        try {
            const session = await PrismaInstance.session.upsert(props);
            return { data: session };
        } catch (error) {
            return SessionService.error("upsert", error);
        }
    }

    /**
     * ## Session Update (Class)
     */
    static async update<T extends Prisma.SessionUpdateArgs>(
        props: SessionUpdateProps<T>,
    ): Promise<ResponseFormat<SessionUpdateResponse<T>>> {
        try {
            const session = await PrismaInstance.session.update(props);
            return { data: session };
        } catch (error) {
            return SessionService.error("update", error);
        }
    }

    /**
     * ## Session Delete (Class)
     */
    static async delete<T extends Prisma.SessionDeleteArgs>(
        props: SessionDeleteProps<T>,
    ): Promise<ResponseFormat<SessionDeleteResponse<T>>> {
        try {
            const session = await PrismaInstance.session.delete(props);
            return { data: session };
        } catch (error) {
            return SessionService.error("delete", error);
        }
    }

    /**
     * ## Session Create Many (Class)
     */
    static async createMany<T extends Prisma.SessionCreateManyArgs>(
        props: SessionCreateManyProps<T>,
    ): Promise<ResponseFormat<SessionCreateManyResponse>> {
        try {
            const result = await PrismaInstance.session.createMany(props);
            return { data: result };
        } catch (error) {
            return SessionService.error("createMany", error);
        }
    }

    /**
     * ## Session Update Many (Class)
     */
    static async updateMany<T extends Prisma.SessionUpdateManyArgs>(
        props: SessionUpdateManyProps<T>,
    ): Promise<ResponseFormat<SessionUpdateManyResponse>> {
        try {
            const result = await PrismaInstance.session.updateMany(props);
            return { data: result };
        } catch (error) {
            return SessionService.error("updateMany", error);
        }
    }

    /**
     * ## Session Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.SessionDeleteManyArgs>(
        props: SessionDeleteManyProps<T>,
    ): Promise<ResponseFormat<SessionDeleteManyResponse>> {
        try {
            const result = await PrismaInstance.session.deleteMany(props);
            return { data: result };
        } catch (error) {
            return SessionService.error("deleteMany", error);
        }
    }

    /**
     * ## Session Find First (Class)
     */
    static async findFirst<T extends Prisma.SessionFindFirstArgs>(
        props: SessionFindFirstProps<T>,
    ): Promise<ResponseFormat<SessionFindFirstResponse<T>>> {
        try {
            const session = await PrismaInstance.session.findFirst(props);
            return { data: session };
        } catch (error) {
            return SessionService.error("findFirst", error);
        }
    }

    /**
     * ## Session Find Unique (Class)
     */
    static async findUnique<T extends Prisma.SessionFindUniqueArgs>(
        props: SessionFindUniqueProps<T>,
    ): Promise<ResponseFormat<SessionFindUniqueResponse<T>>> {
        try {
            const session = await PrismaInstance.session.findUnique(props);
            return { data: session };
        } catch (error) {
            return SessionService.error("findUnique", error);
        }
    }

    /**
     * ## Session Find Many (Class)
     */
    static async findMany<T extends Prisma.SessionFindManyArgs>(
        props: SessionFindManyProps<T>,
    ): Promise<ResponseFormat<SessionFindManyResponse<T>>> {
        try {
            const sessionList = await PrismaInstance.session.findMany(props);
            return { data: sessionList };
        } catch (error) {
            return SessionService.error("findMany", error);
        }
    }

    /**
     * ## Session Count (Class)
     */
    static async count<T extends Prisma.SessionCountArgs>(
        props: SessionCountProps<T>,
    ): Promise<ResponseFormat<SessionCountResponse<T>>> {
        try {
            const sessionAmount = await PrismaInstance.session.count(props);
            return { data: sessionAmount };
        } catch (error) {
            return SessionService.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
