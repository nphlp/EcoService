import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    FruitCountProps,
    FruitCountResponse,
    FruitCreateManyProps,
    FruitCreateManyResponse,
    FruitCreateProps,
    FruitCreateResponse,
    FruitDeleteManyProps,
    FruitDeleteManyResponse,
    FruitDeleteProps,
    FruitDeleteResponse,
    FruitFindFirstProps,
    FruitFindFirstResponse,
    FruitFindManyProps,
    FruitFindManyResponse,
    FruitFindUniqueProps,
    FruitFindUniqueResponse,
    FruitUpdateManyProps,
    FruitUpdateManyResponse,
    FruitUpdateProps,
    FruitUpdateResponse,
    FruitUpsertProps,
    FruitUpsertResponse,
} from "@services/types";

/**
 * # Fruit Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Fruit Class
 */
export default class FruitService {
    /**
     * ## Fruit Create (Class)
     */
    static async create<T extends Prisma.FruitCreateArgs>(props: FruitCreateProps<T>): Promise<FruitCreateResponse<T>> {
        try {
            return await PrismaInstance.fruit.create(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Fruit Upsert (Class)
     */
    static async upsert<T extends Prisma.FruitUpsertArgs>(props: FruitUpsertProps<T>): Promise<FruitUpsertResponse<T>> {
        try {
            return await PrismaInstance.fruit.upsert(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Fruit Update (Class)
     */
    static async update<T extends Prisma.FruitUpdateArgs>(props: FruitUpdateProps<T>): Promise<FruitUpdateResponse<T>> {
        try {
            return await PrismaInstance.fruit.update(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Fruit Delete (Class)
     */
    static async delete<T extends Prisma.FruitDeleteArgs>(props: FruitDeleteProps<T>): Promise<FruitDeleteResponse<T>> {
        try {
            return await PrismaInstance.fruit.delete(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Fruit Create Many (Class)
     */
    static async createMany<T extends Prisma.FruitCreateManyArgs>(
        props: FruitCreateManyProps<T>,
    ): Promise<FruitCreateManyResponse> {
        try {
            return await PrismaInstance.fruit.createMany(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Fruit Update Many (Class)
     */
    static async updateMany<T extends Prisma.FruitUpdateManyArgs>(
        props: FruitUpdateManyProps<T>,
    ): Promise<FruitUpdateManyResponse> {
        try {
            return await PrismaInstance.fruit.updateMany(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Fruit Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.FruitDeleteManyArgs>(
        props: FruitDeleteManyProps<T>,
    ): Promise<FruitDeleteManyResponse> {
        try {
            return await PrismaInstance.fruit.deleteMany(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Fruit Find First (Class)
     */
    static async findFirst<T extends Prisma.FruitFindFirstArgs>(
        props: FruitFindFirstProps<T>,
    ): Promise<FruitFindFirstResponse<T>> {
        try {
            return await PrismaInstance.fruit.findFirst(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Fruit Find Unique (Class)
     */
    static async findUnique<T extends Prisma.FruitFindUniqueArgs>(
        props: FruitFindUniqueProps<T>,
    ): Promise<FruitFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.fruit.findUnique(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Fruit Find Many (Class)
     */
    static async findMany<T extends Prisma.FruitFindManyArgs>(
        props: FruitFindManyProps<T>,
    ): Promise<FruitFindManyResponse<T>> {
        try {
            return await PrismaInstance.fruit.findMany(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Fruit Count (Class)
     */
    static async count<T extends Prisma.FruitCountArgs>(props: FruitCountProps<T>): Promise<FruitCountResponse<T>> {
        try {
            return await PrismaInstance.fruit.count(props);
        } catch (error) {
            throw FruitService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
