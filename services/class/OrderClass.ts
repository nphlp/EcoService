import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    OrderCountProps,
    OrderCountResponse,
    OrderCreateManyProps,
    OrderCreateManyResponse,
    OrderCreateProps,
    OrderCreateResponse,
    OrderDeleteManyProps,
    OrderDeleteManyResponse,
    OrderDeleteProps,
    OrderDeleteResponse,
    OrderFindFirstProps,
    OrderFindFirstResponse,
    OrderFindManyProps,
    OrderFindManyResponse,
    OrderFindUniqueProps,
    OrderFindUniqueResponse,
    OrderUpdateManyProps,
    OrderUpdateManyResponse,
    OrderUpdateProps,
    OrderUpdateResponse,
    OrderUpsertProps,
    OrderUpsertResponse,
} from "@services/types";

/**
 * # Order Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Order Class
 */
export default class OrderService {
    /**
     * ## Order Create (Class)
     */
    static async create<T extends Prisma.OrderCreateArgs>(props: OrderCreateProps<T>): Promise<OrderCreateResponse<T>> {
        try {
            return await PrismaInstance.order.create(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Order Upsert (Class)
     */
    static async upsert<T extends Prisma.OrderUpsertArgs>(props: OrderUpsertProps<T>): Promise<OrderUpsertResponse<T>> {
        try {
            return await PrismaInstance.order.upsert(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Order Update (Class)
     */
    static async update<T extends Prisma.OrderUpdateArgs>(props: OrderUpdateProps<T>): Promise<OrderUpdateResponse<T>> {
        try {
            return await PrismaInstance.order.update(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Order Delete (Class)
     */
    static async delete<T extends Prisma.OrderDeleteArgs>(props: OrderDeleteProps<T>): Promise<OrderDeleteResponse<T>> {
        try {
            return await PrismaInstance.order.delete(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Order Create Many (Class)
     */
    static async createMany<T extends Prisma.OrderCreateManyArgs>(
        props: OrderCreateManyProps<T>,
    ): Promise<OrderCreateManyResponse> {
        try {
            return await PrismaInstance.order.createMany(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Order Update Many (Class)
     */
    static async updateMany<T extends Prisma.OrderUpdateManyArgs>(
        props: OrderUpdateManyProps<T>,
    ): Promise<OrderUpdateManyResponse> {
        try {
            return await PrismaInstance.order.updateMany(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Order Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.OrderDeleteManyArgs>(
        props: OrderDeleteManyProps<T>,
    ): Promise<OrderDeleteManyResponse> {
        try {
            return await PrismaInstance.order.deleteMany(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Order Find First (Class)
     */
    static async findFirst<T extends Prisma.OrderFindFirstArgs>(
        props: OrderFindFirstProps<T>,
    ): Promise<OrderFindFirstResponse<T>> {
        try {
            return await PrismaInstance.order.findFirst(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Order Find Unique (Class)
     */
    static async findUnique<T extends Prisma.OrderFindUniqueArgs>(
        props: OrderFindUniqueProps<T>,
    ): Promise<OrderFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.order.findUnique(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Order Find Many (Class)
     */
    static async findMany<T extends Prisma.OrderFindManyArgs>(
        props: OrderFindManyProps<T>,
    ): Promise<OrderFindManyResponse<T>> {
        try {
            return await PrismaInstance.order.findMany(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Order Count (Class)
     */
    static async count<T extends Prisma.OrderCountArgs>(props: OrderCountProps<T>): Promise<OrderCountResponse<T>> {
        try {
            return await PrismaInstance.order.count(props);
        } catch (error) {
            throw OrderService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
