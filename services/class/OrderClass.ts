import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # Order Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type OrderCreateProps<T extends Prisma.OrderCreateArgs> = Prisma.SelectSubset<T, Prisma.OrderCreateArgs>;
type OrderCreateResponse<T extends Prisma.OrderCreateArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type OrderUpsertProps<T extends Prisma.OrderUpsertArgs> = Prisma.SelectSubset<T, Prisma.OrderUpsertArgs>;
type OrderUpsertResponse<T extends Prisma.OrderUpsertArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type OrderUpdateProps<T extends Prisma.OrderUpdateArgs> = Prisma.SelectSubset<T, Prisma.OrderUpdateArgs>;
type OrderUpdateResponse<T extends Prisma.OrderUpdateArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type OrderDeleteProps<T extends Prisma.OrderDeleteArgs> = Prisma.SelectSubset<T, Prisma.OrderDeleteArgs>;
type OrderDeleteResponse<T extends Prisma.OrderDeleteArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type OrderCreateManyProps<T extends Prisma.OrderCreateManyArgs> = Prisma.SelectSubset<T, Prisma.OrderCreateManyArgs>;
type OrderCreateManyResponse = Prisma.BatchPayload;

// Update Many
type OrderUpdateManyProps<T extends Prisma.OrderUpdateManyArgs> = Prisma.SelectSubset<T, Prisma.OrderUpdateManyArgs>;
type OrderUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type OrderDeleteManyProps<T extends Prisma.OrderDeleteManyArgs> = Prisma.SelectSubset<T, Prisma.OrderDeleteManyArgs>;
type OrderDeleteManyResponse = Prisma.BatchPayload;

// Find First
type OrderFindFirstProps<T extends Prisma.OrderFindFirstArgs> = Prisma.SelectSubset<T, Prisma.OrderFindFirstArgs>;
type OrderFindFirstResponse<T extends Prisma.OrderFindFirstArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type OrderFindUniqueProps<T extends Prisma.OrderFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.OrderFindUniqueArgs>;
type OrderFindUniqueResponse<T extends Prisma.OrderFindUniqueArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type OrderFindManyProps<T extends Prisma.OrderFindManyArgs> = Prisma.SelectSubset<T, Prisma.OrderFindManyArgs>;
type OrderFindManyResponse<T extends Prisma.OrderFindManyArgs> = GetResult<
    Prisma.$OrderPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type OrderCountProps<T extends Prisma.OrderCountArgs> = Prisma.SelectSubset<T, Prisma.OrderCountArgs>;
type OrderCountResponse<T extends Prisma.OrderCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.OrderCountAggregateOutputType>
        : number;

/**
 * ## Order Class
 */
export default class OrderService {
    /**
     * ## Order Create (Class)
     */
    static async create<T extends Prisma.OrderCreateArgs>(
        props: OrderCreateProps<T>,
    ): Promise<ResponseFormat<OrderCreateResponse<T>>> {
        try {
            const order = await PrismaInstance.order.create(props);
            return { data: order };
        } catch (error) {
            return OrderService.error("create", error);
        }
    }

    /**
     * ## Order Upsert (Class)
     */
    static async upsert<T extends Prisma.OrderUpsertArgs>(
        props: OrderUpsertProps<T>,
    ): Promise<ResponseFormat<OrderUpsertResponse<T>>> {
        try {
            const order = await PrismaInstance.order.upsert(props);
            return { data: order };
        } catch (error) {
            return OrderService.error("upsert", error);
        }
    }

    /**
     * ## Order Update (Class)
     */
    static async update<T extends Prisma.OrderUpdateArgs>(
        props: OrderUpdateProps<T>,
    ): Promise<ResponseFormat<OrderUpdateResponse<T>>> {
        try {
            const order = await PrismaInstance.order.update(props);
            return { data: order };
        } catch (error) {
            return OrderService.error("update", error);
        }
    }

    /**
     * ## Order Delete (Class)
     */
    static async delete<T extends Prisma.OrderDeleteArgs>(
        props: OrderDeleteProps<T>,
    ): Promise<ResponseFormat<OrderDeleteResponse<T>>> {
        try {
            const order = await PrismaInstance.order.delete(props);
            return { data: order };
        } catch (error) {
            return OrderService.error("delete", error);
        }
    }

    /**
     * ## Order Create Many (Class)
     */
    static async createMany<T extends Prisma.OrderCreateManyArgs>(
        props: OrderCreateManyProps<T>,
    ): Promise<ResponseFormat<OrderCreateManyResponse>> {
        try {
            const result = await PrismaInstance.order.createMany(props);
            return { data: result };
        } catch (error) {
            return OrderService.error("createMany", error);
        }
    }

    /**
     * ## Order Update Many (Class)
     */
    static async updateMany<T extends Prisma.OrderUpdateManyArgs>(
        props: OrderUpdateManyProps<T>,
    ): Promise<ResponseFormat<OrderUpdateManyResponse>> {
        try {
            const result = await PrismaInstance.order.updateMany(props);
            return { data: result };
        } catch (error) {
            return OrderService.error("updateMany", error);
        }
    }

    /**
     * ## Order Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.OrderDeleteManyArgs>(
        props: OrderDeleteManyProps<T>,
    ): Promise<ResponseFormat<OrderDeleteManyResponse>> {
        try {
            const result = await PrismaInstance.order.deleteMany(props);
            return { data: result };
        } catch (error) {
            return OrderService.error("deleteMany", error);
        }
    }

    /**
     * ## Order Find First (Class)
     */
    static async findFirst<T extends Prisma.OrderFindFirstArgs>(
        props: OrderFindFirstProps<T>,
    ): Promise<ResponseFormat<OrderFindFirstResponse<T>>> {
        try {
            const order = await PrismaInstance.order.findFirst(props);
            return { data: order };
        } catch (error) {
            return OrderService.error("findFirst", error);
        }
    }

    /**
     * ## Order Find Unique (Class)
     */
    static async findUnique<T extends Prisma.OrderFindUniqueArgs>(
        props: OrderFindUniqueProps<T>,
    ): Promise<ResponseFormat<OrderFindUniqueResponse<T>>> {
        try {
            const order = await PrismaInstance.order.findUnique(props);
            return { data: order };
        } catch (error) {
            return OrderService.error("findUnique", error);
        }
    }

    /**
     * ## Order Find Many (Class)
     */
    static async findMany<T extends Prisma.OrderFindManyArgs>(
        props: OrderFindManyProps<T>,
    ): Promise<ResponseFormat<OrderFindManyResponse<T>>> {
        try {
            const orderList = await PrismaInstance.order.findMany(props);
            return { data: orderList };
        } catch (error) {
            return OrderService.error("findMany", error);
        }
    }

    /**
     * ## Order Count (Class)
     */
    static async count<T extends Prisma.OrderCountArgs>(
        props: OrderCountProps<T>,
    ): Promise<ResponseFormat<OrderCountResponse<T>>> {
        try {
            const orderAmount = await PrismaInstance.order.count(props);
            return { data: orderAmount };
        } catch (error) {
            return OrderService.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
