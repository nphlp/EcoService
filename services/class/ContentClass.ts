import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    ContentCountProps,
    ContentCountResponse,
    ContentCreateManyProps,
    ContentCreateManyResponse,
    ContentCreateProps,
    ContentCreateResponse,
    ContentDeleteManyProps,
    ContentDeleteManyResponse,
    ContentDeleteProps,
    ContentDeleteResponse,
    ContentFindFirstProps,
    ContentFindFirstResponse,
    ContentFindManyProps,
    ContentFindManyResponse,
    ContentFindUniqueProps,
    ContentFindUniqueResponse,
    ContentUpdateManyProps,
    ContentUpdateManyResponse,
    ContentUpdateProps,
    ContentUpdateResponse,
    ContentUpsertProps,
    ContentUpsertResponse,
} from "@services/types";

/**
 * # Content Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Content Class
 */
export default class ContentService {
    /**
     * ## Content Create (Class)
     */
    static async create<T extends Prisma.ContentCreateArgs>(
        props: ContentCreateProps<T>,
    ): Promise<ContentCreateResponse<T>> {
        try {
            return await PrismaInstance.content.create(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Content Upsert (Class)
     */
    static async upsert<T extends Prisma.ContentUpsertArgs>(
        props: ContentUpsertProps<T>,
    ): Promise<ContentUpsertResponse<T>> {
        try {
            return await PrismaInstance.content.upsert(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Content Update (Class)
     */
    static async update<T extends Prisma.ContentUpdateArgs>(
        props: ContentUpdateProps<T>,
    ): Promise<ContentUpdateResponse<T>> {
        try {
            return await PrismaInstance.content.update(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Content Delete (Class)
     */
    static async delete<T extends Prisma.ContentDeleteArgs>(
        props: ContentDeleteProps<T>,
    ): Promise<ContentDeleteResponse<T>> {
        try {
            return await PrismaInstance.content.delete(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Content Create Many (Class)
     */
    static async createMany<T extends Prisma.ContentCreateManyArgs>(
        props: ContentCreateManyProps<T>,
    ): Promise<ContentCreateManyResponse> {
        try {
            return await PrismaInstance.content.createMany(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Content Update Many (Class)
     */
    static async updateMany<T extends Prisma.ContentUpdateManyArgs>(
        props: ContentUpdateManyProps<T>,
    ): Promise<ContentUpdateManyResponse> {
        try {
            return await PrismaInstance.content.updateMany(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Content Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.ContentDeleteManyArgs>(
        props: ContentDeleteManyProps<T>,
    ): Promise<ContentDeleteManyResponse> {
        try {
            return await PrismaInstance.content.deleteMany(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Content Find First (Class)
     */
    static async findFirst<T extends Prisma.ContentFindFirstArgs>(
        props: ContentFindFirstProps<T>,
    ): Promise<ContentFindFirstResponse<T>> {
        try {
            return await PrismaInstance.content.findFirst(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Content Find Unique (Class)
     */
    static async findUnique<T extends Prisma.ContentFindUniqueArgs>(
        props: ContentFindUniqueProps<T>,
    ): Promise<ContentFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.content.findUnique(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Content Find Many (Class)
     */
    static async findMany<T extends Prisma.ContentFindManyArgs>(
        props: ContentFindManyProps<T>,
    ): Promise<ContentFindManyResponse<T>> {
        try {
            return await PrismaInstance.content.findMany(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Content Count (Class)
     */
    static async count<T extends Prisma.ContentCountArgs>(
        props: ContentCountProps<T>,
    ): Promise<ContentCountResponse<T>> {
        try {
            return await PrismaInstance.content.count(props);
        } catch (error) {
            throw ContentService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
