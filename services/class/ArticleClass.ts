import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    ArticleCountProps,
    ArticleCountResponse,
    ArticleCreateManyProps,
    ArticleCreateManyResponse,
    ArticleCreateProps,
    ArticleCreateResponse,
    ArticleDeleteManyProps,
    ArticleDeleteManyResponse,
    ArticleDeleteProps,
    ArticleDeleteResponse,
    ArticleFindFirstProps,
    ArticleFindFirstResponse,
    ArticleFindManyProps,
    ArticleFindManyResponse,
    ArticleFindUniqueProps,
    ArticleFindUniqueResponse,
    ArticleUpdateManyProps,
    ArticleUpdateManyResponse,
    ArticleUpdateProps,
    ArticleUpdateResponse,
    ArticleUpsertProps,
    ArticleUpsertResponse,
} from "@services/types";

/**
 * # Article Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Article Class
 */
export default class ArticleService {
    /**
     * ## Article Create (Class)
     */
    static async create<T extends Prisma.ArticleCreateArgs>(
        props: ArticleCreateProps<T>,
    ): Promise<ArticleCreateResponse<T>> {
        try {
            return await PrismaInstance.article.create(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Article Upsert (Class)
     */
    static async upsert<T extends Prisma.ArticleUpsertArgs>(
        props: ArticleUpsertProps<T>,
    ): Promise<ArticleUpsertResponse<T>> {
        try {
            return await PrismaInstance.article.upsert(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Article Update (Class)
     */
    static async update<T extends Prisma.ArticleUpdateArgs>(
        props: ArticleUpdateProps<T>,
    ): Promise<ArticleUpdateResponse<T>> {
        try {
            return await PrismaInstance.article.update(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Article Delete (Class)
     */
    static async delete<T extends Prisma.ArticleDeleteArgs>(
        props: ArticleDeleteProps<T>,
    ): Promise<ArticleDeleteResponse<T>> {
        try {
            return await PrismaInstance.article.delete(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Article Create Many (Class)
     */
    static async createMany<T extends Prisma.ArticleCreateManyArgs>(
        props: ArticleCreateManyProps<T>,
    ): Promise<ArticleCreateManyResponse> {
        try {
            return await PrismaInstance.article.createMany(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Article Update Many (Class)
     */
    static async updateMany<T extends Prisma.ArticleUpdateManyArgs>(
        props: ArticleUpdateManyProps<T>,
    ): Promise<ArticleUpdateManyResponse> {
        try {
            return await PrismaInstance.article.updateMany(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Article Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.ArticleDeleteManyArgs>(
        props: ArticleDeleteManyProps<T>,
    ): Promise<ArticleDeleteManyResponse> {
        try {
            return await PrismaInstance.article.deleteMany(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Article Find First (Class)
     */
    static async findFirst<T extends Prisma.ArticleFindFirstArgs>(
        props: ArticleFindFirstProps<T>,
    ): Promise<ArticleFindFirstResponse<T>> {
        try {
            return await PrismaInstance.article.findFirst(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Article Find Unique (Class)
     */
    static async findUnique<T extends Prisma.ArticleFindUniqueArgs>(
        props: ArticleFindUniqueProps<T>,
    ): Promise<ArticleFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.article.findUnique(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Article Find Many (Class)
     */
    static async findMany<T extends Prisma.ArticleFindManyArgs>(
        props: ArticleFindManyProps<T>,
    ): Promise<ArticleFindManyResponse<T>> {
        try {
            return await PrismaInstance.article.findMany(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Article Count (Class)
     */
    static async count<T extends Prisma.ArticleCountArgs>(
        props: ArticleCountProps<T>,
    ): Promise<ArticleCountResponse<T>> {
        try {
            return await PrismaInstance.article.count(props);
        } catch (error) {
            throw ArticleService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
