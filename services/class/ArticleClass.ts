import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # Article Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type ArticleCreateProps<T extends Prisma.ArticleCreateArgs> = Prisma.SelectSubset<T, Prisma.ArticleCreateArgs>;
type ArticleCreateResponse<T extends Prisma.ArticleCreateArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type ArticleUpsertProps<T extends Prisma.ArticleUpsertArgs> = Prisma.SelectSubset<T, Prisma.ArticleUpsertArgs>;
type ArticleUpsertResponse<T extends Prisma.ArticleUpsertArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type ArticleUpdateProps<T extends Prisma.ArticleUpdateArgs> = Prisma.SelectSubset<T, Prisma.ArticleUpdateArgs>;
type ArticleUpdateResponse<T extends Prisma.ArticleUpdateArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type ArticleDeleteProps<T extends Prisma.ArticleDeleteArgs> = Prisma.SelectSubset<T, Prisma.ArticleDeleteArgs>;
type ArticleDeleteResponse<T extends Prisma.ArticleDeleteArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type ArticleCreateManyProps<T extends Prisma.ArticleCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ArticleCreateManyArgs
>;
type ArticleCreateManyResponse = Prisma.BatchPayload;

// Update Many
type ArticleUpdateManyProps<T extends Prisma.ArticleUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ArticleUpdateManyArgs
>;
type ArticleUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type ArticleDeleteManyProps<T extends Prisma.ArticleDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.ArticleDeleteManyArgs
>;
type ArticleDeleteManyResponse = Prisma.BatchPayload;

// Find First
type ArticleFindFirstProps<T extends Prisma.ArticleFindFirstArgs> = Prisma.SelectSubset<T, Prisma.ArticleFindFirstArgs>;
type ArticleFindFirstResponse<T extends Prisma.ArticleFindFirstArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type ArticleFindUniqueProps<T extends Prisma.ArticleFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.ArticleFindUniqueArgs
>;
type ArticleFindUniqueResponse<T extends Prisma.ArticleFindUniqueArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type ArticleFindManyProps<T extends Prisma.ArticleFindManyArgs> = Prisma.SelectSubset<T, Prisma.ArticleFindManyArgs>;
type ArticleFindManyResponse<T extends Prisma.ArticleFindManyArgs> = GetResult<
    Prisma.$ArticlePayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type ArticleCountProps<T extends Prisma.ArticleCountArgs> = Prisma.SelectSubset<T, Prisma.ArticleCountArgs>;
type ArticleCountResponse<T extends Prisma.ArticleCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ArticleCountAggregateOutputType>
        : number;

/**
 * ## Article Class
 */
export default class ArticleService {
    /**
     * ## Article Create (Class)
     */
    static async create<T extends Prisma.ArticleCreateArgs>(
        props: ArticleCreateProps<T>,
    ): Promise<ResponseFormat<ArticleCreateResponse<T>>> {
        try {
            const article = await PrismaInstance.article.create(props);
            return { data: article };
        } catch (error) {
            return ArticleService.error("create", error);
        }
    }

    /**
     * ## Article Upsert (Class)
     */
    static async upsert<T extends Prisma.ArticleUpsertArgs>(
        props: ArticleUpsertProps<T>,
    ): Promise<ResponseFormat<ArticleUpsertResponse<T>>> {
        try {
            const article = await PrismaInstance.article.upsert(props);
            return { data: article };
        } catch (error) {
            return ArticleService.error("upsert", error);
        }
    }

    /**
     * ## Article Update (Class)
     */
    static async update<T extends Prisma.ArticleUpdateArgs>(
        props: ArticleUpdateProps<T>,
    ): Promise<ResponseFormat<ArticleUpdateResponse<T>>> {
        try {
            const article = await PrismaInstance.article.update(props);
            return { data: article };
        } catch (error) {
            return ArticleService.error("update", error);
        }
    }

    /**
     * ## Article Delete (Class)
     */
    static async delete<T extends Prisma.ArticleDeleteArgs>(
        props: ArticleDeleteProps<T>,
    ): Promise<ResponseFormat<ArticleDeleteResponse<T>>> {
        try {
            const article = await PrismaInstance.article.delete(props);
            return { data: article };
        } catch (error) {
            return ArticleService.error("delete", error);
        }
    }

    /**
     * ## Article Create Many (Class)
     */
    static async createMany<T extends Prisma.ArticleCreateManyArgs>(
        props: ArticleCreateManyProps<T>,
    ): Promise<ResponseFormat<ArticleCreateManyResponse>> {
        try {
            const result = await PrismaInstance.article.createMany(props);
            return { data: result };
        } catch (error) {
            return ArticleService.error("createMany", error);
        }
    }

    /**
     * ## Article Update Many (Class)
     */
    static async updateMany<T extends Prisma.ArticleUpdateManyArgs>(
        props: ArticleUpdateManyProps<T>,
    ): Promise<ResponseFormat<ArticleUpdateManyResponse>> {
        try {
            const result = await PrismaInstance.article.updateMany(props);
            return { data: result };
        } catch (error) {
            return ArticleService.error("updateMany", error);
        }
    }

    /**
     * ## Article Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.ArticleDeleteManyArgs>(
        props: ArticleDeleteManyProps<T>,
    ): Promise<ResponseFormat<ArticleDeleteManyResponse>> {
        try {
            const result = await PrismaInstance.article.deleteMany(props);
            return { data: result };
        } catch (error) {
            return ArticleService.error("deleteMany", error);
        }
    }

    /**
     * ## Article Find First (Class)
     */
    static async findFirst<T extends Prisma.ArticleFindFirstArgs>(
        props: ArticleFindFirstProps<T>,
    ): Promise<ResponseFormat<ArticleFindFirstResponse<T>>> {
        try {
            const article = await PrismaInstance.article.findFirst(props);
            return { data: article };
        } catch (error) {
            return ArticleService.error("findFirst", error);
        }
    }

    /**
     * ## Article Find Unique (Class)
     */
    static async findUnique<T extends Prisma.ArticleFindUniqueArgs>(
        props: ArticleFindUniqueProps<T>,
    ): Promise<ResponseFormat<ArticleFindUniqueResponse<T>>> {
        try {
            const article = await PrismaInstance.article.findUnique(props);
            return { data: article };
        } catch (error) {
            return ArticleService.error("findUnique", error);
        }
    }

    /**
     * ## Article Find Many (Class)
     */
    static async findMany<T extends Prisma.ArticleFindManyArgs>(
        props: ArticleFindManyProps<T>,
    ): Promise<ResponseFormat<ArticleFindManyResponse<T>>> {
        try {
            const articleList = await PrismaInstance.article.findMany(props);
            return { data: articleList };
        } catch (error) {
            return ArticleService.error("findMany", error);
        }
    }

    /**
     * ## Article Count (Class)
     */
    static async count<T extends Prisma.ArticleCountArgs>(
        props: ArticleCountProps<T>,
    ): Promise<ResponseFormat<ArticleCountResponse<T>>> {
        try {
            const articleAmount = await PrismaInstance.article.count(props);
            return { data: articleAmount };
        } catch (error) {
            return ArticleService.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
