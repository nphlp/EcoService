import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # Diy Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type DiyCreateProps<T extends Prisma.DiyCreateArgs> = Prisma.SelectSubset<T, Prisma.DiyCreateArgs>;
type DiyCreateResponse<T extends Prisma.DiyCreateArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type DiyUpsertProps<T extends Prisma.DiyUpsertArgs> = Prisma.SelectSubset<T, Prisma.DiyUpsertArgs>;
type DiyUpsertResponse<T extends Prisma.DiyUpsertArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type DiyUpdateProps<T extends Prisma.DiyUpdateArgs> = Prisma.SelectSubset<T, Prisma.DiyUpdateArgs>;
type DiyUpdateResponse<T extends Prisma.DiyUpdateArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type DiyDeleteProps<T extends Prisma.DiyDeleteArgs> = Prisma.SelectSubset<T, Prisma.DiyDeleteArgs>;
type DiyDeleteResponse<T extends Prisma.DiyDeleteArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type DiyCreateManyProps<T extends Prisma.DiyCreateManyArgs> = Prisma.SelectSubset<T, Prisma.DiyCreateManyArgs>;
type DiyCreateManyResponse = Prisma.BatchPayload;

// Update Many
type DiyUpdateManyProps<T extends Prisma.DiyUpdateManyArgs> = Prisma.SelectSubset<T, Prisma.DiyUpdateManyArgs>;
type DiyUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type DiyDeleteManyProps<T extends Prisma.DiyDeleteManyArgs> = Prisma.SelectSubset<T, Prisma.DiyDeleteManyArgs>;
type DiyDeleteManyResponse = Prisma.BatchPayload;

// Find First
type DiyFindFirstProps<T extends Prisma.DiyFindFirstArgs> = Prisma.SelectSubset<T, Prisma.DiyFindFirstArgs>;
type DiyFindFirstResponse<T extends Prisma.DiyFindFirstArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type DiyFindUniqueProps<T extends Prisma.DiyFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.DiyFindUniqueArgs>;
type DiyFindUniqueResponse<T extends Prisma.DiyFindUniqueArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type DiyFindManyProps<T extends Prisma.DiyFindManyArgs> = Prisma.SelectSubset<T, Prisma.DiyFindManyArgs>;
type DiyFindManyResponse<T extends Prisma.DiyFindManyArgs> = GetResult<
    Prisma.$DiyPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type DiyCountProps<T extends Prisma.DiyCountArgs> = Prisma.SelectSubset<T, Prisma.DiyCountArgs>;
type DiyCountResponse<T extends Prisma.DiyCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.DiyCountAggregateOutputType>
        : number;

/**
 * ## Diy Class
 */
export default class DiyService {
    /**
     * ## Diy Create (Class)
     */
    static async create<T extends Prisma.DiyCreateArgs>(
        props: DiyCreateProps<T>,
    ): Promise<ResponseFormat<DiyCreateResponse<T>>> {
        try {
            const diy = await PrismaInstance.diy.create(props);
            return { data: diy };
        } catch (error) {
            return DiyService.error("create", error);
        }
    }

    /**
     * ## Diy Upsert (Class)
     */
    static async upsert<T extends Prisma.DiyUpsertArgs>(
        props: DiyUpsertProps<T>,
    ): Promise<ResponseFormat<DiyUpsertResponse<T>>> {
        try {
            const diy = await PrismaInstance.diy.upsert(props);
            return { data: diy };
        } catch (error) {
            return DiyService.error("upsert", error);
        }
    }

    /**
     * ## Diy Update (Class)
     */
    static async update<T extends Prisma.DiyUpdateArgs>(
        props: DiyUpdateProps<T>,
    ): Promise<ResponseFormat<DiyUpdateResponse<T>>> {
        try {
            const diy = await PrismaInstance.diy.update(props);
            return { data: diy };
        } catch (error) {
            return DiyService.error("update", error);
        }
    }

    /**
     * ## Diy Delete (Class)
     */
    static async delete<T extends Prisma.DiyDeleteArgs>(
        props: DiyDeleteProps<T>,
    ): Promise<ResponseFormat<DiyDeleteResponse<T>>> {
        try {
            const diy = await PrismaInstance.diy.delete(props);
            return { data: diy };
        } catch (error) {
            return DiyService.error("delete", error);
        }
    }

    /**
     * ## Diy Create Many (Class)
     */
    static async createMany<T extends Prisma.DiyCreateManyArgs>(
        props: DiyCreateManyProps<T>,
    ): Promise<ResponseFormat<DiyCreateManyResponse>> {
        try {
            const result = await PrismaInstance.diy.createMany(props);
            return { data: result };
        } catch (error) {
            return DiyService.error("createMany", error);
        }
    }

    /**
     * ## Diy Update Many (Class)
     */
    static async updateMany<T extends Prisma.DiyUpdateManyArgs>(
        props: DiyUpdateManyProps<T>,
    ): Promise<ResponseFormat<DiyUpdateManyResponse>> {
        try {
            const result = await PrismaInstance.diy.updateMany(props);
            return { data: result };
        } catch (error) {
            return DiyService.error("updateMany", error);
        }
    }

    /**
     * ## Diy Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.DiyDeleteManyArgs>(
        props: DiyDeleteManyProps<T>,
    ): Promise<ResponseFormat<DiyDeleteManyResponse>> {
        try {
            const result = await PrismaInstance.diy.deleteMany(props);
            return { data: result };
        } catch (error) {
            return DiyService.error("deleteMany", error);
        }
    }

    /**
     * ## Diy Find First (Class)
     */
    static async findFirst<T extends Prisma.DiyFindFirstArgs>(
        props: DiyFindFirstProps<T>,
    ): Promise<ResponseFormat<DiyFindFirstResponse<T>>> {
        try {
            const diy = await PrismaInstance.diy.findFirst(props);
            return { data: diy };
        } catch (error) {
            return DiyService.error("findFirst", error);
        }
    }

    /**
     * ## Diy Find Unique (Class)
     */
    static async findUnique<T extends Prisma.DiyFindUniqueArgs>(
        props: DiyFindUniqueProps<T>,
    ): Promise<ResponseFormat<DiyFindUniqueResponse<T>>> {
        try {
            const diy = await PrismaInstance.diy.findUnique(props);
            return { data: diy };
        } catch (error) {
            return DiyService.error("findUnique", error);
        }
    }

    /**
     * ## Diy Find Many (Class)
     */
    static async findMany<T extends Prisma.DiyFindManyArgs>(
        props: DiyFindManyProps<T>,
    ): Promise<ResponseFormat<DiyFindManyResponse<T>>> {
        try {
            const diyList = await PrismaInstance.diy.findMany(props);
            return { data: diyList };
        } catch (error) {
            return DiyService.error("findMany", error);
        }
    }

    /**
     * ## Diy Count (Class)
     */
    static async count<T extends Prisma.DiyCountArgs>(
        props: DiyCountProps<T>,
    ): Promise<ResponseFormat<DiyCountResponse<T>>> {
        try {
            const diyAmount = await PrismaInstance.diy.count(props);
            return { data: diyAmount };
        } catch (error) {
            return DiyService.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
