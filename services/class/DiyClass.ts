import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    DiyCountProps,
    DiyCountResponse,
    DiyCreateManyProps,
    DiyCreateManyResponse,
    DiyCreateProps,
    DiyCreateResponse,
    DiyDeleteManyProps,
    DiyDeleteManyResponse,
    DiyDeleteProps,
    DiyDeleteResponse,
    DiyFindFirstProps,
    DiyFindFirstResponse,
    DiyFindManyProps,
    DiyFindManyResponse,
    DiyFindUniqueProps,
    DiyFindUniqueResponse,
    DiyUpdateManyProps,
    DiyUpdateManyResponse,
    DiyUpdateProps,
    DiyUpdateResponse,
    DiyUpsertProps,
    DiyUpsertResponse,
} from "@services/types";

/**
 * # Diy Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Diy Class
 */
export default class DiyService {
    /**
     * ## Diy Create (Class)
     */
    static async create<T extends Prisma.DiyCreateArgs>(props: DiyCreateProps<T>): Promise<DiyCreateResponse<T>> {
        try {
            return await PrismaInstance.diy.create(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Diy Upsert (Class)
     */
    static async upsert<T extends Prisma.DiyUpsertArgs>(props: DiyUpsertProps<T>): Promise<DiyUpsertResponse<T>> {
        try {
            return await PrismaInstance.diy.upsert(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Diy Update (Class)
     */
    static async update<T extends Prisma.DiyUpdateArgs>(props: DiyUpdateProps<T>): Promise<DiyUpdateResponse<T>> {
        try {
            return await PrismaInstance.diy.update(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Diy Delete (Class)
     */
    static async delete<T extends Prisma.DiyDeleteArgs>(props: DiyDeleteProps<T>): Promise<DiyDeleteResponse<T>> {
        try {
            return await PrismaInstance.diy.delete(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Diy Create Many (Class)
     */
    static async createMany<T extends Prisma.DiyCreateManyArgs>(
        props: DiyCreateManyProps<T>,
    ): Promise<DiyCreateManyResponse> {
        try {
            return await PrismaInstance.diy.createMany(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Diy Update Many (Class)
     */
    static async updateMany<T extends Prisma.DiyUpdateManyArgs>(
        props: DiyUpdateManyProps<T>,
    ): Promise<DiyUpdateManyResponse> {
        try {
            return await PrismaInstance.diy.updateMany(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Diy Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.DiyDeleteManyArgs>(
        props: DiyDeleteManyProps<T>,
    ): Promise<DiyDeleteManyResponse> {
        try {
            return await PrismaInstance.diy.deleteMany(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Diy Find First (Class)
     */
    static async findFirst<T extends Prisma.DiyFindFirstArgs>(
        props: DiyFindFirstProps<T>,
    ): Promise<DiyFindFirstResponse<T>> {
        try {
            return await PrismaInstance.diy.findFirst(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Diy Find Unique (Class)
     */
    static async findUnique<T extends Prisma.DiyFindUniqueArgs>(
        props: DiyFindUniqueProps<T>,
    ): Promise<DiyFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.diy.findUnique(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Diy Find Many (Class)
     */
    static async findMany<T extends Prisma.DiyFindManyArgs>(
        props: DiyFindManyProps<T>,
    ): Promise<DiyFindManyResponse<T>> {
        try {
            return await PrismaInstance.diy.findMany(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Diy Count (Class)
     */
    static async count<T extends Prisma.DiyCountArgs>(props: DiyCountProps<T>): Promise<DiyCountResponse<T>> {
        try {
            return await PrismaInstance.diy.count(props);
        } catch (error) {
            throw DiyService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
