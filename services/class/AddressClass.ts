import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # Address Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type AddressCreateProps<T extends Prisma.AddressCreateArgs> = Prisma.SelectSubset<T, Prisma.AddressCreateArgs>;
type AddressCreateResponse<T extends Prisma.AddressCreateArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type AddressUpsertProps<T extends Prisma.AddressUpsertArgs> = Prisma.SelectSubset<T, Prisma.AddressUpsertArgs>;
type AddressUpsertResponse<T extends Prisma.AddressUpsertArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type AddressUpdateProps<T extends Prisma.AddressUpdateArgs> = Prisma.SelectSubset<T, Prisma.AddressUpdateArgs>;
type AddressUpdateResponse<T extends Prisma.AddressUpdateArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type AddressDeleteProps<T extends Prisma.AddressDeleteArgs> = Prisma.SelectSubset<T, Prisma.AddressDeleteArgs>;
type AddressDeleteResponse<T extends Prisma.AddressDeleteArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type AddressCreateManyProps<T extends Prisma.AddressCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressCreateManyArgs
>;
type AddressCreateManyResponse = Prisma.BatchPayload;

// Update Many
type AddressUpdateManyProps<T extends Prisma.AddressUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressUpdateManyArgs
>;
type AddressUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type AddressDeleteManyProps<T extends Prisma.AddressDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressDeleteManyArgs
>;
type AddressDeleteManyResponse = Prisma.BatchPayload;

// Find First
type AddressFindFirstProps<T extends Prisma.AddressFindFirstArgs> = Prisma.SelectSubset<T, Prisma.AddressFindFirstArgs>;
type AddressFindFirstResponse<T extends Prisma.AddressFindFirstArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type AddressFindUniqueProps<T extends Prisma.AddressFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressFindUniqueArgs
>;
type AddressFindUniqueResponse<T extends Prisma.AddressFindUniqueArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type AddressFindManyProps<T extends Prisma.AddressFindManyArgs> = Prisma.SelectSubset<T, Prisma.AddressFindManyArgs>;
type AddressFindManyResponse<T extends Prisma.AddressFindManyArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type AddressCountProps<T extends Prisma.AddressCountArgs> = Prisma.SelectSubset<T, Prisma.AddressCountArgs>;
type AddressCountResponse<T extends Prisma.AddressCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.AddressCountAggregateOutputType>
        : number;

/**
 * ## Address Class
 */
export default class AddressService {
    /**
     * ## Address Create (Class)
     */
    static async create<T extends Prisma.AddressCreateArgs>(
        props: AddressCreateProps<T>,
    ): Promise<ResponseFormat<AddressCreateResponse<T>>> {
        try {
            const address = await PrismaInstance.address.create(props);
            return { data: address };
        } catch (error) {
            return AddressService.error("create", error);
        }
    }

    /**
     * ## Address Upsert (Class)
     */
    static async upsert<T extends Prisma.AddressUpsertArgs>(
        props: AddressUpsertProps<T>,
    ): Promise<ResponseFormat<AddressUpsertResponse<T>>> {
        try {
            const address = await PrismaInstance.address.upsert(props);
            return { data: address };
        } catch (error) {
            return AddressService.error("upsert", error);
        }
    }

    /**
     * ## Address Update (Class)
     */
    static async update<T extends Prisma.AddressUpdateArgs>(
        props: AddressUpdateProps<T>,
    ): Promise<ResponseFormat<AddressUpdateResponse<T>>> {
        try {
            const address = await PrismaInstance.address.update(props);
            return { data: address };
        } catch (error) {
            return AddressService.error("update", error);
        }
    }

    /**
     * ## Address Delete (Class)
     */
    static async delete<T extends Prisma.AddressDeleteArgs>(
        props: AddressDeleteProps<T>,
    ): Promise<ResponseFormat<AddressDeleteResponse<T>>> {
        try {
            const address = await PrismaInstance.address.delete(props);
            return { data: address };
        } catch (error) {
            return AddressService.error("delete", error);
        }
    }

    /**
     * ## Address Create Many (Class)
     */
    static async createMany<T extends Prisma.AddressCreateManyArgs>(
        props: AddressCreateManyProps<T>,
    ): Promise<ResponseFormat<AddressCreateManyResponse>> {
        try {
            const result = await PrismaInstance.address.createMany(props);
            return { data: result };
        } catch (error) {
            return AddressService.error("createMany", error);
        }
    }

    /**
     * ## Address Update Many (Class)
     */
    static async updateMany<T extends Prisma.AddressUpdateManyArgs>(
        props: AddressUpdateManyProps<T>,
    ): Promise<ResponseFormat<AddressUpdateManyResponse>> {
        try {
            const result = await PrismaInstance.address.updateMany(props);
            return { data: result };
        } catch (error) {
            return AddressService.error("updateMany", error);
        }
    }

    /**
     * ## Address Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.AddressDeleteManyArgs>(
        props: AddressDeleteManyProps<T>,
    ): Promise<ResponseFormat<AddressDeleteManyResponse>> {
        try {
            const result = await PrismaInstance.address.deleteMany(props);
            return { data: result };
        } catch (error) {
            return AddressService.error("deleteMany", error);
        }
    }

    /**
     * ## Address Find First (Class)
     */
    static async findFirst<T extends Prisma.AddressFindFirstArgs>(
        props: AddressFindFirstProps<T>,
    ): Promise<ResponseFormat<AddressFindFirstResponse<T>>> {
        try {
            const address = await PrismaInstance.address.findFirst(props);
            return { data: address };
        } catch (error) {
            return AddressService.error("findFirst", error);
        }
    }

    /**
     * ## Address Find Unique (Class)
     */
    static async findUnique<T extends Prisma.AddressFindUniqueArgs>(
        props: AddressFindUniqueProps<T>,
    ): Promise<ResponseFormat<AddressFindUniqueResponse<T>>> {
        try {
            const address = await PrismaInstance.address.findUnique(props);
            return { data: address };
        } catch (error) {
            return AddressService.error("findUnique", error);
        }
    }

    /**
     * ## Address Find Many (Class)
     */
    static async findMany<T extends Prisma.AddressFindManyArgs>(
        props: AddressFindManyProps<T>,
    ): Promise<ResponseFormat<AddressFindManyResponse<T>>> {
        try {
            const addressList = await PrismaInstance.address.findMany(props);
            return { data: addressList };
        } catch (error) {
            return AddressService.error("findMany", error);
        }
    }

    /**
     * ## Address Count (Class)
     */
    static async count<T extends Prisma.AddressCountArgs>(
        props: AddressCountProps<T>,
    ): Promise<ResponseFormat<AddressCountResponse<T>>> {
        try {
            const addressAmount = await PrismaInstance.address.count(props);
            return { data: addressAmount };
        } catch (error) {
            return AddressService.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
