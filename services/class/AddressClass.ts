import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    AddressCountProps,
    AddressCountResponse,
    AddressCreateManyProps,
    AddressCreateManyResponse,
    AddressCreateProps,
    AddressCreateResponse,
    AddressDeleteManyProps,
    AddressDeleteManyResponse,
    AddressDeleteProps,
    AddressDeleteResponse,
    AddressFindFirstProps,
    AddressFindFirstResponse,
    AddressFindManyProps,
    AddressFindManyResponse,
    AddressFindUniqueProps,
    AddressFindUniqueResponse,
    AddressUpdateManyProps,
    AddressUpdateManyResponse,
    AddressUpdateProps,
    AddressUpdateResponse,
    AddressUpsertProps,
    AddressUpsertResponse,
} from "@services/types";

/**
 * # Address Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## Address Class
 */
export default class AddressService {
    /**
     * ## Address Create (Class)
     */
    static async create<T extends Prisma.AddressCreateArgs>(
        props: AddressCreateProps<T>,
    ): Promise<AddressCreateResponse<T>> {
        try {
            return await PrismaInstance.address.create(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Address Upsert (Class)
     */
    static async upsert<T extends Prisma.AddressUpsertArgs>(
        props: AddressUpsertProps<T>,
    ): Promise<AddressUpsertResponse<T>> {
        try {
            return await PrismaInstance.address.upsert(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Address Update (Class)
     */
    static async update<T extends Prisma.AddressUpdateArgs>(
        props: AddressUpdateProps<T>,
    ): Promise<AddressUpdateResponse<T>> {
        try {
            return await PrismaInstance.address.update(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Address Delete (Class)
     */
    static async delete<T extends Prisma.AddressDeleteArgs>(
        props: AddressDeleteProps<T>,
    ): Promise<AddressDeleteResponse<T>> {
        try {
            return await PrismaInstance.address.delete(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Address Create Many (Class)
     */
    static async createMany<T extends Prisma.AddressCreateManyArgs>(
        props: AddressCreateManyProps<T>,
    ): Promise<AddressCreateManyResponse> {
        try {
            return await PrismaInstance.address.createMany(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Address Update Many (Class)
     */
    static async updateMany<T extends Prisma.AddressUpdateManyArgs>(
        props: AddressUpdateManyProps<T>,
    ): Promise<AddressUpdateManyResponse> {
        try {
            return await PrismaInstance.address.updateMany(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Address Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.AddressDeleteManyArgs>(
        props: AddressDeleteManyProps<T>,
    ): Promise<AddressDeleteManyResponse> {
        try {
            return await PrismaInstance.address.deleteMany(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Address Find First (Class)
     */
    static async findFirst<T extends Prisma.AddressFindFirstArgs>(
        props: AddressFindFirstProps<T>,
    ): Promise<AddressFindFirstResponse<T>> {
        try {
            return await PrismaInstance.address.findFirst(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Address Find Unique (Class)
     */
    static async findUnique<T extends Prisma.AddressFindUniqueArgs>(
        props: AddressFindUniqueProps<T>,
    ): Promise<AddressFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.address.findUnique(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Address Find Many (Class)
     */
    static async findMany<T extends Prisma.AddressFindManyArgs>(
        props: AddressFindManyProps<T>,
    ): Promise<AddressFindManyResponse<T>> {
        try {
            return await PrismaInstance.address.findMany(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Address Count (Class)
     */
    static async count<T extends Prisma.AddressCountArgs>(
        props: AddressCountProps<T>,
    ): Promise<AddressCountResponse<T>> {
        try {
            return await PrismaInstance.address.count(props);
        } catch (error) {
            throw AddressService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
