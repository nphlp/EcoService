import QuantityService from "@class/QuantityClass";
import { Prisma } from "@prisma/client";
import {
    QuantityCountProps,
    QuantityCountResponse,
    QuantityFindFirstProps,
    QuantityFindFirstResponse,
    QuantityFindManyProps,
    QuantityFindManyResponse,
    QuantityFindUniqueProps,
    QuantityFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Quantity Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const QuantityFindFirstCached = async <T extends Prisma.QuantityFindFirstArgs>(
    params: QuantityFindFirstProps<T>,
): Promise<QuantityFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All quantity services
        "quantity",
        // All findFirst services
        "findFirst",
        // All quantity findFirst services
        "quantity-findFirst",
        // This specific services
        hashParamsForCacheKey("quantity-findFirst", params),
    );

    return await QuantityService.findFirst(params);
};

export const QuantityFindUniqueCached = async <T extends Prisma.QuantityFindUniqueArgs>(
    params: QuantityFindUniqueProps<T>,
): Promise<QuantityFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All quantity services
        "quantity",
        // All findUnique services
        "findUnique",
        // All quantity findUnique services
        "quantity-findUnique",
        // This specific services
        hashParamsForCacheKey("quantity-findUnique", params),
    );

    return await QuantityService.findUnique(params);
};

export const QuantityFindManyCached = async <T extends Prisma.QuantityFindManyArgs>(
    params: QuantityFindManyProps<T>,
): Promise<QuantityFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All quantity services
        "quantity",
        // All findMany services
        "findMany",
        // All quantity findMany services
        "quantity-findMany",
        // This specific services
        hashParamsForCacheKey("quantity-findMany", params),
    );

    return await QuantityService.findMany(params);
};

export const QuantityCountCached = async <T extends Prisma.QuantityCountArgs>(
    params: QuantityCountProps<T>,
): Promise<QuantityCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All quantity services
        "quantity",
        // All count services
        "count",
        // All quantity count services
        "quantity-count",
        // This specific services
        hashParamsForCacheKey("quantity-count", params),
    );

    return await QuantityService.count(params);
};
