import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Quantity Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type QuantityFindFirstProps<T extends Prisma.QuantityFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityFindFirstArgs
>;
type QuantityFindFirstResponse<T extends Prisma.QuantityFindFirstArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type QuantityFindUniqueProps<T extends Prisma.QuantityFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityFindUniqueArgs
>;
type QuantityFindUniqueResponse<T extends Prisma.QuantityFindUniqueArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type QuantityFindManyProps<T extends Prisma.QuantityFindManyArgs> = Prisma.SelectSubset<T, Prisma.QuantityFindManyArgs>;
type QuantityFindManyResponse<T extends Prisma.QuantityFindManyArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type QuantityCountProps<T extends Prisma.QuantityCountArgs> = Prisma.SelectSubset<T, Prisma.QuantityCountArgs>;
type QuantityCountResponse<T extends Prisma.QuantityCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.QuantityCountAggregateOutputType>
        : number;

// ========== Services ========== //

export const QuantityFindFirstCached = async <T extends Prisma.QuantityFindFirstArgs>(
    params: QuantityFindFirstProps<T>,
): Promise<QuantityFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All quantity services
        "quantity",
        // All findFirst services
        "findFirst",
        // All quantity findFirst services
        "quantity-findFirst",
        // This specific services
        hashParamsForCacheKey("quantity-findFirst", params),
    );

    return PrismaInstance.quantity.findFirst(params);
};

export const QuantityFindUniqueCached = async <T extends Prisma.QuantityFindUniqueArgs>(
    params: QuantityFindUniqueProps<T>,
): Promise<QuantityFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All quantity services
        "quantity",
        // All findUnique services
        "findUnique",
        // All quantity findUnique services
        "quantity-findUnique",
        // This specific services
        hashParamsForCacheKey("quantity-findUnique", params),
    );

    return PrismaInstance.quantity.findUnique(params);
};

export const QuantityFindManyCached = async <T extends Prisma.QuantityFindManyArgs>(
    params: QuantityFindManyProps<T>,
): Promise<QuantityFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All quantity services
        "quantity",
        // All findMany services
        "findMany",
        // All quantity findMany services
        "quantity-findMany",
        // This specific services
        hashParamsForCacheKey("quantity-findMany", params),
    );

    return PrismaInstance.quantity.findMany(params);
};

export const QuantityCountCached = async <T extends Prisma.QuantityCountArgs>(
    params: QuantityCountProps<T>,
): Promise<QuantityCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All quantity services
        "quantity",
        // All count services
        "count",
        // All quantity count services
        "quantity-count",
        // This specific services
        hashParamsForCacheKey("quantity-count", params),
    );

    return PrismaInstance.quantity.count(params);
};
