import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # User Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type UserFindFirstProps<T extends Prisma.UserFindFirstArgs> = Prisma.SelectSubset<T, Prisma.UserFindFirstArgs>;
type UserFindFirstResponse<T extends Prisma.UserFindFirstArgs> = GetResult<
    Prisma.$UserPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type UserFindUniqueProps<T extends Prisma.UserFindUniqueArgs> = Prisma.SelectSubset<T, Prisma.UserFindUniqueArgs>;
type UserFindUniqueResponse<T extends Prisma.UserFindUniqueArgs> = GetResult<
    Prisma.$UserPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type UserFindManyProps<T extends Prisma.UserFindManyArgs> = Prisma.SelectSubset<T, Prisma.UserFindManyArgs>;
type UserFindManyResponse<T extends Prisma.UserFindManyArgs> = GetResult<
    Prisma.$UserPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type UserCountProps<T extends Prisma.UserCountArgs> = Prisma.SelectSubset<T, Prisma.UserCountArgs>;
type UserCountResponse<T extends Prisma.UserCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.UserCountAggregateOutputType>
        : number;

// ========== Services ========== //

export const UserFindFirstCached = async <T extends Prisma.UserFindFirstArgs>(
    params: UserFindFirstProps<T>,
): Promise<UserFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All user services
        "user",
        // All findFirst services
        "findFirst",
        // All user findFirst services
        "user-findFirst",
        // This specific services
        hashParamsForCacheKey("user-findFirst", params),
    );

    return PrismaInstance.user.findFirst(params);
};

export const UserFindUniqueCached = async <T extends Prisma.UserFindUniqueArgs>(
    params: UserFindUniqueProps<T>,
): Promise<UserFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All user services
        "user",
        // All findUnique services
        "findUnique",
        // All user findUnique services
        "user-findUnique",
        // This specific services
        hashParamsForCacheKey("user-findUnique", params),
    );

    return PrismaInstance.user.findUnique(params);
};

export const UserFindManyCached = async <T extends Prisma.UserFindManyArgs>(
    params: UserFindManyProps<T>,
): Promise<UserFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All user services
        "user",
        // All findMany services
        "findMany",
        // All user findMany services
        "user-findMany",
        // This specific services
        hashParamsForCacheKey("user-findMany", params),
    );

    return PrismaInstance.user.findMany(params);
};

export const UserCountCached = async <T extends Prisma.UserCountArgs>(
    params: UserCountProps<T>,
): Promise<UserCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All user services
        "user",
        // All count services
        "count",
        // All user count services
        "user-count",
        // This specific services
        hashParamsForCacheKey("user-count", params),
    );

    return PrismaInstance.user.count(params);
};
