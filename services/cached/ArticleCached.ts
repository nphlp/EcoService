import ArticleService from "@class/ArticleClass";
import { Prisma } from "@prisma/client";
import {
    ArticleCountProps,
    ArticleCountResponse,
    ArticleFindFirstProps,
    ArticleFindFirstResponse,
    ArticleFindManyProps,
    ArticleFindManyResponse,
    ArticleFindUniqueProps,
    ArticleFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Article Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const ArticleFindFirstCached = async <T extends Prisma.ArticleFindFirstArgs>(
    params: ArticleFindFirstProps<T>,
): Promise<ArticleFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All article services
        "article",
        // All findFirst services
        "findFirst",
        // All article findFirst services
        "article-findFirst",
        // This specific services
        hashParamsForCacheKey("article-findFirst", params),
    );

    return await ArticleService.findFirst(params);
};

export const ArticleFindUniqueCached = async <T extends Prisma.ArticleFindUniqueArgs>(
    params: ArticleFindUniqueProps<T>,
): Promise<ArticleFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All article services
        "article",
        // All findUnique services
        "findUnique",
        // All article findUnique services
        "article-findUnique",
        // This specific services
        hashParamsForCacheKey("article-findUnique", params),
    );

    return await ArticleService.findUnique(params);
};

export const ArticleFindManyCached = async <T extends Prisma.ArticleFindManyArgs>(
    params: ArticleFindManyProps<T>,
): Promise<ArticleFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All article services
        "article",
        // All findMany services
        "findMany",
        // All article findMany services
        "article-findMany",
        // This specific services
        hashParamsForCacheKey("article-findMany", params),
    );

    return await ArticleService.findMany(params);
};

export const ArticleCountCached = async <T extends Prisma.ArticleCountArgs>(
    params: ArticleCountProps<T>,
): Promise<ArticleCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All article services
        "article",
        // All count services
        "count",
        // All article count services
        "article-count",
        // This specific services
        hashParamsForCacheKey("article-count", params),
    );

    return await ArticleService.count(params);
};
