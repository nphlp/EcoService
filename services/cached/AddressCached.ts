import AddressService from "@class/AddressClass";
import { Prisma } from "@prisma/client";
import {
    AddressCountProps,
    AddressCountResponse,
    AddressFindFirstProps,
    AddressFindFirstResponse,
    AddressFindManyProps,
    AddressFindManyResponse,
    AddressFindUniqueProps,
    AddressFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Address Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const AddressFindFirstCached = async <T extends Prisma.AddressFindFirstArgs>(
    params: AddressFindFirstProps<T>,
): Promise<AddressFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All address services
        "address",
        // All findFirst services
        "findFirst",
        // All address findFirst services
        "address-findFirst",
        // This specific services
        hashParamsForCacheKey("address-findFirst", params),
    );

    return await AddressService.findFirst(params);
};

export const AddressFindUniqueCached = async <T extends Prisma.AddressFindUniqueArgs>(
    params: AddressFindUniqueProps<T>,
): Promise<AddressFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All address services
        "address",
        // All findUnique services
        "findUnique",
        // All address findUnique services
        "address-findUnique",
        // This specific services
        hashParamsForCacheKey("address-findUnique", params),
    );

    return await AddressService.findUnique(params);
};

export const AddressFindManyCached = async <T extends Prisma.AddressFindManyArgs>(
    params: AddressFindManyProps<T>,
): Promise<AddressFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All address services
        "address",
        // All findMany services
        "findMany",
        // All address findMany services
        "address-findMany",
        // This specific services
        hashParamsForCacheKey("address-findMany", params),
    );

    return await AddressService.findMany(params);
};

export const AddressCountCached = async <T extends Prisma.AddressCountArgs>(
    params: AddressCountProps<T>,
): Promise<AddressCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All address services
        "address",
        // All count services
        "count",
        // All address count services
        "address-count",
        // This specific services
        hashParamsForCacheKey("address-count", params),
    );

    return await AddressService.count(params);
};
