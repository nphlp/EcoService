import FruitService from "@class/FruitClass";
import { Prisma } from "@prisma/client";
import {
    FruitCountProps,
    FruitCountResponse,
    FruitFindFirstProps,
    FruitFindFirstResponse,
    FruitFindManyProps,
    FruitFindManyResponse,
    FruitFindUniqueProps,
    FruitFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Fruit Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const FruitFindFirstCached = async <T extends Prisma.FruitFindFirstArgs>(
    params: FruitFindFirstProps<T>,
): Promise<FruitFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All fruit services
        "fruit",
        // All findFirst services
        "findFirst",
        // All fruit findFirst services
        "fruit-findFirst",
        // This specific services
        hashParamsForCacheKey("fruit-findFirst", params),
    );

    return await FruitService.findFirst(params);
};

export const FruitFindUniqueCached = async <T extends Prisma.FruitFindUniqueArgs>(
    params: FruitFindUniqueProps<T>,
): Promise<FruitFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All fruit services
        "fruit",
        // All findUnique services
        "findUnique",
        // All fruit findUnique services
        "fruit-findUnique",
        // This specific services
        hashParamsForCacheKey("fruit-findUnique", params),
    );

    return await FruitService.findUnique(params);
};

export const FruitFindManyCached = async <T extends Prisma.FruitFindManyArgs>(
    params: FruitFindManyProps<T>,
): Promise<FruitFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All fruit services
        "fruit",
        // All findMany services
        "findMany",
        // All fruit findMany services
        "fruit-findMany",
        // This specific services
        hashParamsForCacheKey("fruit-findMany", params),
    );

    return await FruitService.findMany(params);
};

export const FruitCountCached = async <T extends Prisma.FruitCountArgs>(
    params: FruitCountProps<T>,
): Promise<FruitCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All fruit services
        "fruit",
        // All count services
        "count",
        // All fruit count services
        "fruit-count",
        // This specific services
        hashParamsForCacheKey("fruit-count", params),
    );

    return await FruitService.count(params);
};
