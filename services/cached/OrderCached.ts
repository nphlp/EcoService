import OrderService from "@class/OrderClass";
import { Prisma } from "@prisma/client";
import {
    OrderCountProps,
    OrderCountResponse,
    OrderFindFirstProps,
    OrderFindFirstResponse,
    OrderFindManyProps,
    OrderFindManyResponse,
    OrderFindUniqueProps,
    OrderFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Order Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const OrderFindFirstCached = async <T extends Prisma.OrderFindFirstArgs>(
    params: OrderFindFirstProps<T>,
): Promise<OrderFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All order services
        "order",
        // All findFirst services
        "findFirst",
        // All order findFirst services
        "order-findFirst",
        // This specific services
        hashParamsForCacheKey("order-findFirst", params),
    );

    return await OrderService.findFirst(params);
};

export const OrderFindUniqueCached = async <T extends Prisma.OrderFindUniqueArgs>(
    params: OrderFindUniqueProps<T>,
): Promise<OrderFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All order services
        "order",
        // All findUnique services
        "findUnique",
        // All order findUnique services
        "order-findUnique",
        // This specific services
        hashParamsForCacheKey("order-findUnique", params),
    );

    return await OrderService.findUnique(params);
};

export const OrderFindManyCached = async <T extends Prisma.OrderFindManyArgs>(
    params: OrderFindManyProps<T>,
): Promise<OrderFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All order services
        "order",
        // All findMany services
        "findMany",
        // All order findMany services
        "order-findMany",
        // This specific services
        hashParamsForCacheKey("order-findMany", params),
    );

    return await OrderService.findMany(params);
};

export const OrderCountCached = async <T extends Prisma.OrderCountArgs>(
    params: OrderCountProps<T>,
): Promise<OrderCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All order services
        "order",
        // All count services
        "count",
        // All order count services
        "order-count",
        // This specific services
        hashParamsForCacheKey("order-count", params),
    );

    return await OrderService.count(params);
};
