import DiyService from "@class/DiyClass";
import { Prisma } from "@prisma/client";
import {
    DiyCountProps,
    DiyCountResponse,
    DiyFindFirstProps,
    DiyFindFirstResponse,
    DiyFindManyProps,
    DiyFindManyResponse,
    DiyFindUniqueProps,
    DiyFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Diy Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const DiyFindFirstCached = async <T extends Prisma.DiyFindFirstArgs>(
    params: DiyFindFirstProps<T>,
): Promise<DiyFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All diy services
        "diy",
        // All findFirst services
        "findFirst",
        // All diy findFirst services
        "diy-findFirst",
        // This specific services
        hashParamsForCacheKey("diy-findFirst", params),
    );

    return await DiyService.findFirst(params);
};

export const DiyFindUniqueCached = async <T extends Prisma.DiyFindUniqueArgs>(
    params: DiyFindUniqueProps<T>,
): Promise<DiyFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All diy services
        "diy",
        // All findUnique services
        "findUnique",
        // All diy findUnique services
        "diy-findUnique",
        // This specific services
        hashParamsForCacheKey("diy-findUnique", params),
    );

    return await DiyService.findUnique(params);
};

export const DiyFindManyCached = async <T extends Prisma.DiyFindManyArgs>(
    params: DiyFindManyProps<T>,
): Promise<DiyFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All diy services
        "diy",
        // All findMany services
        "findMany",
        // All diy findMany services
        "diy-findMany",
        // This specific services
        hashParamsForCacheKey("diy-findMany", params),
    );

    return await DiyService.findMany(params);
};

export const DiyCountCached = async <T extends Prisma.DiyCountArgs>(
    params: DiyCountProps<T>,
): Promise<DiyCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All diy services
        "diy",
        // All count services
        "count",
        // All diy count services
        "diy-count",
        // This specific services
        hashParamsForCacheKey("diy-count", params),
    );

    return await DiyService.count(params);
};
