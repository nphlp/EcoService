import CategoryService from "@class/CategoryClass";
import { Prisma } from "@prisma/client";
import {
    CategoryCountProps,
    CategoryCountResponse,
    CategoryFindFirstProps,
    CategoryFindFirstResponse,
    CategoryFindManyProps,
    CategoryFindManyResponse,
    CategoryFindUniqueProps,
    CategoryFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # Category Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const CategoryFindFirstCached = async <T extends Prisma.CategoryFindFirstArgs>(
    params: CategoryFindFirstProps<T>,
): Promise<CategoryFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All category services
        "category",
        // All findFirst services
        "findFirst",
        // All category findFirst services
        "category-findFirst",
        // This specific services
        hashParamsForCacheKey("category-findFirst", params),
    );

    return await CategoryService.findFirst(params);
};

export const CategoryFindUniqueCached = async <T extends Prisma.CategoryFindUniqueArgs>(
    params: CategoryFindUniqueProps<T>,
): Promise<CategoryFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All category services
        "category",
        // All findUnique services
        "findUnique",
        // All category findUnique services
        "category-findUnique",
        // This specific services
        hashParamsForCacheKey("category-findUnique", params),
    );

    return await CategoryService.findUnique(params);
};

export const CategoryFindManyCached = async <T extends Prisma.CategoryFindManyArgs>(
    params: CategoryFindManyProps<T>,
): Promise<CategoryFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All category services
        "category",
        // All findMany services
        "findMany",
        // All category findMany services
        "category-findMany",
        // This specific services
        hashParamsForCacheKey("category-findMany", params),
    );

    return await CategoryService.findMany(params);
};

export const CategoryCountCached = async <T extends Prisma.CategoryCountArgs>(
    params: CategoryCountProps<T>,
): Promise<CategoryCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All category services
        "category",
        // All count services
        "count",
        // All category count services
        "category-count",
        // This specific services
        hashParamsForCacheKey("category-count", params),
    );

    return await CategoryService.count(params);
};
