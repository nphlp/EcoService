import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    QuantityCountCached,
    QuantityFindFirstCached,
    QuantityFindManyCached,
    QuantityFindUniqueCached,
} from "@services/cached";

/**
 * # Quantity Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type QuantityFindFirstProps<T extends Prisma.QuantityFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityFindFirstArgs
>;
type QuantityFindFirstResponse<T extends Prisma.QuantityFindFirstArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type QuantityFindUniqueProps<T extends Prisma.QuantityFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.QuantityFindUniqueArgs
>;
type QuantityFindUniqueResponse<T extends Prisma.QuantityFindUniqueArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type QuantityFindManyProps<T extends Prisma.QuantityFindManyArgs> = Prisma.SelectSubset<T, Prisma.QuantityFindManyArgs>;
type QuantityFindManyResponse<T extends Prisma.QuantityFindManyArgs> = GetResult<
    Prisma.$QuantityPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type QuantityCountProps<T extends Prisma.QuantityCountArgs> = Prisma.SelectSubset<T, Prisma.QuantityCountArgs>;
type QuantityCountResponse<T extends Prisma.QuantityCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.QuantityCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Quantity Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const QuantityFindFirstServer = async <T extends Prisma.QuantityFindFirstArgs>(
    params: QuantityFindFirstProps<T>,
): Promise<QuantityFindFirstResponse<T>> => {
    return await QuantityFindFirstCached(params);
};

/**
 * ## Quantity Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const QuantityFindUniqueServer = async <T extends Prisma.QuantityFindUniqueArgs>(
    params: QuantityFindUniqueProps<T>,
): Promise<QuantityFindUniqueResponse<T>> => {
    return await QuantityFindUniqueCached(params);
};

/**
 * ## Quantity Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const QuantityFindManyServer = async <T extends Prisma.QuantityFindManyArgs>(
    params: QuantityFindManyProps<T>,
): Promise<QuantityFindManyResponse<T>> => {
    return await QuantityFindManyCached(params);
};

/**
 * ## Quantity Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const QuantityCountServer = async <T extends Prisma.QuantityCountArgs>(
    params: QuantityCountProps<T>,
): Promise<QuantityCountResponse<T>> => {
    return await QuantityCountCached(params);
};
