import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    AddressCountCached,
    AddressFindFirstCached,
    AddressFindManyCached,
    AddressFindUniqueCached,
} from "@services/cached";

/**
 * # Address Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type AddressFindFirstProps<T extends Prisma.AddressFindFirstArgs> = Prisma.SelectSubset<T, Prisma.AddressFindFirstArgs>;
type AddressFindFirstResponse<T extends Prisma.AddressFindFirstArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type AddressFindUniqueProps<T extends Prisma.AddressFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.AddressFindUniqueArgs
>;
type AddressFindUniqueResponse<T extends Prisma.AddressFindUniqueArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type AddressFindManyProps<T extends Prisma.AddressFindManyArgs> = Prisma.SelectSubset<T, Prisma.AddressFindManyArgs>;
type AddressFindManyResponse<T extends Prisma.AddressFindManyArgs> = GetResult<
    Prisma.$AddressPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type AddressCountProps<T extends Prisma.AddressCountArgs> = Prisma.SelectSubset<T, Prisma.AddressCountArgs>;
type AddressCountResponse<T extends Prisma.AddressCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.AddressCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Address Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const AddressFindFirstServer = async <T extends Prisma.AddressFindFirstArgs>(
    params: AddressFindFirstProps<T>,
): Promise<AddressFindFirstResponse<T>> => {
    return await AddressFindFirstCached(params);
};

/**
 * ## Address Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const AddressFindUniqueServer = async <T extends Prisma.AddressFindUniqueArgs>(
    params: AddressFindUniqueProps<T>,
): Promise<AddressFindUniqueResponse<T>> => {
    return await AddressFindUniqueCached(params);
};

/**
 * ## Address Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const AddressFindManyServer = async <T extends Prisma.AddressFindManyArgs>(
    params: AddressFindManyProps<T>,
): Promise<AddressFindManyResponse<T>> => {
    return await AddressFindManyCached(params);
};

/**
 * ## Address Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const AddressCountServer = async <T extends Prisma.AddressCountArgs>(
    params: AddressCountProps<T>,
): Promise<AddressCountResponse<T>> => {
    return await AddressCountCached(params);
};
