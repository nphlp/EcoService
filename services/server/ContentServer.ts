import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    ContentCountCached,
    ContentFindFirstCached,
    ContentFindManyCached,
    ContentFindUniqueCached,
} from "@services/cached";

/**
 * # Content Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type ContentFindFirstProps<T extends Prisma.ContentFindFirstArgs> = Prisma.SelectSubset<T, Prisma.ContentFindFirstArgs>;
type ContentFindFirstResponse<T extends Prisma.ContentFindFirstArgs> = GetResult<
    Prisma.$ContentPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type ContentFindUniqueProps<T extends Prisma.ContentFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.ContentFindUniqueArgs
>;
type ContentFindUniqueResponse<T extends Prisma.ContentFindUniqueArgs> = GetResult<
    Prisma.$ContentPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type ContentFindManyProps<T extends Prisma.ContentFindManyArgs> = Prisma.SelectSubset<T, Prisma.ContentFindManyArgs>;
type ContentFindManyResponse<T extends Prisma.ContentFindManyArgs> = GetResult<
    Prisma.$ContentPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type ContentCountProps<T extends Prisma.ContentCountArgs> = Prisma.SelectSubset<T, Prisma.ContentCountArgs>;
type ContentCountResponse<T extends Prisma.ContentCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ContentCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Content Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ContentFindFirstServer = async <T extends Prisma.ContentFindFirstArgs>(
    params: ContentFindFirstProps<T>,
): Promise<ContentFindFirstResponse<T>> => {
    return await ContentFindFirstCached(params);
};

/**
 * ## Content Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ContentFindUniqueServer = async <T extends Prisma.ContentFindUniqueArgs>(
    params: ContentFindUniqueProps<T>,
): Promise<ContentFindUniqueResponse<T>> => {
    return await ContentFindUniqueCached(params);
};

/**
 * ## Content Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ContentFindManyServer = async <T extends Prisma.ContentFindManyArgs>(
    params: ContentFindManyProps<T>,
): Promise<ContentFindManyResponse<T>> => {
    return await ContentFindManyCached(params);
};

/**
 * ## Content Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ContentCountServer = async <T extends Prisma.ContentCountArgs>(
    params: ContentCountProps<T>,
): Promise<ContentCountResponse<T>> => {
    return await ContentCountCached(params);
};
