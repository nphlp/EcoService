import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    CategoryCountCached,
    CategoryFindFirstCached,
    CategoryFindManyCached,
    CategoryFindUniqueCached,
} from "@services/cached";

/**
 * # Category Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type CategoryFindFirstProps<T extends Prisma.CategoryFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryFindFirstArgs
>;
type CategoryFindFirstResponse<T extends Prisma.CategoryFindFirstArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type CategoryFindUniqueProps<T extends Prisma.CategoryFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.CategoryFindUniqueArgs
>;
type CategoryFindUniqueResponse<T extends Prisma.CategoryFindUniqueArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type CategoryFindManyProps<T extends Prisma.CategoryFindManyArgs> = Prisma.SelectSubset<T, Prisma.CategoryFindManyArgs>;
type CategoryFindManyResponse<T extends Prisma.CategoryFindManyArgs> = GetResult<
    Prisma.$CategoryPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type CategoryCountProps<T extends Prisma.CategoryCountArgs> = Prisma.SelectSubset<T, Prisma.CategoryCountArgs>;
type CategoryCountResponse<T extends Prisma.CategoryCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.CategoryCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Category Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const CategoryFindFirstServer = async <T extends Prisma.CategoryFindFirstArgs>(
    params: CategoryFindFirstProps<T>,
): Promise<CategoryFindFirstResponse<T>> => {
    return await CategoryFindFirstCached(params);
};

/**
 * ## Category Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const CategoryFindUniqueServer = async <T extends Prisma.CategoryFindUniqueArgs>(
    params: CategoryFindUniqueProps<T>,
): Promise<CategoryFindUniqueResponse<T>> => {
    return await CategoryFindUniqueCached(params);
};

/**
 * ## Category Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const CategoryFindManyServer = async <T extends Prisma.CategoryFindManyArgs>(
    params: CategoryFindManyProps<T>,
): Promise<CategoryFindManyResponse<T>> => {
    return await CategoryFindManyCached(params);
};

/**
 * ## Category Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const CategoryCountServer = async <T extends Prisma.CategoryCountArgs>(
    params: CategoryCountProps<T>,
): Promise<CategoryCountResponse<T>> => {
    return await CategoryCountCached(params);
};
