import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    ProductCountCached,
    ProductFindFirstCached,
    ProductFindManyCached,
    ProductFindUniqueCached,
} from "@services/cached";

/**
 * # Product Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type ProductFindFirstProps<T extends Prisma.ProductFindFirstArgs> = Prisma.SelectSubset<T, Prisma.ProductFindFirstArgs>;
type ProductFindFirstResponse<T extends Prisma.ProductFindFirstArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type ProductFindUniqueProps<T extends Prisma.ProductFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.ProductFindUniqueArgs
>;
type ProductFindUniqueResponse<T extends Prisma.ProductFindUniqueArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type ProductFindManyProps<T extends Prisma.ProductFindManyArgs> = Prisma.SelectSubset<T, Prisma.ProductFindManyArgs>;
type ProductFindManyResponse<T extends Prisma.ProductFindManyArgs> = GetResult<
    Prisma.$ProductPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type ProductCountProps<T extends Prisma.ProductCountArgs> = Prisma.SelectSubset<T, Prisma.ProductCountArgs>;
type ProductCountResponse<T extends Prisma.ProductCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.ProductCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## Product Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ProductFindFirstServer = async <T extends Prisma.ProductFindFirstArgs>(
    params: ProductFindFirstProps<T>,
): Promise<ProductFindFirstResponse<T>> => {
    return await ProductFindFirstCached(params);
};

/**
 * ## Product Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ProductFindUniqueServer = async <T extends Prisma.ProductFindUniqueArgs>(
    params: ProductFindUniqueProps<T>,
): Promise<ProductFindUniqueResponse<T>> => {
    return await ProductFindUniqueCached(params);
};

/**
 * ## Product Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ProductFindManyServer = async <T extends Prisma.ProductFindManyArgs>(
    params: ProductFindManyProps<T>,
): Promise<ProductFindManyResponse<T>> => {
    return await ProductFindManyCached(params);
};

/**
 * ## Product Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const ProductCountServer = async <T extends Prisma.ProductCountArgs>(
    params: ProductCountProps<T>,
): Promise<ProductCountResponse<T>> => {
    return await ProductCountCached(params);
};
