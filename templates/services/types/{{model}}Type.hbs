// ============== Types ============== //

import { Prisma } from "@prisma/client";
import { {{modelName}}CreateArgsSchema, {{modelName}}CreateManyArgsSchema, {{modelName}}DeleteArgsSchema, {{modelName}}DeleteManyArgsSchema, {{modelName}}FindFirstArgsSchema, {{modelName}}FindManyArgsSchema, {{modelName}}FindUniqueArgsSchema, {{modelName}}OrderByWithRelationInputSchema, {{modelName}}Schema, {{modelName}}UpdateArgsSchema, {{modelName}}UpdateManyArgsSchema, {{modelName}}UpsertArgsSchema, {{modelName}}WhereInputSchema, {{modelName}}WhereUniqueInputSchema, {{#if hasRelations}}{{modelName}}WithRelationsSchema{{/if}} } from "@prisma/zod";
{{#if hasRelations}}
import {{modelName}}IncludeSchema from "@prisma/zod/inputTypeSchemas/{{modelName}}IncludeSchema";
{{/if}}
import { z, ZodType } from "zod";

// ============== Model Types ============== //

export type {{modelName}}Model = z.infer<typeof {{modelName}}Schema>;
{{#if hasRelations}}
export type {{modelName}}RelationsOptional = z.infer<typeof {{modelName}}Schema> & z.infer<typeof {{modelName}}IncludeSchema>;
export type {{modelName}}RelationsComplete = z.infer<typeof {{modelName}}WithRelationsSchema>;
{{/if}}
export type {{modelName}}Count = number;

// ============== Props Types ============== //

// Single mutations
export type {{modelName}}CreateProps = Prisma.{{modelName}}CreateArgs;
export type {{modelName}}UpsertProps = Prisma.{{modelName}}UpsertArgs;
export type {{modelName}}UpdateProps = Prisma.{{modelName}}UpdateArgs;
export type {{modelName}}DeleteProps = Prisma.{{modelName}}DeleteArgs;

// Multiple mutations
export type {{modelName}}CreateManyProps = Prisma.{{modelName}}CreateManyArgs;
export type {{modelName}}UpdateManyProps = Prisma.{{modelName}}UpdateManyArgs;
export type {{modelName}}DeleteManyProps = Prisma.{{modelName}}DeleteManyArgs;

// Single queries
export type {{modelName}}FindFirstProps = Prisma.{{modelName}}FindFirstArgs;
export type {{modelName}}FindUniqueProps = Prisma.{{modelName}}FindUniqueArgs;
export type {{modelName}}FindManyProps = Prisma.{{modelName}}FindManyArgs;

// Multiple queries
export type {{modelName}}CountProps = Prisma.{{modelName}}CountArgs;

// ============== Schema Types ============== //

// Single mutations
export const {{modelName}}CreateSchema: ZodType<{{modelName}}CreateProps> = {{modelName}}CreateArgsSchema;
export const {{modelName}}UpsertSchema: ZodType<{{modelName}}UpsertProps> = {{modelName}}UpsertArgsSchema;
export const {{modelName}}UpdateSchema: ZodType<{{modelName}}UpdateProps> = {{modelName}}UpdateArgsSchema;
export const {{modelName}}DeleteSchema: ZodType<{{modelName}}DeleteProps> = {{modelName}}DeleteArgsSchema;

// Multiple mutations
export const {{modelName}}CreateManySchema: ZodType<{{modelName}}CreateManyProps> = {{modelName}}CreateManyArgsSchema;
export const {{modelName}}UpdateManySchema: ZodType<{{modelName}}UpdateManyProps> = {{modelName}}UpdateManyArgsSchema;
export const {{modelName}}DeleteManySchema: ZodType<{{modelName}}DeleteManyProps> = {{modelName}}DeleteManyArgsSchema;

// Single queries
export const {{modelName}}FindFirstSchema: ZodType<{{modelName}}FindFirstProps> = {{modelName}}FindFirstArgsSchema;
export const {{modelName}}FindUniqueSchema: ZodType<{{modelName}}FindUniqueProps> = {{modelName}}FindUniqueArgsSchema;
export const {{modelName}}FindManySchema: ZodType<{{modelName}}FindManyProps> = {{modelName}}FindManyArgsSchema;

// Aggregate queries
export const {{modelName}}CountSchema: ZodType<{{modelName}}CountProps> =  z.object({
    where: z.lazy(() => {{modelName}}WhereInputSchema).optional(),
    orderBy: z.union([
        z.lazy(() => {{modelName}}OrderByWithRelationInputSchema),
        z.array(z.lazy(() => {{modelName}}OrderByWithRelationInputSchema))
    ]).optional(),
    cursor: z.lazy(() => {{modelName}}WhereUniqueInputSchema).optional(),
    take: z.number().optional(),
    skip: z.number().optional(),
    select: z.union([z.literal(true), z.record(z.string(), z.boolean())]).optional()
});

// ============== Response Types ============== //

// Single mutations
export type {{modelName}}CreateResponse<T extends {{modelName}}CreateProps> = Prisma.{{modelName}}GetPayload<T>;
export type {{modelName}}UpsertResponse<T extends {{modelName}}UpsertProps> = Prisma.{{modelName}}GetPayload<T>;
export type {{modelName}}UpdateResponse<T extends {{modelName}}UpdateProps> = Prisma.{{modelName}}GetPayload<T>;
export type {{modelName}}DeleteResponse<T extends {{modelName}}DeleteProps> = Prisma.{{modelName}}GetPayload<T>;

// Multiple mutations
export type {{modelName}}CreateManyResponse = { count: number };
export type {{modelName}}UpdateManyResponse = { count: number };
export type {{modelName}}DeleteManyResponse = { count: number };

// Single queries
export type {{modelName}}FindFirstResponse<T extends {{modelName}}FindFirstProps> = Prisma.{{modelName}}GetPayload<T> | null;
export type {{modelName}}FindUniqueResponse<T extends {{modelName}}FindUniqueProps> = Prisma.{{modelName}}GetPayload<T> | null;
export type {{modelName}}FindManyResponse<T extends {{modelName}}FindManyProps> = Prisma.{{modelName}}GetPayload<T>[];

// Aggregate queries
export type {{modelName}}CountResponse = {{modelName}}Count;
