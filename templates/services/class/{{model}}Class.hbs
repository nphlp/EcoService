import PrismaInstance from "@lib/prisma";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { {{modelName}}Count, {{modelName}}CountProps, {{modelName}}CountResponse, {{modelName}}CountSchema, {{modelName}}CreateManyProps, {{modelName}}CreateManyResponse, {{modelName}}CreateManySchema, {{modelName}}CreateProps, {{modelName}}CreateResponse, {{modelName}}CreateSchema, {{modelName}}DeleteManyProps, {{modelName}}DeleteManyResponse, {{modelName}}DeleteManySchema, {{modelName}}DeleteProps, {{modelName}}DeleteResponse, {{modelName}}DeleteSchema, {{modelName}}FindFirstProps, {{modelName}}FindFirstResponse, {{modelName}}FindFirstSchema, {{modelName}}FindManyProps, {{modelName}}FindManyResponse, {{modelName}}FindManySchema, {{modelName}}FindUniqueProps, {{modelName}}FindUniqueResponse, {{modelName}}FindUniqueSchema, {{modelName}}UpdateManyProps, {{modelName}}UpdateManyResponse, {{modelName}}UpdateManySchema, {{modelName}}UpdateProps, {{modelName}}UpdateResponse, {{modelName}}UpdateSchema, {{modelName}}UpsertProps, {{modelName}}UpsertResponse, {{modelName}}UpsertSchema } from "@services/types/{{modelName}}Type";
import { ResponseFormat } from "@utils/FetchConfig";
import { ZodError } from "zod";

export default class {{modelName}}Service {

    // ========== Single mutations ========== //

    static async create<T extends {{modelName}}CreateProps>(props: T): Promise<ResponseFormat<{{modelName}}CreateResponse<T>>> {
        try {
            const parsedProps = {{modelName}}CreateSchema.parse(props);
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.create(parsedProps);
            return { data: {{modelNameLower}} as {{modelName}}CreateResponse<T> };
        } catch (error) {
            return {{modelName}}Service.error("create", error);
        }
    }

    static async upsert<T extends {{modelName}}UpsertProps>(props: T): Promise<ResponseFormat<{{modelName}}UpsertResponse<T>>> {
        try {
            const parsedProps = {{modelName}}UpsertSchema.parse(props);
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.upsert(parsedProps);
            return { data: {{modelNameLower}} as {{modelName}}UpsertResponse<T> };
        } catch (error) {
            return {{modelName}}Service.error("upsert", error);
        }
    }

    static async update<T extends {{modelName}}UpdateProps>(props: T): Promise<ResponseFormat<{{modelName}}UpdateResponse<T>>> {
        try {
            const parsedProps = {{modelName}}UpdateSchema.parse(props);
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.update(parsedProps);
            return { data: {{modelNameLower}} as {{modelName}}UpdateResponse<T> };
        } catch (error) {
            return {{modelName}}Service.error("update", error);
        }
    }

    static async delete<T extends {{modelName}}DeleteProps>(props: T): Promise<ResponseFormat<{{modelName}}DeleteResponse<T>>> {
        try {
            const parsedProps = {{modelName}}DeleteSchema.parse(props);
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.delete(parsedProps);
            return { data: {{modelNameLower}} as {{modelName}}DeleteResponse<T> };
        } catch (error) {
            return {{modelName}}Service.error("delete", error);
        }
    }

    // ========== Multiple mutations ========== //

    static async createMany(props: {{modelName}}CreateManyProps): Promise<ResponseFormat<{{modelName}}CreateManyResponse>> {
        try {
            const parsedProps = {{modelName}}CreateManySchema.parse(props);
            const result = await PrismaInstance.{{modelNameLower}}.createMany(parsedProps);
            return { data: result };
        } catch (error) {
            return {{modelName}}Service.error("createMany", error);
        }
    }

    static async updateMany(props: {{modelName}}UpdateManyProps): Promise<ResponseFormat<{{modelName}}UpdateManyResponse>> {
        try {
            const parsedProps = {{modelName}}UpdateManySchema.parse(props);
            const result = await PrismaInstance.{{modelNameLower}}.updateMany(parsedProps);
            return { data: result };
        } catch (error) {
            return {{modelName}}Service.error("updateMany", error);
        }
    }

    static async deleteMany(props: {{modelName}}DeleteManyProps): Promise<ResponseFormat<{{modelName}}DeleteManyResponse>> {
        try {
            const parsedProps = {{modelName}}DeleteManySchema.parse(props);
            const result = await PrismaInstance.{{modelNameLower}}.deleteMany(parsedProps);
            return { data: result };
        } catch (error) {
            return {{modelName}}Service.error("deleteMany", error);
        }
    }

    // ========== Single queries ========== //

    static async findFirst<T extends {{modelName}}FindFirstProps>(props: T): Promise<ResponseFormat<{{modelName}}FindFirstResponse<T>>> {
        try {
            const parsedProps = {{modelName}}FindFirstSchema.parse(props);
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.findFirst(parsedProps);
            return { data: {{modelNameLower}} as {{modelName}}FindFirstResponse<T> };
        } catch (error) {
            return {{modelName}}Service.error("findFirst", error);
        }
    }

    static async findUnique<T extends {{modelName}}FindUniqueProps>(props: T): Promise<ResponseFormat<{{modelName}}FindUniqueResponse<T>>> {
        try {
            const parsedProps = {{modelName}}FindUniqueSchema.parse(props);
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.findUnique(parsedProps);
            return { data: {{modelNameLower}} as {{modelName}}FindUniqueResponse<T> };
        } catch (error) {
            return {{modelName}}Service.error("findUnique", error);
        }
    }

    static async findMany<T extends {{modelName}}FindManyProps>(props: T): Promise<ResponseFormat<{{modelName}}FindManyResponse<T>>> {
        try {
            const parsedProps = {{modelName}}FindManySchema.parse(props);
            const { skip = 0, take = 10 } = parsedProps;
            const {{modelNameLower}}List = await PrismaInstance.{{modelNameLower}}.findMany({ skip, take, ...parsedProps });
            return { data: {{modelNameLower}}List as {{modelName}}FindManyResponse<T> };
        } catch (error) {
            return {{modelName}}Service.error("findMany", error);
        }
    }

    // ========== Aggregate queries ========== //

    static async count(props: {{modelName}}CountProps): Promise<ResponseFormat<{{modelName}}CountResponse>> {
        try {
            const parsedProps = {{modelName}}CountSchema.parse(props);
            const {{modelNameLower}}Amount: {{modelName}}Count = await PrismaInstance.{{modelNameLower}}.count(parsedProps);
            return { data: {{modelNameLower}}Amount };
        } catch (error) {
            return {{modelName}}Service.error("count", error);
        }
    }

    // ========== Error handling ========== //

    static async error(methodName: string, error: unknown): Promise<{error: string}> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof ZodError){
                const zodMessage = serviceName + " -> " + methodName + " -> Invalid Zod params -> " + error.message;
                console.error(zodMessage);
                throw new Error(zodMessage);
            } else if (error instanceof PrismaClientKnownRequestError){
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
