import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import { ResponseFormat } from "@utils/FetchConfig";

/**
 * # {{modelName}} Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/\{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type {{modelName}}CreateProps<T extends Prisma.{{modelName}}CreateArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}CreateArgs>;
type {{modelName}}CreateResponse<T extends Prisma.{{modelName}}CreateArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type {{modelName}}UpsertProps<T extends Prisma.{{modelName}}UpsertArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}UpsertArgs>;
type {{modelName}}UpsertResponse<T extends Prisma.{{modelName}}UpsertArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type {{modelName}}UpdateProps<T extends Prisma.{{modelName}}UpdateArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}UpdateArgs>;
type {{modelName}}UpdateResponse<T extends Prisma.{{modelName}}UpdateArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type {{modelName}}DeleteProps<T extends Prisma.{{modelName}}DeleteArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}DeleteArgs>;
type {{modelName}}DeleteResponse<T extends Prisma.{{modelName}}DeleteArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type {{modelName}}CreateManyProps<T extends Prisma.{{modelName}}CreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}CreateManyArgs
>;
type {{modelName}}CreateManyResponse = Prisma.BatchPayload;

// Update Many
type {{modelName}}UpdateManyProps<T extends Prisma.{{modelName}}UpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}UpdateManyArgs
>;
type {{modelName}}UpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type {{modelName}}DeleteManyProps<T extends Prisma.{{modelName}}DeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}DeleteManyArgs
>;
type {{modelName}}DeleteManyResponse = Prisma.BatchPayload;

// Find First
type {{modelName}}FindFirstProps<T extends Prisma.{{modelName}}FindFirstArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}FindFirstArgs>;
type {{modelName}}FindFirstResponse<T extends Prisma.{{modelName}}FindFirstArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type {{modelName}}FindUniqueProps<T extends Prisma.{{modelName}}FindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.{{modelName}}FindUniqueArgs
>;
type {{modelName}}FindUniqueResponse<T extends Prisma.{{modelName}}FindUniqueArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type {{modelName}}FindManyProps<T extends Prisma.{{modelName}}FindManyArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}FindManyArgs>;
type {{modelName}}FindManyResponse<T extends Prisma.{{modelName}}FindManyArgs> = GetResult<
    Prisma.${{modelName}}Payload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type {{modelName}}CountProps<T extends Prisma.{{modelName}}CountArgs> = Prisma.SelectSubset<T, Prisma.{{modelName}}CountArgs>;
type {{modelName}}CountResponse<T extends Prisma.{{modelName}}CountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.{{modelName}}CountAggregateOutputType>
        : number;

/**
 * ## {{modelName}} Class
 */
export default class {{modelName}}Service {
    /**
     * ## {{modelName}} Create (Class)
     */
    static async create<T extends Prisma.{{modelName}}CreateArgs>(
        props: {{modelName}}CreateProps<T>,
    ): Promise<ResponseFormat<{{modelName}}CreateResponse<T>>> {
        try {
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.create(props);
            return { data: {{modelNameLower}} };
        } catch (error) {
            return {{modelName}}Service.error("create", error);
        }
    }

    /**
     * ## {{modelName}} Upsert (Class)
     */
    static async upsert<T extends Prisma.{{modelName}}UpsertArgs>(
        props: {{modelName}}UpsertProps<T>,
    ): Promise<ResponseFormat<{{modelName}}UpsertResponse<T>>> {
        try {
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.upsert(props);
            return { data: {{modelNameLower}} };
        } catch (error) {
            return {{modelName}}Service.error("upsert", error);
        }
    }

    /**
     * ## {{modelName}} Update (Class)
     */
    static async update<T extends Prisma.{{modelName}}UpdateArgs>(
        props: {{modelName}}UpdateProps<T>,
    ): Promise<ResponseFormat<{{modelName}}UpdateResponse<T>>> {
        try {
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.update(props);
            return { data: {{modelNameLower}} };
        } catch (error) {
            return {{modelName}}Service.error("update", error);
        }
    }

    /**
     * ## {{modelName}} Delete (Class)
     */
    static async delete<T extends Prisma.{{modelName}}DeleteArgs>(
        props: {{modelName}}DeleteProps<T>,
    ): Promise<ResponseFormat<{{modelName}}DeleteResponse<T>>> {
        try {
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.delete(props);
            return { data: {{modelNameLower}} };
        } catch (error) {
            return {{modelName}}Service.error("delete", error);
        }
    }

    /**
     * ## {{modelName}} Create Many (Class)
     */
    static async createMany<T extends Prisma.{{modelName}}CreateManyArgs>(
        props: {{modelName}}CreateManyProps<T>,
    ): Promise<ResponseFormat<{{modelName}}CreateManyResponse>> {
        try {
            const result = await PrismaInstance.{{modelNameLower}}.createMany(props);
            return { data: result };
        } catch (error) {
            return {{modelName}}Service.error("createMany", error);
        }
    }

    /**
     * ## {{modelName}} Update Many (Class)
     */
    static async updateMany<T extends Prisma.{{modelName}}UpdateManyArgs>(
        props: {{modelName}}UpdateManyProps<T>,
    ): Promise<ResponseFormat<{{modelName}}UpdateManyResponse>> {
        try {
            const result = await PrismaInstance.{{modelNameLower}}.updateMany(props);
            return { data: result };
        } catch (error) {
            return {{modelName}}Service.error("updateMany", error);
        }
    }

    /**
     * ## {{modelName}} Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.{{modelName}}DeleteManyArgs>(
        props: {{modelName}}DeleteManyProps<T>,
    ): Promise<ResponseFormat<{{modelName}}DeleteManyResponse>> {
        try {
            const result = await PrismaInstance.{{modelNameLower}}.deleteMany(props);
            return { data: result };
        } catch (error) {
            return {{modelName}}Service.error("deleteMany", error);
        }
    }

    /**
     * ## {{modelName}} Find First (Class)
     */
    static async findFirst<T extends Prisma.{{modelName}}FindFirstArgs>(
        props: {{modelName}}FindFirstProps<T>,
    ): Promise<ResponseFormat<{{modelName}}FindFirstResponse<T>>> {
        try {
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.findFirst(props);
            return { data: {{modelNameLower}} };
        } catch (error) {
            return {{modelName}}Service.error("findFirst", error);
        }
    }

    /**
     * ## {{modelName}} Find Unique (Class)
     */
    static async findUnique<T extends Prisma.{{modelName}}FindUniqueArgs>(
        props: {{modelName}}FindUniqueProps<T>,
    ): Promise<ResponseFormat<{{modelName}}FindUniqueResponse<T>>> {
        try {
            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.findUnique(props);
            return { data: {{modelNameLower}} };
        } catch (error) {
            return {{modelName}}Service.error("findUnique", error);
        }
    }

    /**
     * ## {{modelName}} Find Many (Class)
     */
    static async findMany<T extends Prisma.{{modelName}}FindManyArgs>(
        props: {{modelName}}FindManyProps<T>,
    ): Promise<ResponseFormat<{{modelName}}FindManyResponse<T>>> {
        try {
            const {{modelNameLower}}List = await PrismaInstance.{{modelNameLower}}.findMany(props);
            return { data: {{modelNameLower}}List };
        } catch (error) {
            return {{modelName}}Service.error("findMany", error);
        }
    }

    /**
     * ## {{modelName}} Count (Class)
     */
    static async count<T extends Prisma.{{modelName}}CountArgs>(
        props: {{modelName}}CountProps<T>,
    ): Promise<ResponseFormat<{{modelName}}CountResponse<T>>> {
        try {
            const {{modelNameLower}}Amount = await PrismaInstance.{{modelNameLower}}.count(props);
            return { data: {{modelNameLower}}Amount };
        } catch (error) {
            return {{modelName}}Service.error("count", error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(methodName: string, error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const serviceName = this.constructor.name;
            const message = (error as Error).message;
            if (error instanceof PrismaClientKnownRequestError) {
                const prismaMessage = serviceName + " -> " + methodName + " -> Prisma error -> " + error.message;
                console.error(prismaMessage);
                throw new Error(prismaMessage);
            } else {
                const errorMessage = serviceName + " -> " + methodName + " -> " + message;
                console.error(errorMessage);
                throw new Error(errorMessage);
            }
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
}
