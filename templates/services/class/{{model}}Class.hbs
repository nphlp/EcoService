import PrismaInstance from "@lib/prisma";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { {{modelName}}Count, Count{{modelName}}Props, Count{{modelName}}Response, Create{{modelName}}Props, Create{{modelName}}Response, Delete{{modelName}}Props, Delete{{modelName}}Response, FindMany{{modelName}}Props, FindMany{{modelName}}Response, FindUnique{{modelName}}Props, FindUnique{{modelName}}Response, Update{{modelName}}Props, Update{{modelName}}Response, Upsert{{modelName}}Props, Upsert{{modelName}}Response, count{{modelName}}Schema, create{{modelName}}Schema, delete{{modelName}}Schema, select{{modelName}}Schema, selectMany{{modelName}}Schema, update{{modelName}}Schema, upsert{{modelName}}Schema } from "@services/types/{{modelName}}Type";
import { ResponseFormat } from "@utils/FetchConfig";
import { ZodError } from "zod";

export default class {{modelName}}Service {
    static async create<T extends Create{{modelName}}Props>(props: T): Promise<ResponseFormat<Create{{modelName}}Response<T>>> {
        try {
            const { data{{#if hasRelations}}, include{{/if}}, omit, select } = create{{modelName}}Schema.parse(props);

            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.create({
                data,
                {{#if hasRelations}}...(include && { include }),{{/if}}
                ...(omit && { omit }),
                ...(select && { select }),
            });

            return { data: {{modelNameLower}} as Create{{modelName}}Response<T> };
        } catch (error) {
            console.error("{{modelName}}Service -> Create -> " + (error as Error).message);
            if (process.env.NODE_ENV === "development") {
                if (error instanceof ZodError)
                    throw new Error("{{modelName}}Service -> Create -> Invalid Zod params -> " + error.message);
                if (error instanceof PrismaClientKnownRequestError)
                    throw new Error("{{modelName}}Service -> Create -> Prisma error -> " + error.message);
                throw new Error("{{modelName}}Service -> Create -> " + (error as Error).message);
            }
            // TODO: add logging
            return { error: "Unable to create {{modelNameLower}}..." };
        }
    }

    static async upsert<T extends Upsert{{modelName}}Props>(props: T): Promise<ResponseFormat<Upsert{{modelName}}Response<T>>> {
        try {
            const { create, update, where{{#if hasRelations}}, include{{/if}}, omit, select } = upsert{{modelName}}Schema.parse(props);

            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.upsert({
                create,
                update,
                where,
                {{#if hasRelations}}...(include && { include }),{{/if}}
                ...(omit && { omit }),
                ...(select && { select }),
            });

            return { data: {{modelNameLower}} as Upsert{{modelName}}Response<T> };
        } catch (error) {
            console.error("{{modelName}}Service -> Upsert -> " + (error as Error).message);
            if (process.env.NODE_ENV === "development") {
                if (error instanceof ZodError)
                    throw new Error("{{modelName}}Service -> Upsert -> Invalid Zod params -> " + error.message);
                if (error instanceof PrismaClientKnownRequestError)
                    throw new Error("{{modelName}}Service -> Upsert -> Prisma error -> " + error.message);
                throw new Error("{{modelName}}Service -> Upsert -> " + (error as Error).message);
            }
            // TODO: add logging
            return { error: "Unable to upsert {{modelNameLower}}..." };
        }
    }

    static async update<T extends Update{{modelName}}Props>(props: T): Promise<ResponseFormat<Update{{modelName}}Response<T>>> {
        try {
            const { data, where{{#if hasRelations}}, include{{/if}}, omit, select } = update{{modelName}}Schema.parse(props);

            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.update({
                data,
                where,
                {{#if hasRelations}}...(include && { include }),{{/if}}
                ...(omit && { omit }),
                ...(select && { select }),
            });

            return { data: {{modelNameLower}} as Update{{modelName}}Response<T> };
        } catch (error) {
            console.error("{{modelName}}Service -> Update -> " + (error as Error).message);
            if (process.env.NODE_ENV === "development") {
                if (error instanceof ZodError)
                    throw new Error("{{modelName}}Service -> Update -> Invalid Zod params -> " + error.message);
                if (error instanceof PrismaClientKnownRequestError)
                    throw new Error("{{modelName}}Service -> Update -> Prisma error -> " + error.message);
                throw new Error("{{modelName}}Service -> Update -> " + (error as Error).message);
            }
            // TODO: add logging
            return { error: "Unable to update {{modelNameLower}}..." };
        }
    }

    static async delete<T extends Delete{{modelName}}Props>(props: T): Promise<ResponseFormat<Delete{{modelName}}Response<T>>> {
        try {
            const { where{{#if hasRelations}}, include{{/if}}, omit, select } = delete{{modelName}}Schema.parse(props);

            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.delete({
                where,
                {{#if hasRelations}}...(include && { include }),{{/if}}
                ...(omit && { omit }),
                ...(select && { select }),
            });

            return { data: {{modelNameLower}} as Delete{{modelName}}Response<T> };
        } catch (error) {
            console.error("{{modelName}}Service -> Delete -> " + (error as Error).message);
            if (process.env.NODE_ENV === "development") {
                if (error instanceof ZodError)
                    throw new Error("{{modelName}}Service -> Delete -> Invalid Zod params -> " + error.message);
                if (error instanceof PrismaClientKnownRequestError)
                    throw new Error("{{modelName}}Service -> Delete -> Prisma error -> " + error.message);
                throw new Error("{{modelName}}Service -> Delete -> " + (error as Error).message);
            }
            // TODO: add logging
            return { error: "Unable to delete {{modelNameLower}}..." };
        }
    }

    static async findUnique<T extends FindUnique{{modelName}}Props>(props: T): Promise<ResponseFormat<FindUnique{{modelName}}Response<T>>> {
        try {
            const { where{{#if hasRelations}}, include{{/if}}, omit, select } = select{{modelName}}Schema.parse(props);

            const {{modelNameLower}} = await PrismaInstance.{{modelNameLower}}.findUnique({
                where,
                {{#if hasRelations}}...(include && { include }),{{/if}}
                ...(omit && { omit }),
                ...(select && { select }),
            });

            return { data: {{modelNameLower}} as FindUnique{{modelName}}Response<T> };
        } catch (error) {
            console.error("{{modelName}}Service -> FindUnique -> " + (error as Error).message);
            if (process.env.NODE_ENV === "development") {
                if (error instanceof ZodError)
                    throw new Error("{{modelName}}Service -> FindUnique -> Invalid Zod params -> " + error.message);
                if (error instanceof PrismaClientKnownRequestError)
                    throw new Error("{{modelName}}Service -> FindUnique -> Prisma error -> " + error.message);
                throw new Error("{{modelName}}Service -> FindUnique -> " + (error as Error).message);
            }
            // TODO: add logging
            return { error: "Unable to find {{modelNameLower}}..." };
        }
    }

    static async findMany<T extends FindMany{{modelName}}Props>(props: T): Promise<ResponseFormat<FindMany{{modelName}}Response<T>>> {
        try {
            const {
                cursor,
                distinct,
                {{#if hasRelations}}include,{{/if}}
                omit,
                orderBy,
                select,
                skip = 0,
                take = 10,
                where,
            } = selectMany{{modelName}}Schema.parse(props);

            const {{modelNameLower}}List = await PrismaInstance.{{modelNameLower}}.findMany({
                ...(cursor && { cursor }),
                ...(distinct && { distinct }),
                {{#if hasRelations}}...(include && { include }),{{/if}}
                ...(omit && { omit }),
                ...(orderBy && { orderBy }),
                ...(select && { select }),
                ...(skip && { skip }),
                ...(take && { take }),
                ...(where && { where }),
            });

            return { data: {{modelNameLower}}List as FindMany{{modelName}}Response<T> };
        } catch (error) {
            console.error("{{modelName}}Service -> FindMany -> " + (error as Error).message);
            if (process.env.NODE_ENV === "development") {
                if (error instanceof ZodError)
                    throw new Error("{{modelName}}Service -> FindMany -> Invalid Zod params -> " + error.message);
                if (error instanceof PrismaClientKnownRequestError)
                    throw new Error("{{modelName}}Service -> FindMany -> Prisma error -> " + error.message);
                throw new Error("{{modelName}}Service -> FindMany -> " + (error as Error).message);
            }
            // TODO: add logging
            return { error: "Unable to find {{modelNameLower}}s..." };
        }
    }

    static async count(props: Count{{modelName}}Props): Promise<ResponseFormat<Count{{modelName}}Response>> {
        try {
            const { cursor, orderBy, select, skip, take, where } = count{{modelName}}Schema.parse(props);

            const {{modelNameLower}}Amount: {{modelName}}Count = await PrismaInstance.{{modelNameLower}}.count({
                ...(cursor && { cursor }),
                ...(orderBy && { orderBy }),
                ...(select && { select }),
                ...(skip && { skip }),
                ...(take && { take }),
                ...(where && { where }),
            });

            return { data: {{modelNameLower}}Amount };
        } catch (error) {
            console.error("{{modelName}}Service -> Count -> " + (error as Error).message);
            if (process.env.NODE_ENV === "development") {
                if (error instanceof ZodError)
                    throw new Error("{{modelName}}Service -> Count -> Invalid Zod params -> " + error.message);
                if (error instanceof PrismaClientKnownRequestError)
                    throw new Error("{{modelName}}Service -> Count -> Prisma error -> " + error.message);
                throw new Error("{{modelName}}Service -> Count -> " + (error as Error).message);
            }
            // TODO: add logging
            return { error: "Unable to count {{modelNameLower}}s..." };
        }
    }
}
