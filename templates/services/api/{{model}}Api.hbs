import { {{modelName}}CountCached, {{modelName}}FindFirstCached, {{modelName}}FindManyCached, {{modelName}}FindUniqueCached } from "@services/cached/index";
import { {{modelName}}CountProps, {{modelName}}CountResponse, {{modelName}}FindFirstProps, {{modelName}}FindFirstResponse, {{modelName}}FindManyProps, {{modelName}}FindManyResponse, {{modelName}}FindUniqueProps, {{modelName}}FindUniqueResponse } from "@services/types/index";
import { parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

export type {{modelName}}Routes<Input> = {
    "/{{modelNameLower}}/findMany": {
        params: {{modelName}}FindManyProps,
        response: {{modelName}}FindManyResponse<Input extends {{modelName}}FindManyProps ? Input : never>
    },
    "/{{modelNameLower}}/findFirst": {
        params: {{modelName}}FindFirstProps,
        response: {{modelName}}FindFirstResponse<Input extends {{modelName}}FindFirstProps ? Input : never>
    },
    "/{{modelNameLower}}/findUnique": {
        params: {{modelName}}FindUniqueProps,
        response: {{modelName}}FindUniqueResponse<Input extends {{modelName}}FindUniqueProps ? Input : never>
    },
    "/{{modelNameLower}}/count": {
        params: {{modelName}}CountProps,
        response: {{modelName}}CountResponse
    }
}

export const {{modelName}}FindManyApi = async <T extends {{modelName}}FindManyProps>(request: NextRequest) => {
    try {
        const params: T = parseAndDecodeParams(request);
        const response = await {{modelName}}FindManyCached<T>(params);
        return NextResponse.json(response, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: "{{modelName}}FindManyApi -> " + (error as Error).message }, { status: 500 });
    }
};

export const {{modelName}}FindFirstApi = async <T extends {{modelName}}FindFirstProps>(request: NextRequest) => {
    try {
        const params: T = parseAndDecodeParams(request);
        const response = await {{modelName}}FindFirstCached<T>(params);
        return NextResponse.json(response, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: "{{modelName}}FindFirstApi -> " + (error as Error).message }, { status: 500 });
    }
};

export const {{modelName}}FindUniqueApi = async <T extends {{modelName}}FindUniqueProps>(request: NextRequest) => {
    try {
        const params: T = parseAndDecodeParams(request);
        const response = await {{modelName}}FindUniqueCached<T>(params);
        return NextResponse.json(response, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: "{{modelName}}FindUniqueApi -> " + (error as Error).message }, { status: 500 });
    }
};

export const {{modelName}}CountApi = async (request: NextRequest) => {
    try {
        const params: {{modelName}}CountProps = parseAndDecodeParams(request);
        const response = await {{modelName}}CountCached(params);
        return NextResponse.json(response, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: "{{modelName}}CountApi -> " + (error as Error).message }, { status: 500 });
    }
};
