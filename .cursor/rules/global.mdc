---
description: 
globs: 
alwaysApply: false
---
# Guide d'architecture et de conventions du projet EcoService

## 1. Génération automatique des services/types/api/actions

- Les fichiers de services, types, API et actions sont **auto-générés** à partir du schéma Prisma (`prisma/schema.prisma`) grâce au script [`scripts/generator.ts`](mdc:scripts/generator.ts).
- Les templates utilisés pour la génération se trouvent dans [`templates/services/`](mdc:templates/services).
- Les fichiers générés incluent :
  - Les types TypeScript pour chaque modèle (ex : `QuantityType.ts`)
  - Les classes de service (ex : `QuantityClass.ts`)
  - Les actions (ex : `QuantityAction.ts`)
  - Les routes API REST et index pour les imports
- **Convention** : Ne pas modifier manuellement les fichiers générés, mais modifier les templates ou le schéma Prisma.

## 2. Utilitaires de requêtes API : Fetch et FetchV2

- [`utils/Fetch/Fetch.ts`](mdc:utils/Fetch/Fetch.ts) : utilitaire principal pour effectuer des requêtes API typées côté client ou serveur, avec gestion des headers, cookies et timeout.
- [`utils/Fetch/FetchHook.ts`](mdc:utils/Fetch/FetchHook.ts) : hook React (`useFetch`) pour consommer l'API côté client avec gestion automatique du chargement, des erreurs et de l'annulation.
- [`utils/FetchV2/FetchV2.ts`](mdc:utils/FetchV2/FetchV2.ts) : version optimisée pour les routes internes, typée par `/api/internal/Routes.ts`.
- [`utils/FetchV2/FetchHookV2.ts`](mdc:utils/FetchV2/FetchHookV2.ts) : hook React (`useFetchV2`) pour la version V2, avec les mêmes avantages que le hook classique.

## 3. Processus métiers synchrones (process/)

- Les fichiers du dossier [`process/`](mdc:process) (ex : `GetOrCreateBasket.ts`) orchestrent des suites d'actions et de vérifications synchrones, souvent pour des mutations complexes.
- Ces process utilisent des fetch **sans cache** pour garantir la fraîcheur des données.
- À l'inverse, les endpoints API générés via [`FetchV2`](mdc:utils/FetchV2/FetchV2.ts) et [`Routes.ts`](mdc:app/api/internal/Routes.ts) sont **mis en cache** pour optimiser les performances.

## 4. Composants UI réutilisables

- Tous les composants UI réutilisables sont dans [`components/ui/`](mdc:components/ui).
- Convention de nommage : PascalCase, fichiers `.tsx`.
- Les composants sont pensés pour être composables, stylés via des utilitaires CSS, et typés strictement.
- Exemples : `Button`, `Input`, `Modal`, `Loader`, `Select`, etc.

## 5. SSR, SEO et gestion des données initiales

- Les pages principales (ex : [`app/catalog/page.tsx`](mdc:app/catalog/page.tsx)) utilisent le SSR pour précharger les données côté serveur.
- Les données initiales sont injectées dans des context providers (ex : `CatalogProvider`) pour être accessibles côté client sans refetch.
- Les hooks comme `useQueryParams` et les context providers facilitent la synchronisation des filtres, de la pagination et des recherches.
- L'optimisation SEO est assurée par le rendu côté serveur et la structuration des pages.

## 6. Authentification avec BetterAuth

- L'authentification est gérée par [BetterAuth](mdc:https:/github.com/BetterTyped/better-auth).
- [`lib/auth.ts`](mdc:lib/auth.ts) : configuration principale, plugins, gestion des sessions, emails, etc.
- [`lib/authClient.ts`](mdc:lib/authClient.ts) : hook `useSession` pour accéder à la session côté client.
- [`lib/authServer.ts`](mdc:lib/authServer.ts) : fonction `GetSession` pour accéder à la session côté serveur.
- Les sessions sont enrichies avec des données utilisateur personnalisées (ex : rôle, nom, etc.).

## 7. Workflows GitHub pour le CI/CD

- Les workflows de développement continu sont dans [`/.github/workflows/`](mdc:.github/workflows).
- Ils automatisent les tests, le linting, le build et le déploiement.
- Convention : chaque action ou workflow est documenté et versionné.

## 8. Synchronisation automatique du panier

- Le panier est géré par :
  - [`components/basket/basket.tsx`](mdc:components/basket/basket.tsx) (UI principale)
  - [`components/basket/basketStore.ts`](mdc:components/basket/basketStore.ts) (store Zustand, synchronisation locale/serveur)
  - [`components/basket/basketType.ts`](mdc:components/basket/basketType.ts) (types)
  - [`components/basket/zustandCookieStorage.ts`](mdc:components/basket/zustandCookieStorage.ts) (persistance cookie)
  - [`components/basket/zustandServer.ts`](mdc:components/basket/zustandServer.ts) (lecture cookie côté serveur)
  - [`process/GetOrCreateBasket.ts`](mdc:process/GetOrCreateBasket.ts) (processus de récupération et synchronisation du panier)
- La synchronisation locale/serveur est automatique et optimisée (utilisation de `createMany`, `deleteMany` pour les quantités).
- Les cookies sont utilisés pour la persistance côté client et serveur.

## 9. Style de code et conventions React

- Utilisation de **fonctions fléchées** et de la syntaxe ES6+.
- Les composants sont typés avec TypeScript, props explicites, et hooks personnalisés pour la logique métier.
- Les hooks sont utilisés pour la gestion d'état, les effets, et la consommation d'API.
- Les providers de contexte sont utilisés pour partager les données initiales et l'état global.

---

**Résumé** :  
Ce projet est structuré autour de la génération automatique de code à partir du schéma Prisma, d'une architecture React moderne (SSR, context, hooks), d'une gestion avancée de l'authentification et du panier, et d'une forte automatisation via les workflows GitHub.  
Respecte ces conventions pour garantir la maintenabilité et la cohérence du code.

